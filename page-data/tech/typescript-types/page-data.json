{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/tech/typescript-types",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/typescript-types","tags":["TS"],"date":"2022-10-29","img":null,"title":"타입스크립트의 타입 정리"},"excerpt":"자바스크립트에서는 여러가지 자료형을 제공합니다. (자바스크립트 자료형) 타입스크립트도 자바스크립트가 제공하는 자료형을 당연히 제공하는데요. 하지만 타입스크립트는 자바스크립트가 제공하는 것보다 더 많은 타입(Tuple, Enum, ... etc…","html":"<p>자바스크립트에서는 여러가지 자료형을 제공합니다. (<a href=\"/tech/let-me-know-js-a-bit-js-data-type\">자바스크립트 자료형</a>) 타입스크립트도 자바스크립트가 제공하는 자료형을 당연히 제공하는데요.</p>\n<p>하지만 타입스크립트는 자바스크립트가 제공하는 것보다 더 많은 타입(Tuple, Enum, ... etc.)이 있고, 심지어 개발자가 사용자 정의 타입을 만들 수도 있습니다.</p>\n<h2 id=\"타입스크립트의-타입\" style=\"position:relative;\">타입스크립트의 타입<a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9E%85\" aria-label=\"타입스크립트의 타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>먼저 타입스크립트가 제공하는 기본 타입을 알아봅시다.</p>\n<h3 id=\"number\" style=\"position:relative;\">number<a href=\"#number\" aria-label=\"number permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>자바스크립트의 number와 동일합니다.</li>\n<li>정수(integer)나 실수(float)의 구별이 없습니다.</li>\n</ul>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let i:number = 10\nlet f:number = 1.3\nlet n:number = -5</code>\n        </deckgo-highlight-code>\n<hr>\n<br/>\n<h3 id=\"string\" style=\"position:relative;\">string<a href=\"#string\" aria-label=\"string permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>자바스크립트의 string과 동일합니다.</li>\n</ul>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let s:string = &#39;str&#39;\nlet t:string = `str`\nlet s2:string = &quot;str&quot;</code>\n        </deckgo-highlight-code>\n<hr>\n<br/>\n<h3 id=\"boolean\" style=\"position:relative;\">boolean<a href=\"#boolean\" aria-label=\"boolean permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><code class=\"language-text\">true</code>와 <code class=\"language-text\">false</code>만 가집니다.</li>\n<li>자바스크립트의 truthy나 falsy 값은 해당하지 않습니다.</li>\n</ul>\n<p>자바스크립트에서는 <code class=\"language-text\">0</code>, <code class=\"language-text\">1</code>, <code class=\"language-text\">null</code>, <code class=\"language-text\">undefined</code> 등이 <code class=\"language-text\">truthy</code> 혹은 <code class=\"language-text\">falsy</code>, 즉 참 같은 값, 거짓 같은 값으로 판단되어 if 조건문 속에서 사용되는 경우가 있습니다.<br>\n하지만 타입스크립트에서는 <code class=\"language-text\">true</code>와 <code class=\"language-text\">false</code> 외에는 boolean 타입으로 인정하지 않습니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let t:boolean = true\nlet f:boolean = false</code>\n        </deckgo-highlight-code>\n<hr>\n<br/>\n<h3 id=\"object\" style=\"position:relative;\">object<a href=\"#object\" aria-label=\"object permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>자바스크립트의 object는 모두 타입스크립트의 object입니다.</li>\n<li>타입스크립트에서는 보다 구체적인 객체 형태를 가질 수 있습니다.</li>\n</ul>\n<p>타입스크립트에서 객체를 다루는 방식을 살펴보겠습니다.</p>\n<p>객체를 하나 만들고, 새로운 속성을 지정해보겠습니다.</p>\n<h4 id=\"타입스크립트-객체-생성\" style=\"position:relative;\">타입스크립트 객체 생성<a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-label=\"타입스크립트 객체 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const obj = {\n    name: &#39;Yeony&#39;,\n    age: 24,\n}\nconsole.log(obj.name) // 컴파일 에러 Property &#39;name&#39; does not exist on type &#39;object&#39;.\nobj.hobby = &#39;traveling&#39; // 컴파일 에러: Property &#39;hobby&#39; does not exist on type &#39;object&#39;.</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">name</code>과 <code class=\"language-text\">hobby</code> 모두 속성이 해당 객체에 없다고 표시됩니다.</p>\n<p>타입스크립트에서는 위 객체의 데이터 타입을 아래와 같이 추론합니다.</p>\n<h4 id=\"타입스크립트의-타입-추론\" style=\"position:relative;\">타입스크립트의 타입 추론<a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0\" aria-label=\"타입스크립트의 타입 추론 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const obj: {\n    name: string;\n    age: number;\n}</code>\n        </deckgo-highlight-code>\n<p>이 내용이 obj에 저장된 데이터 타입이라고 생각하는 것이죠. 이 추론에 따르면 <code class=\"language-text\">name</code> 프로퍼티는 무조건 <code class=\"language-text\">string</code>이여야 하고, <code class=\"language-text\">age</code> 또한 <code class=\"language-text\">number</code> 타입이어야 합니다.</p>\n<p><code class=\"language-text\">obj</code>가 객체라고 명시해보겠습니다.</p>\n<h4 id=\"객체-타입-명시\" style=\"position:relative;\">객체 타입 명시<a href=\"#%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85-%EB%AA%85%EC%8B%9C\" aria-label=\"객체 타입 명시 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 타입 const obj: object\nconst obj: object = {\n    name: &#39;Yeony&#39;,\n    age: 24,\n} \n\nconsole.log(obj.name) // 컴파일 에러\nobj.hobby = &#39;traveling&#39; // 컴파일 에러</code>\n        </deckgo-highlight-code>\n<p>타입스크립트는 이제 <code class=\"language-text\">obj</code>가 객체 타입이라고 인식하지만, 컴파일은 여전히 되지 않습니다.</p>\n<p>이 상황을 해결하기 위해 우리는 좀더 상세한 타입 지정을 할 수 있습니다.</p>\n<h4 id=\"상세한-타입-지정\" style=\"position:relative;\">상세한 타입 지정<a href=\"#%EC%83%81%EC%84%B8%ED%95%9C-%ED%83%80%EC%9E%85-%EC%A7%80%EC%A0%95\" aria-label=\"상세한 타입 지정 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const obj: {\n    name: string;\n    age: number;\n} = {\n    name: &#39;Yeony&#39;,\n    age: 24,\n}\n\nconsole.log(obj.name)\nobj.hobby = &#39;traveling&#39; // 컴파일 에러</code>\n        </deckgo-highlight-code>\n<p>이제 <code class=\"language-text\">name</code>은 접근이 가능합니다. 하지만 여전히 동적 할당은 컴파일 단계에서 에러가 발생합니다. <code class=\"language-text\">hobby</code>라는 key가 정의되지 않았기 때문입니다.</p>\n<p>동적 할당이 가능하게 하려면 프로퍼티 키가 무엇이 들어오더라도 가능하게끔 코드를 수정해야 합니다.</p>\n<h4 id=\"타입스크립트의-동적-할당\" style=\"position:relative;\">타입스크립트의 동적 할당<a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EB%8F%99%EC%A0%81-%ED%95%A0%EB%8B%B9\" aria-label=\"타입스크립트의 동적 할당 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>자바스크립트의 객체를 상기해봅시다. 객체는 <strong>key-value</strong> 쌍으로 이루어져 있고, key는 문자열입니다. value는 어떤 자료형이든 가능합니다.</p>\n<p>따라서 동적 할당이 가능하게 하려면 아래와 같이 작성해야 합니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const obj: {\n    name: string;\n    age: number;\n    [key: string]: any;\n} = {\n    name: &#39;Yeony&#39;,\n    age: 24,\n}\n\nconsole.log(obj.name)\n\nobj.hobby = &#39;traveling&#39;</code>\n        </deckgo-highlight-code>\n<hr>\n<br/>\n<h3 id=\"array\" style=\"position:relative;\">Array<a href=\"#array\" aria-label=\"array permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>자바스크립트의 array는 모두 타입스크립트의 array입니다.</li>\n<li>타입을 유연하게 지정하거나, 제한적으로 지정할 수도 있습니다.</li>\n</ul>\n<h4 id=\"특정-타입의-배열\" style=\"position:relative;\">특정 타입의 배열<a href=\"#%ED%8A%B9%EC%A0%95-%ED%83%80%EC%9E%85%EC%9D%98-%EB%B0%B0%EC%97%B4\" aria-label=\"특정 타입의 배열 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>타입스크립트에서는 특정한 타입으로 이루어진 배열을 선언할 수 있습니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let favoriteFood: string[];\n\nfavoriteFood = [&quot;pizza&quot;, &quot;chicken&quot;]\n\nfavoriteFood = [&quot;gulasch&quot;, 1] // 컴파일 에러: Type &#39;number&#39; is not assignable to type &#39;string&#39;.</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">string[]</code> 이나 <code class=\"language-text\">number[]</code> 같이 작성합니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// only number\nlet nums:number[] = [1, 2, 3]\nlet strs:string[] = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\nlet bools:boolean[] = [true, false, true]</code>\n        </deckgo-highlight-code>\n<h4 id=\"타입에-관계없는-배열\" style=\"position:relative;\">타입에 관계없는 배열<a href=\"#%ED%83%80%EC%9E%85%EC%97%90-%EA%B4%80%EA%B3%84%EC%97%86%EB%8A%94-%EB%B0%B0%EC%97%B4\" aria-label=\"타입에 관계없는 배열 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>자바스크립트에서 작동하는 배열처럼 작성할 경우에는 <code class=\"language-text\">any[]</code> 로 지정해줍니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let anys:any[] = [1, &#39;a&#39;, true]</code>\n        </deckgo-highlight-code>\n<h4 id=\"여러-타입의-배열\" style=\"position:relative;\">여러 타입의 배열<a href=\"#%EC%97%AC%EB%9F%AC-%ED%83%80%EC%9E%85%EC%9D%98-%EB%B0%B0%EC%97%B4\" aria-label=\"여러 타입의 배열 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>단일한 타입이나 타입을 무시하는(any) 배열이 아닌, 특정한 여러 타입만 들어오는 배열을 정의하고 싶을 때엔 이렇게 작성합니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let selects:(number | string | boolean)[] = [1, &#39;c&#39;, false];</code>\n        </deckgo-highlight-code>\n<p>이러한 형태를 <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">union 타입</a> 이라고 합니다.</p>\n<hr>\n<br/>\n<h3 id=\"tuple\" style=\"position:relative;\">Tuple<a href=\"#tuple\" aria-label=\"tuple permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>배열의 형태이지만 <strong>길이와 타입이 고정된</strong> 배열입니다.</li>\n<li>타입스크립트에만 있습니다.</li>\n</ul>\n<p>튜플은 이러한 형태로 작성됩니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const role = [2, &#39;author&#39;]\n\n// 타입\n// role: (string | number)[]</code>\n        </deckgo-highlight-code>\n<p>다만 위 코드에서는 <code class=\"language-text\">role</code> 이 일반적인 배열로 인식됩니다. 타입스크립트는 개발자가 2가지 요소만 입력할 것이란 걸 아직 모르기 때문입니다. 그러면 더 이상 튜플이 아닙니다.</p>\n<p>튜플이라는 것을 명시하려면 이렇게 작성합니다.</p>\n<h4 id=\"튜플-선언\" style=\"position:relative;\">튜플 선언<a href=\"#%ED%8A%9C%ED%94%8C-%EC%84%A0%EC%96%B8\" aria-label=\"튜플 선언 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const role: [number, string] = [2, &#39;author&#39;]\n\nrole[1] = 3 // 컴파일 에러 Type &#39;number&#39; is not assignable to type &#39;string&#39;.\n\nrole[3] = 11 // 컴파일 에러 Tuple type &#39;[number, string]&#39; of length &#39;2&#39; has no element at index &#39;3&#39;.</code>\n        </deckgo-highlight-code>\n<h4 id=\"튜플은-어디에-사용될까\" style=\"position:relative;\">튜플은 어디에 사용될까?<a href=\"#%ED%8A%9C%ED%94%8C%EC%9D%80-%EC%96%B4%EB%94%94%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%A0%EA%B9%8C\" aria-label=\"튜플은 어디에 사용될까 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>특정한 규칙(순서)로 정보를 담을 때 유용합니다.</p>\n<p>사용자 정보를 (사용자 인덱스 | 이메일 | 비밀번호) 구조로 저장한다고 가정했을 때, 뒤죽박죽되면 당연히 곤란하겠죠.</p>\n<p>튜플의 길이를 벗어나게 할당하려고 하거나 명시된 순서에 맞지 않는 자료형의 값을 할당하면 에러가 표시되니 관리하기 수월합니다.</p>\n<h4 id=\"튜플의-단점\" style=\"position:relative;\">튜플의 단점<a href=\"#%ED%8A%9C%ED%94%8C%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"튜플의 단점 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>튜플은 길이가 고정되어 있다고 했지만, 명시적인 할당에만 반응합니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const role: [number, string] = [2, &#39;author&#39;]\n\n// role[3] = 11 // 컴파일 에러\n\nrole.push(&#39;메롱&#39;)\n\nconsole.log(role) // [2, &quot;author&quot;, &quot;메롱&quot;] </code>\n        </deckgo-highlight-code>\n<p>자바스크립트 Array의 내장 메소드인 <code class=\"language-text\">push()</code> 메소드에는 대응할 수 없다는 단점이 있습니다.</p>\n<hr>\n<br/>\n<h3 id=\"enum\" style=\"position:relative;\">Enum<a href=\"#enum\" aria-label=\"enum permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>타입스크립트에만 있습니다.\n<ul>\n<li>다른 언어(Java, C) 등에는 널리 사용됩니다.</li>\n</ul>\n</li>\n<li>사용자 지정 타입입니다.</li>\n<li>자동으로 열거되는 전역 상수 식별자입니다.</li>\n<li>라벨들은 0부터 시작하는 숫자로 자동 변환됩니다.</li>\n</ul>\n<p>사용자 권한을 작성할 때 0은 ADMIN, 1은 USER, 2는 AUTHOR 라고 정했다고 가정해봅시다.<br>\n이 규칙을 절대 잊어버리지 않는다면 큰 문제가 발생하진 않겠지만, if 검사를 할 때 개발 도중 잊어버릴 가능성도 있습니다.</p>\n<p>혹은 'ADMIN', 'VALID_USER' 등의 문자열로도 작성할 수 있겠죠. 하지만 <code class=\"language-text\">if(role === 'VALID_USER')</code> 이런 식으로 작성하면 과연 효율이 좋을까요?</p>\n<p>개발자가 읽기 쉽고(문자열), 백그라손쉽게 코딩하기 위해 Enum을 사용합니다.</p>\n<h4 id=\"enum-생성\" style=\"position:relative;\">Enum 생성<a href=\"#enum-%EC%83%9D%EC%84%B1\" aria-label=\"enum 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">enum Role {\n    ADMIN, USER, AUTHOR\n};\n\nconst user:{\n    name: string;\n    role: Role\n} = {\n    name: &#39;Yeony&#39;,\n    role: Role.USER\n}\n</code>\n        </deckgo-highlight-code>\n<h4 id=\"enum의-동작\" style=\"position:relative;\">Enum의 동작<a href=\"#enum%EC%9D%98-%EB%8F%99%EC%9E%91\" aria-label=\"enum의 동작 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Enum은 기본적으로 0부터 시작해 할당됩니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">enum Role {\n    ADMIN, USER, AUTHOR\n};\n\n// --------------------\n// enum의 타입\nRole.ADMIN = 0\nRole.USER = 1\nRole.AUTHOR = 2</code>\n        </deckgo-highlight-code>\n<p>만약 0이 아닌 다른 수로 시작하고 싶다면 아래와 같이 명시합니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">enum Role {\n    ADMIN = 3, USER, AUTHOR\n};\n\n// --------------------\n// enum의 타입\nRole.ADMIN = 3\nRole.USER = 4\nRole.AUTHOR = 5</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">enum Role {\n    ADMIN = 3, USER = 100, AUTHOR\n};\n\n// --------------------\n// enum의 타입\nRole.ADMIN = 3\nRole.USER = 100\nRole.AUTHOR = 101</code>\n        </deckgo-highlight-code>\n<p>숫자가 기본이지만 문자열도 할당할 수 있습니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">enum Role {\n    ADMIN = &#39;ADMIN&#39;, USER = 100, AUTHOR\n};\n\n// --------------------\n// enum의 타입\nRole.ADMIN = &#39;ADMIN&#39;\nRole.USER = 100\nRole.AUTHOR = 101</code>\n        </deckgo-highlight-code>\n<p>하지만 문자열로 할당했을 경우, <code class=\"language-text\">USER = 100</code> 같이 숫자로 초기화를 하지 않으면 에러가 발생합니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">enum Role {\n    ADMIN = &#39;ADMIN&#39;, USER, AUTHOR // 컴파일 에러 : Enum member must have initializer\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"any\" style=\"position:relative;\">Any<a href=\"#any\" aria-label=\"any permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>모든 종류의 값 저장 가능합니다.</li>\n<li>타입 배정이 필요하지 않습니다.</li>\n</ul>\n<p>위에서 객체 타입을 보며 잠깐 보았듯, <code class=\"language-text\">any</code>는 아주 유연합니다. 사실상 타입을 신경쓰지 않겠다는 말이기도 하죠.</p>\n<p>따라서 가능한 한 새로운 코드를 작성할 때에는 any 타입을 지정하지 않는 것이 좋습니다. 타입스크립트가 제공하는 모든 장점을 any가 상쇄시키기 때문이죠.</p>\n<p>이미 있는 프로젝트에 타입스크립트를 점진적으로 적용할 때 유용합니다.</p>\n<hr>\n<br/>\n<h3 id=\"void\" style=\"position:relative;\">Void<a href=\"#void\" aria-label=\"void permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>타입스크립트에만 있습니다. (다른 언어에는 존재합니다.)</li>\n<li>변수에 <code class=\"language-text\">undefined</code>만 할당할 수 있습니다.</li>\n<li>함수에는 반환 값을 설정할 수 없는 타입입니다.</li>\n</ul>\n<p>자바스크립트에서 함수는 반환 값이 있을 수도 있고, 없을 수도 있습니다. 함수에 <code class=\"language-text\">return 값</code> 코드가 없는 경우에 자바스크립트는 <code class=\"language-text\">undefined</code>를 반환합니다.</p>\n<p>타입스크립트에서는 <strong>반환 값이 없다</strong>는 것을 명시적으로 보여주기 위해 <code class=\"language-text\">void</code>를 사용합니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let ud: void = undefined\n\nfunction sayHello(name:string): void {\n    console.log(`Hi, ${name}!`)\n}</code>\n        </deckgo-highlight-code>\n<hr>\n<br/>\n<h3 id=\"never\" style=\"position:relative;\">Never<a href=\"#never\" aria-label=\"never permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>타입스크립트에만 있습니다.</li>\n<li>절대 발생할 수 없는 타입을 나타냅니다.</li>\n<li><strong>항상 오류</strong>를 출력하거나 <strong>리턴 값을 절대 내보내지 않는</strong> 타입입니다.</li>\n</ul>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 항상 오류\nfunction alwaysError(msg:string): never {\n    throw new Error(msg);\n}\n\n// 무한루프\nfunction infiniteLoop(): never {\n    while(true) {\n        //...\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>변수의 타입을 <code class=\"language-text\">never</code>로 지정한 경우에는 <code class=\"language-text\">never</code>만 할당할 수 있습니다. <code class=\"language-text\">any</code> 타입도 불가능합니다.</p>\n<deckgo-highlight-code language=\"typescript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let neverType:never;\n\nneverType = 100; // 컴파일 에러\n\n// 함수의 반환 타입이 never\nneverType = (function():never { throw new Error(&#39;Error&#39;) })();</code>\n        </deckgo-highlight-code>","internal":{"content":"\n자바스크립트에서는 여러가지 자료형을 제공합니다. ([자바스크립트 자료형](/tech/let-me-know-js-a-bit-js-data-type)) 타입스크립트도 자바스크립트가 제공하는 자료형을 당연히 제공하는데요.\n\n하지만 타입스크립트는 자바스크립트가 제공하는 것보다 더 많은 타입(Tuple, Enum, ... etc.)이 있고, 심지어 개발자가 사용자 정의 타입을 만들 수도 있습니다.\n\n## 타입스크립트의 타입\n\n먼저 타입스크립트가 제공하는 기본 타입을 알아봅시다.\n\n### number\n\n* 자바스크립트의 number와 동일합니다.\n* 정수(integer)나 실수(float)의 구별이 없습니다.\n\n```typescript\nlet i:number = 10\nlet f:number = 1.3\nlet n:number = -5\n```\n---\n<br/>\n\n### string\n\n* 자바스크립트의 string과 동일합니다.\n\n```typescript\nlet s:string = 'str'\nlet t:string = `str`\nlet s2:string = \"str\"\n```\n---\n<br/>\n\n### boolean\n\n* `true`와 `false`만 가집니다.\n* 자바스크립트의 truthy나 falsy 값은 해당하지 않습니다.\n\n자바스크립트에서는 `0`, `1`, `null`, `undefined` 등이 `truthy` 혹은 `falsy`, 즉 참 같은 값, 거짓 같은 값으로 판단되어 if 조건문 속에서 사용되는 경우가 있습니다.   \n하지만 타입스크립트에서는 `true`와 `false` 외에는 boolean 타입으로 인정하지 않습니다.\n\n```typescript\nlet t:boolean = true\nlet f:boolean = false\n```\n---\n<br/>\n\n### object\n* 자바스크립트의 object는 모두 타입스크립트의 object입니다.\n* 타입스크립트에서는 보다 구체적인 객체 형태를 가질 수 있습니다.\n\n타입스크립트에서 객체를 다루는 방식을 살펴보겠습니다.\n\n객체를 하나 만들고, 새로운 속성을 지정해보겠습니다.\n\n#### 타입스크립트 객체 생성\n\n```typescript\nconst obj = {\n    name: 'Yeony',\n    age: 24,\n}\nconsole.log(obj.name) // 컴파일 에러 Property 'name' does not exist on type 'object'.\nobj.hobby = 'traveling' // 컴파일 에러: Property 'hobby' does not exist on type 'object'.\n```\n\n`name`과 `hobby` 모두 속성이 해당 객체에 없다고 표시됩니다.\n\n타입스크립트에서는 위 객체의 데이터 타입을 아래와 같이 추론합니다.\n\n#### 타입스크립트의 타입 추론\n\n```typescript\nconst obj: {\n    name: string;\n    age: number;\n}\n```\n\n이 내용이 obj에 저장된 데이터 타입이라고 생각하는 것이죠. 이 추론에 따르면 `name` 프로퍼티는 무조건 `string`이여야 하고, `age` 또한 `number` 타입이어야 합니다.\n\n`obj`가 객체라고 명시해보겠습니다.\n\n#### 객체 타입 명시\n\n```typescript\n// 타입 const obj: object\nconst obj: object = {\n    name: 'Yeony',\n    age: 24,\n} \n\nconsole.log(obj.name) // 컴파일 에러\nobj.hobby = 'traveling' // 컴파일 에러\n```\n\n\n타입스크립트는 이제 `obj`가 객체 타입이라고 인식하지만, 컴파일은 여전히 되지 않습니다. \n\n이 상황을 해결하기 위해 우리는 좀더 상세한 타입 지정을 할 수 있습니다.\n\n#### 상세한 타입 지정\n\n```typescript\nconst obj: {\n    name: string;\n    age: number;\n} = {\n    name: 'Yeony',\n    age: 24,\n}\n\nconsole.log(obj.name)\nobj.hobby = 'traveling' // 컴파일 에러\n```\n\n이제 `name`은 접근이 가능합니다. 하지만 여전히 동적 할당은 컴파일 단계에서 에러가 발생합니다. `hobby`라는 key가 정의되지 않았기 때문입니다.\n\n동적 할당이 가능하게 하려면 프로퍼티 키가 무엇이 들어오더라도 가능하게끔 코드를 수정해야 합니다.\n\n#### 타입스크립트의 동적 할당\n\n자바스크립트의 객체를 상기해봅시다. 객체는 **key-value** 쌍으로 이루어져 있고, key는 문자열입니다. value는 어떤 자료형이든 가능합니다.\n\n따라서 동적 할당이 가능하게 하려면 아래와 같이 작성해야 합니다.\n\n```typescript\nconst obj: {\n    name: string;\n    age: number;\n    [key: string]: any;\n} = {\n    name: 'Yeony',\n    age: 24,\n}\n\nconsole.log(obj.name)\n\nobj.hobby = 'traveling'\n```\n---\n<br/>\n\n### Array\n\n* 자바스크립트의 array는 모두 타입스크립트의 array입니다.\n* 타입을 유연하게 지정하거나, 제한적으로 지정할 수도 있습니다.\n\n\n#### 특정 타입의 배열\n\n타입스크립트에서는 특정한 타입으로 이루어진 배열을 선언할 수 있습니다.\n\n```typescript\nlet favoriteFood: string[];\n\nfavoriteFood = [\"pizza\", \"chicken\"]\n\nfavoriteFood = [\"gulasch\", 1] // 컴파일 에러: Type 'number' is not assignable to type 'string'.\n```\n\n`string[]` 이나 `number[]` 같이 작성합니다.\n\n```typescript\n// only number\nlet nums:number[] = [1, 2, 3]\nlet strs:string[] = ['a', 'b', 'c']\nlet bools:boolean[] = [true, false, true]\n```\n\n#### 타입에 관계없는 배열\n\n자바스크립트에서 작동하는 배열처럼 작성할 경우에는 `any[]` 로 지정해줍니다.\n\n```typescript\nlet anys:any[] = [1, 'a', true]\n```\n\n#### 여러 타입의 배열\n\n단일한 타입이나 타입을 무시하는(any) 배열이 아닌, 특정한 여러 타입만 들어오는 배열을 정의하고 싶을 때엔 이렇게 작성합니다.\n\n```typescript\nlet selects:(number | string | boolean)[] = [1, 'c', false];\n```\n\n이러한 형태를 [union 타입](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types) 이라고 합니다.\n\n---\n<br/>\n\n### Tuple\n\n* 배열의 형태이지만 **길이와 타입이 고정된** 배열입니다.\n* 타입스크립트에만 있습니다.\n\n튜플은 이러한 형태로 작성됩니다.\n\n```typescript\nconst role = [2, 'author']\n\n// 타입\n// role: (string | number)[]\n```\n\n다만 위 코드에서는 `role` 이 일반적인 배열로 인식됩니다. 타입스크립트는 개발자가 2가지 요소만 입력할 것이란 걸 아직 모르기 때문입니다. 그러면 더 이상 튜플이 아닙니다.\n\n튜플이라는 것을 명시하려면 이렇게 작성합니다.\n\n#### 튜플 선언\n\n```typescript\nconst role: [number, string] = [2, 'author']\n\nrole[1] = 3 // 컴파일 에러 Type 'number' is not assignable to type 'string'.\n\nrole[3] = 11 // 컴파일 에러 Tuple type '[number, string]' of length '2' has no element at index '3'.\n```\n\n#### 튜플은 어디에 사용될까?\n\n특정한 규칙(순서)로 정보를 담을 때 유용합니다.\n\n사용자 정보를 (사용자 인덱스 | 이메일 | 비밀번호) 구조로 저장한다고 가정했을 때, 뒤죽박죽되면 당연히 곤란하겠죠.\n\n튜플의 길이를 벗어나게 할당하려고 하거나 명시된 순서에 맞지 않는 자료형의 값을 할당하면 에러가 표시되니 관리하기 수월합니다.\n\n\n#### 튜플의 단점\n\n튜플은 길이가 고정되어 있다고 했지만, 명시적인 할당에만 반응합니다.\n\n```typescript\nconst role: [number, string] = [2, 'author']\n\n// role[3] = 11 // 컴파일 에러\n\nrole.push('메롱')\n\nconsole.log(role) // [2, \"author\", \"메롱\"] \n```\n\n자바스크립트 Array의 내장 메소드인 `push()` 메소드에는 대응할 수 없다는 단점이 있습니다.\n\n---\n<br/>\n\n\n### Enum\n\n* 타입스크립트에만 있습니다.\n    * 다른 언어(Java, C) 등에는 널리 사용됩니다.\n* 사용자 지정 타입입니다.\n* 자동으로 열거되는 전역 상수 식별자입니다.\n* 라벨들은 0부터 시작하는 숫자로 자동 변환됩니다.\n\n사용자 권한을 작성할 때 0은 ADMIN, 1은 USER, 2는 AUTHOR 라고 정했다고 가정해봅시다.    \n이 규칙을 절대 잊어버리지 않는다면 큰 문제가 발생하진 않겠지만, if 검사를 할 때 개발 도중 잊어버릴 가능성도 있습니다.\n\n혹은 'ADMIN', 'VALID_USER' 등의 문자열로도 작성할 수 있겠죠. 하지만 `if(role === 'VALID_USER')` 이런 식으로 작성하면 과연 효율이 좋을까요?\n\n개발자가 읽기 쉽고(문자열), 백그라손쉽게 코딩하기 위해 Enum을 사용합니다.\n\n#### Enum 생성\n\n```typescript\nenum Role {\n    ADMIN, USER, AUTHOR\n};\n\nconst user:{\n    name: string;\n    role: Role\n} = {\n    name: 'Yeony',\n    role: Role.USER\n}\n\n```\n\n#### Enum의 동작\n\nEnum은 기본적으로 0부터 시작해 할당됩니다.\n\n```typescript\nenum Role {\n    ADMIN, USER, AUTHOR\n};\n\n// --------------------\n// enum의 타입\nRole.ADMIN = 0\nRole.USER = 1\nRole.AUTHOR = 2\n```\n\n만약 0이 아닌 다른 수로 시작하고 싶다면 아래와 같이 명시합니다.\n\n```typescript\nenum Role {\n    ADMIN = 3, USER, AUTHOR\n};\n\n// --------------------\n// enum의 타입\nRole.ADMIN = 3\nRole.USER = 4\nRole.AUTHOR = 5\n```\n\n```typescript\nenum Role {\n    ADMIN = 3, USER = 100, AUTHOR\n};\n\n// --------------------\n// enum의 타입\nRole.ADMIN = 3\nRole.USER = 100\nRole.AUTHOR = 101\n```\n\n숫자가 기본이지만 문자열도 할당할 수 있습니다.\n\n```typescript\nenum Role {\n    ADMIN = 'ADMIN', USER = 100, AUTHOR\n};\n\n// --------------------\n// enum의 타입\nRole.ADMIN = 'ADMIN'\nRole.USER = 100\nRole.AUTHOR = 101\n```\n\n하지만 문자열로 할당했을 경우, `USER = 100` 같이 숫자로 초기화를 하지 않으면 에러가 발생합니다.\n\n```typescript\nenum Role {\n    ADMIN = 'ADMIN', USER, AUTHOR // 컴파일 에러 : Enum member must have initializer\n}\n```\n\n### Any\n\n* 모든 종류의 값 저장 가능합니다.\n* 타입 배정이 필요하지 않습니다.\n\n위에서 객체 타입을 보며 잠깐 보았듯, `any`는 아주 유연합니다. 사실상 타입을 신경쓰지 않겠다는 말이기도 하죠.\n\n따라서 가능한 한 새로운 코드를 작성할 때에는 any 타입을 지정하지 않는 것이 좋습니다. 타입스크립트가 제공하는 모든 장점을 any가 상쇄시키기 때문이죠.\n\n이미 있는 프로젝트에 타입스크립트를 점진적으로 적용할 때 유용합니다.\n\n---\n<br/>\n\n### Void\n\n* 타입스크립트에만 있습니다. (다른 언어에는 존재합니다.)\n* 변수에 `undefined`만 할당할 수 있습니다.\n* 함수에는 반환 값을 설정할 수 없는 타입입니다.\n\n\n자바스크립트에서 함수는 반환 값이 있을 수도 있고, 없을 수도 있습니다. 함수에 `return 값` 코드가 없는 경우에 자바스크립트는 `undefined`를 반환합니다.\n\n타입스크립트에서는 **반환 값이 없다**는 것을 명시적으로 보여주기 위해 `void`를 사용합니다.\n\n\n```typescript\nlet ud: void = undefined\n\nfunction sayHello(name:string): void {\n    console.log(`Hi, ${name}!`)\n}\n```\n---\n<br/>\n\n### Never\n\n* 타입스크립트에만 있습니다.\n* 절대 발생할 수 없는 타입을 나타냅니다.\n* **항상 오류**를 출력하거나 **리턴 값을 절대 내보내지 않는** 타입입니다.\n\n```typescript\n// 항상 오류\nfunction alwaysError(msg:string): never {\n    throw new Error(msg);\n}\n\n// 무한루프\nfunction infiniteLoop(): never {\n    while(true) {\n        //...\n    }\n}\n```\n\n변수의 타입을 `never`로 지정한 경우에는 `never`만 할당할 수 있습니다. `any` 타입도 불가능합니다.\n\n```typescript\nlet neverType:never;\n\nneverType = 100; // 컴파일 에러\n\n// 함수의 반환 타입이 never\nneverType = (function():never { throw new Error('Error') })();\n```"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9E%85\">타입스크립트의 타입</a></p>\n<ul>\n<li>\n<p><a href=\"#number\">number</a></p>\n</li>\n<li>\n<p><a href=\"#string\">string</a></p>\n</li>\n<li>\n<p><a href=\"#boolean\">boolean</a></p>\n</li>\n<li>\n<p><a href=\"#object\">object</a></p>\n<ul>\n<li><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\">타입스크립트 객체 생성</a></li>\n<li><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0\">타입스크립트의 타입 추론</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85-%EB%AA%85%EC%8B%9C\">객체 타입 명시</a></li>\n<li><a href=\"#%EC%83%81%EC%84%B8%ED%95%9C-%ED%83%80%EC%9E%85-%EC%A7%80%EC%A0%95\">상세한 타입 지정</a></li>\n<li><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EB%8F%99%EC%A0%81-%ED%95%A0%EB%8B%B9\">타입스크립트의 동적 할당</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#array\">Array</a></p>\n<ul>\n<li><a href=\"#%ED%8A%B9%EC%A0%95-%ED%83%80%EC%9E%85%EC%9D%98-%EB%B0%B0%EC%97%B4\">특정 타입의 배열</a></li>\n<li><a href=\"#%ED%83%80%EC%9E%85%EC%97%90-%EA%B4%80%EA%B3%84%EC%97%86%EB%8A%94-%EB%B0%B0%EC%97%B4\">타입에 관계없는 배열</a></li>\n<li><a href=\"#%EC%97%AC%EB%9F%AC-%ED%83%80%EC%9E%85%EC%9D%98-%EB%B0%B0%EC%97%B4\">여러 타입의 배열</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tuple\">Tuple</a></p>\n<ul>\n<li><a href=\"#%ED%8A%9C%ED%94%8C-%EC%84%A0%EC%96%B8\">튜플 선언</a></li>\n<li><a href=\"#%ED%8A%9C%ED%94%8C%EC%9D%80-%EC%96%B4%EB%94%94%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%A0%EA%B9%8C\">튜플은 어디에 사용될까?</a></li>\n<li><a href=\"#%ED%8A%9C%ED%94%8C%EC%9D%98-%EB%8B%A8%EC%A0%90\">튜플의 단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#enum\">Enum</a></p>\n<ul>\n<li><a href=\"#enum-%EC%83%9D%EC%84%B1\">Enum 생성</a></li>\n<li><a href=\"#enum%EC%9D%98-%EB%8F%99%EC%9E%91\">Enum의 동작</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#any\">Any</a></p>\n</li>\n<li>\n<p><a href=\"#void\">Void</a></p>\n</li>\n<li>\n<p><a href=\"#never\">Never</a></p>\n</li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/typescript-types"}},
    "staticQueryHashes": ["2665612806"]}