{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/flutter-use-several-components","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/flutter-use-several-components","tags":["스터디 Flutter"],"date":"2022-10-14","img":null,"title":"[Flutter] Form, Alert에 사용할 수 있는 플러터 컴포넌트"},"html":"<p>플러터의 위젯들을 많이 살펴봤는데요. 이 글에서는 알람과 다이얼로그, 폼과 같이 입력할 수 있는 컴포넌트 위젯에 대해 알아보고자 합니다.</p>\n<h2 id=\"dialogs-alerts-panels\" style=\"position:relative;\">Dialogs, Alerts, Panels<a href=\"#dialogs-alerts-panels\" aria-label=\"dialogs alerts panels permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>먼저 다이얼로그와 Alert부터 살펴보겠습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import &#39;package:flutter/material.dart&#39;;\r\n\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: &quot;MaterialApp&quot;,\r\n      home: TestDialog(),\r\n    );\r\n  }\r\n}\r\n\r\nclass TestDialog extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: Text(&quot;Flutter Dialogs&quot;)),\r\n      body: Container(\r\n        child: Center(\r\n          \r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n</code>\n        </deckgo-highlight-code>\n<p>여기서부터 시작해봅시다. <code class=\"language-text\">context</code>를 가져오기 위해 MyApp에서 분리했습니다.</p>\n<br/>\n<h3 id=\"alertdialog\" style=\"position:relative;\">AlertDialog<a href=\"#alertdialog\" aria-label=\"alertdialog permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>사용자에게 경고나 알림을 주기 위해 사용합니다.</p>\n<p>AlertDialog는 이러한 설정이 가능합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const AlertDialog({\r\n  Key? key,\r\n  this.title,\r\n  this.titlePadding,\r\n  this.titleTextStyle,\r\n  this.content,\r\n  this.contentPadding = const EdgeInsets.fromLTRB(24.0, 20.0, 24.0, 24.0),\r\n  this.contentTextStyle,\r\n  this.actions,\r\n  this.actionsPadding = EdgeInsets.zero,\r\n  this.actionsAlignment,\r\n  this.actionsOverflowDirection,\r\n  this.actionsOverflowButtonSpacing,\r\n  this.buttonPadding,\r\n  this.backgroundColor,\r\n  this.elevation,\r\n  this.semanticLabel,\r\n  this.insetPadding = _defaultInsetPadding,\r\n  this.clipBehavior = Clip.none,\r\n  this.shape,\r\n  this.alignment,\r\n  this.scrollable = false,\r\n})</code>\n        </deckgo-highlight-code>\n<p>사용 예시입니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import &#39;package:flutter/material.dart&#39;;\r\n\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: &quot;MaterialApp&quot;,\r\n      home: TestDialog(),\r\n    );\r\n  }\r\n}\r\n\r\nclass TestDialog extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: Text(&quot;Flutter Dialogs&quot;)),\r\n      body: Container(\r\n        child: Center(\r\n          child: RaisedButton(\r\n            color: Colors.blueAccent,\r\n            textColor: Colors.white,\r\n            onPressed: () {\r\n              testAlert(context);\r\n            },\r\n            child: Text(&quot;Alert !!!&quot;),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void testAlert(BuildContext context) {\r\n    var alert = AlertDialog(\r\n      title: Text(&quot;AlertDialog&quot;),\r\n      content: Text(&quot;Ta-da&quot;),\r\n    );\r\n\r\n    showDialog(\r\n        context: context,\r\n        builder: (BuildContext context) {\r\n          return alert;\r\n        });\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<div>\r\n<img src=\"https://user-images.githubusercontent.com/76241233/195512362-e8f38170-c3eb-4893-82ec-f1a5b90ad7e6.png\" />\r\n<img src=\"https://user-images.githubusercontent.com/76241233/195512581-0a1683a0-dd3d-476e-87b6-4e77730542cf.png\" />\r\n</div>\n<br/>\n<h3 id=\"simpledialog\" style=\"position:relative;\">SimpleDialog<a href=\"#simpledialog\" aria-label=\"simpledialog permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>AlertDialog와 유사하지만, 이름 그대로 매개변수가 좀더 적고 간단합니다.</p>\n<p>AlertDialog에는 content를 작성했는데, SimpleDialog에서는 내용을 적을 때 children에 적어주어야 합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const SimpleDialog({\r\n  Key? key,\r\n  this.title,\r\n  this.titlePadding = const EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0),\r\n  this.titleTextStyle,\r\n  this.children,\r\n  this.contentPadding = const EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0),\r\n  this.backgroundColor,\r\n  this.elevation,\r\n  this.semanticLabel,\r\n  this.insetPadding = _defaultInsetPadding,\r\n  this.clipBehavior = Clip.none,\r\n  this.shape,\r\n  this.alignment,\r\n})</code>\n        </deckgo-highlight-code>\n<p>코드 작성은 AlertDialog와 크게 다르지 않습니다.</p>\n<p>AlertDialog의 <code class=\"language-text\">testAlert</code> 부분에서 SimpleDialog로 바꿔줍니다. content 대신 children을 작성합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">void testAlert(BuildContext context) {\r\n    var alert = SimpleDialog(\r\n      title: Text(&quot;AlertDialog&quot;),\r\n      children: [\r\n        Center(\r\n          child: Text(&#39;Hmm... Simple one!&#39;),\r\n        )\r\n      ],\r\n    );\r\n\r\n    showDialog(\r\n        context: context,\r\n        builder: (BuildContext context) {\r\n          return alert;\r\n        });\r\n  }</code>\n        </deckgo-highlight-code>\n<div>\r\n<img src=\"https://user-images.githubusercontent.com/76241233/195514015-4d87016f-64d3-45c3-b63e-9229e22312ca.png\" />\r\n<img src=\"https://user-images.githubusercontent.com/76241233/195514247-b170a459-960f-490c-ab6c-8d9961ae6a03.png\" />\r\n</div>\n<br />\n<h3 id=\"snackbar\" style=\"position:relative;\">SnackBar<a href=\"#snackbar\" aria-label=\"snackbar permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>SnackBar는 팝업 메시지를 일시적으로 표시할 수 있는 위젯입니다. 보통 앱 하단에 띄우는 경우가 많습니다.<br>\n예를 들자면 장바구니 추가 알림 같은 (경고보다는 중요도가 떨어지는) 알람을 사용할 때 쓰는 것 같습니다.</p>\n<p>SnackBar는 이런 설정이 가능합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const SnackBar({\r\n  Key? key,\r\n  required this.content,\r\n  this.backgroundColor,\r\n  this.elevation,\r\n  this.margin,\r\n  this.padding,\r\n  this.width,\r\n  this.shape,\r\n  this.behavior,\r\n  this.action,\r\n  this.duration = _snackBarDisplayDuration,\r\n  this.animation,\r\n  this.onVisible,\r\n  this.dismissDirection = DismissDirection.down,\r\n})</code>\n        </deckgo-highlight-code>\n<p>SnackBar를 사용하기 위해 위젯을 변경했습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import &#39;package:flutter/material.dart&#39;;\r\n\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: &quot;MaterialApp&quot;,\r\n      // SnackBarPage로 설정\r\n      home: SnackBarPage(),\r\n    );\r\n  }\r\n}\r\n\r\n// SnackBarPage class 생성\r\nclass SnackBarPage extends StatelessWidget {\r\n  const SnackBarPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n        appBar: AppBar(\r\n          title: Text(&#39;Flutter SnackBar&#39;), \r\n          centerTitle: true\r\n        ),\r\n        body: Center(\r\n          child: ElevatedButton(\r\n            onPressed: () {\r\n              final snackBar = SnackBar(\r\n                content: const Text(&#39;Hi, I am a SnackBar!&#39;),\r\n                backgroundColor: (Colors.black12),\r\n                action: SnackBarAction(\r\n                  label: &#39;dismiss&#39;,\r\n                  onPressed: () {},\r\n                ),\r\n              );\r\n              ScaffoldMessenger.of(context).showSnackBar(snackBar);\r\n            },\r\n            child: const Text(\r\n              &#39;Click to Display a SnackBar&#39;,\r\n            ),\r\n          ),\r\n        ));\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<p>ElevatedButton의 <code class=\"language-text\">onPressed</code>에 SnackBar를 호출하도록 작성했습니다. 아래와 같은 결과가 나옵니다.</p>\n<video width=\"100%\" controls=\"controls\">\r\n    <source src=\"https://user-images.githubusercontent.com/76241233/195518975-3ec7aaf6-dd0e-4bf5-b593-ffdda08877ec.mp4\" type=\"video/mp4\">\r\n</video>\n<p><br/><br/></p>\n<h3 id=\"expansionpanel\" style=\"position:relative;\">ExpansionPanel<a href=\"#expansionpanel\" aria-label=\"expansionpanel permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>ExpansionPanel은 저에게는 아코디언 같은 이름으로 좀더 익숙한 위젯입니다. 펼쳐보기 + 접기가 가능합니다.</p>\n<p>ExpansionPanelList와 함께 사용합니다. state가 필요해 ExpansionPanelDemo를 StatefulWidget으로 작성했습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import &#39;package:flutter/material.dart&#39;;\r\n\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: &#39;Flutter Demo&#39;,\r\n      home: ExpansionPanelDemo(),\r\n    );\r\n  }\r\n}\r\n\r\nclass ExpansionPanelDemo extends StatefulWidget {\r\n  ExpansionPanelDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _ExpansionPanelDemoState createState() =&gt; _ExpansionPanelDemoState();\r\n}\r\n\r\nclass _ExpansionPanelDemoState extends State&lt;ExpansionPanelDemo&gt; {\r\n  List&lt;Item&gt; _items = generateItems(8);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: Text(&#39;Flutter ExpansionPanel&#39;), \r\n        centerTitle: true\r\n      ),\r\n\r\n      // 펼쳤을 때 화면을 넘어갈 수 있으므로 ScrollView로 처리합니다.\r\n      body: SingleChildScrollView(\r\n        child: Container(\r\n          padding: EdgeInsets.only(top: 80),\r\n          child: _buildPanel(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildPanel() {\r\n    return ExpansionPanelList(\r\n      expansionCallback: (int index, bool isExpanded) {\r\n        setState(() {\r\n          _items[index].isExpanded = !isExpanded;\r\n        });\r\n      },\r\n      children: _items.map&lt;ExpansionPanel&gt;((Item item) {\r\n        return ExpansionPanel(\r\n          headerBuilder: (BuildContext context, bool isExpanded) {\r\n            return ListTile(\r\n              title: Text(item.headerValue),\r\n            );\r\n          },\r\n          body: ListTile(\r\n            title: Text(item.expandedValue),\r\n          ),\r\n          isExpanded: item.isExpanded,\r\n        );\r\n      }).toList(),\r\n    );\r\n  }\r\n}\r\n\r\n// ExpansionPanel state 정보를 저장합니다.\r\nclass Item {\r\n  Item({\r\n    required this.expandedValue,\r\n    required this.headerValue,\r\n    this.isExpanded = false,\r\n  });\r\n\r\n  String expandedValue;\r\n  String headerValue;\r\n  bool isExpanded;\r\n}\r\n\r\nList&lt;Item&gt; generateItems(int numberOfItems) {\r\n  return List.generate(numberOfItems, (int index) {\r\n    return Item(\r\n      headerValue: &#39;Item ${index + 1}&#39;,\r\n      expandedValue: &#39;Item ${index + 1} Detail&#39;,\r\n    );\r\n  });\r\n}</code>\n        </deckgo-highlight-code>\n<video width=\"100%\" controls=\"controls\">\r\n    <source src=\"https://user-images.githubusercontent.com/76241233/195524053-13b12adf-79f0-4b38-ba23-bf3e5fce2e7d.mp4\" type=\"video/mp4\">\r\n</video>\n<p><br/><br/></p>\n<h3 id=\"bottomsheet\" style=\"position:relative;\">BottomSheet<a href=\"#bottomsheet\" aria-label=\"bottomsheet permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>하단에서 올라오는 시트 위젯입니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import &#39;package:flutter/material.dart&#39;;\r\n\r\nvoid main() =&gt; runApp(new MyApp());\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return new MaterialApp(\r\n      title: &#39;Flutter Demo&#39;,\r\n      theme: new ThemeData(\r\n        primarySwatch: Colors.blue,\r\n      ),\r\n      home: new BottomSheetPage(),\r\n    );\r\n  }\r\n}\r\n\r\nclass BottomSheetPage extends StatefulWidget {\r\n  BottomSheetPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _BottomSheetPageState createState() =&gt; new _BottomSheetPageState();\r\n}\r\n\r\nclass _BottomSheetPageState extends State&lt;BottomSheetPage&gt; {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return new Scaffold(\r\n      appBar: new AppBar(\r\n        title: new Text(&#39;Flutter BottomSheet&#39;),\r\n      ),\r\n      floatingActionButton: new FloatingActionButton(\r\n        onPressed: () {\r\n          _settingModalBottomSheet(context);\r\n        },\r\n        child: new Icon(Icons.add),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nvoid _settingModalBottomSheet(context) {\r\n  showModalBottomSheet(\r\n      context: context,\r\n      builder: (BuildContext bc) {\r\n        return Container(\r\n          child: new Wrap(\r\n            children: &lt;Widget&gt;[\r\n              new ListTile(\r\n                  leading: new Icon(Icons.music_note),\r\n                  title: new Text(&#39;Music&#39;),\r\n                  onTap: () =&gt; {}),\r\n              new ListTile(\r\n                leading: new Icon(Icons.videocam),\r\n                title: new Text(&#39;Video&#39;),\r\n                onTap: () =&gt; {},\r\n              ),\r\n            ],\r\n          ),\r\n        );\r\n      });\r\n}</code>\n        </deckgo-highlight-code>\n<video width=\"100%\" controls=\"controls\">\r\n    <source src=\"https://user-images.githubusercontent.com/76241233/195550948-45c105ac-75e8-4ce9-b5b7-a9681b1366aa.mp4\" type=\"video/mp4\">\r\n</video>\n<p><br/><br/></p>\n<hr>\n<br/>\n<h2 id=\"input--selections\" style=\"position:relative;\">Input &#x26; Selections<a href=\"#input--selections\" aria-label=\"input  selections permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>다음은 흔히 Form을 만들 때 사용할 수 있는 컴포넌트 위젯들을 살펴보겠습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import &#39;package:flutter/material.dart&#39;;\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: InputSelectionPage(),\r\n  ));\r\n}\r\n\r\nclass InputSelectionPage extends StatefulWidget {\r\n  @override\r\n  _InputSelectionPageState createState() =&gt; _InputSelectionPageState();\r\n}\r\n\r\nclass _InputSelectionPageState extends State&lt;InputSelectionPage&gt; {\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      home: Scaffold(\r\n          appBar: AppBar(\r\n            title: Text(&#39;Flutter Input &amp; Selection&#39;),\r\n          ),\r\n          body: Column(\r\n            children: &lt;Widget&gt;[\r\n              \r\n            ],\r\n          )),\r\n    );\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<p>여기서부터 시작해보겠습니다. 기본 코드에 계속 input 요소들을 추가 해볼겁니다.</p>\n<h3 id=\"checkbox\" style=\"position:relative;\">Checkbox<a href=\"#checkbox\" aria-label=\"checkbox permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>웹에서도 볼 수 있는 checkbox입니다. Input &#x26; Selection 부분은 웹과 동일한 부분이 많아 익숙하게 느껴졌습니다.</p>\n<p>Checkbox는 bool 타입으로 작동합니다. 체크되었냐 or 체크되지 않았냐 두 가지의 상태입니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class _InputSelectionPageState extends State&lt;InputSelectionPage&gt; {\r\n\r\n  // state 설정\r\n  bool? valuefirst = false;\r\n  bool? valuesecond = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      home: Scaffold(\r\n          appBar: AppBar(\r\n            title: Text(&#39;Flutter Input &amp; Selection&#39;),\r\n          ),\r\n          body: Column(\r\n            children: &lt;Widget&gt;[\r\n              Row(\r\n                children: &lt;Widget&gt;[\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    &#39;Checkbox &#39;,\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Checkbox(\r\n                    checkColor: Colors.greenAccent,\r\n                    activeColor: Colors.red,\r\n                    value: this.valuefirst,\r\n                    onChanged: (bool? value) {\r\n                      setState(() {\r\n                        this.valuefirst = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                  Checkbox(\r\n                    value: this.valuesecond,\r\n                    onChanged: (bool? value) {\r\n                      setState(() {\r\n                        this.valuesecond = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                ],\r\n              ),\r\n            ],\r\n          )),\r\n    );\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"date--time-pickers\" style=\"position:relative;\">Date &#x26; Time Pickers<a href=\"#date--time-pickers\" aria-label=\"date  time pickers permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>날짜와 시간 선택이 가능한 위젯입니다. <code class=\"language-text\">showDatePicker</code>를 사용합니다.</p>\n<p>먼저 날짜를 선택했을 때 바뀔 state를 위해 <code class=\"language-text\">selectedDate</code>를 하나 선언 할당합니다.</p>\n<p>자바스크립트에서는 <code class=\"language-text\">promise</code>에 해당하는 <code class=\"language-text\">Future</code>가 있습니다. 비동기처리로 selectedDate를 컨트롤합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class _InputSelectionPageState extends State&lt;InputSelectionPage&gt; {\r\n  bool? valuefirst = false;\r\n  bool? valuesecond = false;\r\n\r\n  // DateTime 타입으로 selectedDate를 설정합니다.\r\n  DateTime selectedDate = DateTime.now();\r\n\r\n\r\n  // 비동기 처리\r\n  Future&lt;void&gt; _selectDate(BuildContext context) async {\r\n    final DateTime? picked = await showDatePicker(\r\n        context: context,\r\n        initialDate: selectedDate, // 첫 세팅을 selecteDate로\r\n        firstDate: DateTime(2015, 8), // 2015년도 8월부터 선택 가능\r\n        lastDate: DateTime(2025)); // 2025년도까지 선택 가능\r\n\r\n    // picked가 null이 아니고 첫 값이랑 똑같지 않으면 selectedDate를 picked로 치환.    \r\n    if (picked != null &amp;&amp; picked != selectedDate) {\r\n      setState(() {\r\n        selectedDate = picked;\r\n      });\r\n    }\r\n  }\r\n\r\n  //...\r\n}</code>\n        </deckgo-highlight-code>\n<br/>\n<p><code class=\"language-text\">Column</code>의 children 속에 Row를 하나 더 작성해 picker를 열고, 선택된 날짜를 보여주도록 작성합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Row(\r\n  children: &lt;Widget&gt;[\r\n    SizedBox(\r\n      width: 10,\r\n    ),\r\n    Text(\r\n      &#39;Date picker &#39;,\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    SizedBox(\r\n      height: 20.0,\r\n    ),\r\n    RaisedButton(\r\n      // 비동기 처리한 _selectDate 호출\r\n      onPressed: () =&gt; _selectDate(context),\r\n      child: Text(&#39;Select date&#39;),\r\n    ),\r\n    SizedBox(\r\n      width: 20.0,\r\n    ),\r\n    Text(&quot;${selectedDate.toLocal()}&quot;.split(&#39; &#39;)[0]),\r\n  ],\r\n),</code>\n        </deckgo-highlight-code>\n<h3 id=\"radio\" style=\"position:relative;\">Radio<a href=\"#radio\" aria-label=\"radio permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>여러 선택지 중 하나를 고를 수 있게 하는 위젯입니다.</p>\n<p>성별로 선택지를 만들어보겠습니다.</p>\n<p>먼저 <code class=\"language-text\">enum Gender</code> 를 클래스 밖에 만들어줍니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">enum Gender { female, male }</code>\n        </deckgo-highlight-code>\n<p>그리고 state를 만들어줍니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class _InputSelectionPageState extends State&lt;InputSelectionPage&gt; {\r\n  //...\r\n\r\n  // 기본값을 female로 세팅\r\n  Gender? _gender = Gender.female;\r\n\r\n  //...\r\n}</code>\n        </deckgo-highlight-code>\n<p>마지막으로 Row를 하나 더 추가합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Row(\r\n  children: &lt;Widget&gt;[\r\n    SizedBox(\r\n      width: 10,\r\n    ),\r\n    Text(\r\n      &#39;Radio &#39;,\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    SizedBox(\r\n      width: 10,\r\n    ),\r\n    Text(\r\n      &#39;Female &#39;,\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    Radio&lt;Gender&gt;(\r\n      value: Gender.female,\r\n      groupValue: _gender,\r\n      onChanged: (Gender? value) {\r\n        setState(() {\r\n          _gender = value;\r\n        });\r\n      },\r\n    ),\r\n    Text(\r\n      &#39;Male &#39;,\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    Radio&lt;Gender&gt;(\r\n      value: Gender.male,\r\n      groupValue: _gender,\r\n      onChanged: (Gender? value) {\r\n        setState(() {\r\n          _gender = value;\r\n        });\r\n      },\r\n    )\r\n  ],\r\n),</code>\n        </deckgo-highlight-code>\n<br/>\n<h3 id=\"slider\" style=\"position:relative;\">Slider<a href=\"#slider\" aria-label=\"slider permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>보통 음량 조절 할때 많이 볼 수 있는 Slider입니다.</p>\n<p>state를 하나 만들어줍니다.</p>\n<p>Slider의 min값은 0이고, max 값은 1입니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class _InputSelectionPageState extends State&lt;InputSelectionPage&gt; {\r\n  //...\r\n\r\n  // 기본값을 0.0으로 세팅\r\n  double _volumn = 0.0;\r\n\r\n  //...\r\n}</code>\n        </deckgo-highlight-code>\n<p>그리고 Row를 하나 더 만듭니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Row(\r\n  children: &lt;Widget&gt;[\r\n    SizedBox(\r\n      width: 10,\r\n    ),\r\n    Text(\r\n      &#39;Slider &#39;,\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    Slider(\r\n      value: _volumn,\r\n      onChanged: (value) {\r\n        setState(() {\r\n          _volumn = value;\r\n        });\r\n      },\r\n    ),\r\n    Text(&quot;${(_volumn * 100).toStringAsFixed(2)}&quot;),\r\n  ],\r\n),</code>\n        </deckgo-highlight-code>\n<p>0부터 1까지의 값이 아닌, 1부터 100까지를 보여주고 싶어 toStringAsFixed를 이용했습니다.</p>\n<br/>\n<h3 id=\"switch\" style=\"position:relative;\">Switch<a href=\"#switch\" aria-label=\"switch permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>저는 흔히 토글이라고 불러온 버튼입니다. 참/거짓 2가지의 값만 가질 수 있습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class _InputSelectionPageState extends State&lt;InputSelectionPage&gt; {\r\n  //...\r\n\r\n  // 기본값을 false로 세팅\r\n  bool isSwitched = false;\r\n\r\n  //...\r\n}</code>\n        </deckgo-highlight-code>\n<p>Row를 또 작성해봅시다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Row(\r\n  children: &lt;Widget&gt;[\r\n    SizedBox(width: 10),\r\n    Text(\r\n      &#39;Switch &#39;,\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    Switch(\r\n      value: isSwitched,\r\n      onChanged: (value) {\r\n        setState(() {\r\n          isSwitched = value;\r\n        });\r\n      },\r\n      activeTrackColor: Colors.lightBlueAccent,\r\n      activeColor: Colors.blue,\r\n    ),\r\n  ],\r\n)</code>\n        </deckgo-highlight-code>\n<h3 id=\"textfield\" style=\"position:relative;\">TextField<a href=\"#textfield\" aria-label=\"textfield permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>html에서 볼 수 있는 <code class=\"language-text\">&lt;input type=\"text\"></code>와 같은 문자 입력 위젯입니다.</p>\n<p>문자를 입력할 때마다 바뀌도록, state와 <code class=\"language-text\">TextEditingController</code>를 추가합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class _InputSelectionPageState extends State&lt;InputSelectionPage&gt; {\r\n  //...\r\n\r\n  TextEditingController nameController = TextEditingController();\r\n  String _anyText = &#39;&#39;;\r\n  \r\n  //...\r\n}</code>\n        </deckgo-highlight-code>\n<p>TextField를 사용할 때에는 너비가 지정된 상태로 사용해야 합니다.</p>\n<p><del>Row 밑에 그냥 넣었다가 에러가 발생했습니다.</del></p>\n<p>따라서 우리는 SizedBox에다가 TextField를 넣어줍시다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Row(\r\n  children: &lt;Widget&gt;[\r\n    SizedBox(width: 10),\r\n    Text(\r\n      &#39;TextField &#39;,\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    SizedBox(\r\n        width: 150,\r\n        child: TextField(\r\n          controller: nameController,\r\n          onChanged: (text) {\r\n            setState(() {\r\n              _anyText = text;\r\n            });\r\n          },\r\n        )),\r\n    Text(&quot;${_anyText}&quot;),\r\n  ],\r\n)</code>\n        </deckgo-highlight-code>\n<p>여기까지 완료하면 이렇게 만들어집니다.</p>\n<video width=\"100%\" controls=\"controls\">\r\n    <source src=\"https://user-images.githubusercontent.com/76241233/195763265-78f504ce-e0d0-4b1d-a979-920bc935baff.mp4\" type=\"video/mp4\">\r\n</video>\n<p><br/><br/></p>\n<p>전체 코드는 이렇습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import &#39;package:flutter/material.dart&#39;;\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: InputSelectionPage(),\r\n  ));\r\n}\r\n\r\nclass InputSelectionPage extends StatefulWidget {\r\n  @override\r\n  _InputSelectionPageState createState() =&gt; _InputSelectionPageState();\r\n}\r\n\r\nenum Gender { female, male }\r\n\r\nclass _InputSelectionPageState extends State&lt;InputSelectionPage&gt; {\r\n  bool? valuefirst = false;\r\n  bool? valuesecond = false;\r\n\r\n  DateTime selectedDate = DateTime.now();\r\n  Future&lt;void&gt; _selectDate(BuildContext context) async {\r\n    final DateTime? picked = await showDatePicker(\r\n        context: context,\r\n        initialDate: selectedDate,\r\n        firstDate: DateTime(2015, 8),\r\n        lastDate: DateTime(2101));\r\n    if (picked != null &amp;&amp; picked != selectedDate) {\r\n      setState(() {\r\n        selectedDate = picked;\r\n      });\r\n    }\r\n  }\r\n\r\n  Gender? _gender = Gender.female;\r\n\r\n  double _volumn = 0.0;\r\n\r\n  bool isSwitched = false;\r\n\r\n  TextEditingController nameController = TextEditingController();\r\n  String _anyText = &#39;&#39;;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      home: Scaffold(\r\n          appBar: AppBar(\r\n            title: Text(&#39;Flutter Input &amp; Selection&#39;),\r\n          ),\r\n          body: Column(\r\n            children: &lt;Widget&gt;[\r\n              SizedBox(\r\n                height: 30,\r\n              ),\r\n              Row(\r\n                children: &lt;Widget&gt;[\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    &#39;Checkbox &#39;,\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Checkbox(\r\n                    checkColor: Colors.greenAccent,\r\n                    activeColor: Colors.red,\r\n                    value: this.valuefirst,\r\n                    onChanged: (bool? value) {\r\n                      setState(() {\r\n                        this.valuefirst = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                  Checkbox(\r\n                    value: this.valuesecond,\r\n                    onChanged: (bool? value) {\r\n                      setState(() {\r\n                        this.valuesecond = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                ],\r\n              ),\r\n              Row(\r\n                children: &lt;Widget&gt;[\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    &#39;Date picker &#39;,\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  SizedBox(\r\n                    height: 20.0,\r\n                  ),\r\n                  RaisedButton(\r\n                    onPressed: () =&gt; _selectDate(context),\r\n                    child: Text(&#39;Select date&#39;),\r\n                  ),\r\n                  SizedBox(\r\n                    width: 20.0,\r\n                  ),\r\n                  Text(&quot;${selectedDate.toLocal()}&quot;.split(&#39; &#39;)[0]),\r\n                ],\r\n              ),\r\n              Row(\r\n                children: &lt;Widget&gt;[\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    &#39;Radio &#39;,\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    &#39;Female &#39;,\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Radio&lt;Gender&gt;(\r\n                    value: Gender.female,\r\n                    groupValue: _gender,\r\n                    onChanged: (Gender? value) {\r\n                      setState(() {\r\n                        _gender = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                  Text(\r\n                    &#39;Male &#39;,\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Radio&lt;Gender&gt;(\r\n                    value: Gender.male,\r\n                    groupValue: _gender,\r\n                    onChanged: (Gender? value) {\r\n                      setState(() {\r\n                        _gender = value;\r\n                      });\r\n                    },\r\n                  )\r\n                ],\r\n              ),\r\n              Row(\r\n                children: &lt;Widget&gt;[\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    &#39;Slider &#39;,\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Slider(\r\n                    value: _volumn,\r\n                    onChanged: (value) {\r\n                      setState(() {\r\n                        _volumn = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                  Text(&quot;${(_volumn * 100).toStringAsFixed(2)}&quot;),\r\n                ],\r\n              ),\r\n              Row(\r\n                children: &lt;Widget&gt;[\r\n                  SizedBox(width: 10),\r\n                  Text(\r\n                    &#39;Switch &#39;,\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Switch(\r\n                    value: isSwitched,\r\n                    onChanged: (value) {\r\n                      setState(() {\r\n                        isSwitched = value;\r\n                      });\r\n                    },\r\n                    activeTrackColor: Colors.lightBlueAccent,\r\n                    activeColor: Colors.blue,\r\n                  ),\r\n                ],\r\n              ),\r\n              Row(\r\n                children: &lt;Widget&gt;[\r\n                  SizedBox(width: 10),\r\n                  Text(\r\n                    &#39;TextField &#39;,\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  SizedBox(\r\n                      width: 150,\r\n                      child: TextField(\r\n                        controller: nameController,\r\n                        onChanged: (text) {\r\n                          setState(() {\r\n                            _anyText = text;\r\n                          });\r\n                        },\r\n                      )),\r\n                  Text(&quot;${_anyText}&quot;),\r\n                ],\r\n              )\r\n            ],\r\n          )),\r\n    );\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<p>◾ <a href=\"/tech/flutter-use-several-buttons\">[Flutter] 다양한 버튼 사용하기</a> 👈 이전 글 보기<br>\n◾ <a href=\"/tech/flutter-CircularProgressIndicator-and-chip\">[Flutter] CircularProgressIndicator와 Chip 사용해보기</a> 👈 다음 글 보기</p>","internal":{"content":"\r\n플러터의 위젯들을 많이 살펴봤는데요. 이 글에서는 알람과 다이얼로그, 폼과 같이 입력할 수 있는 컴포넌트 위젯에 대해 알아보고자 합니다.\r\n\r\n## Dialogs, Alerts, Panels\r\n\r\n먼저 다이얼로그와 Alert부터 살펴보겠습니다.\r\n\r\n```dart\r\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: \"MaterialApp\",\r\n      home: TestDialog(),\r\n    );\r\n  }\r\n}\r\n\r\nclass TestDialog extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: Text(\"Flutter Dialogs\")),\r\n      body: Container(\r\n        child: Center(\r\n          \r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n```\r\n\r\n여기서부터 시작해봅시다. `context`를 가져오기 위해 MyApp에서 분리했습니다.\r\n\r\n<br/>\r\n\r\n### AlertDialog\r\n\r\n사용자에게 경고나 알림을 주기 위해 사용합니다.\r\n\r\nAlertDialog는 이러한 설정이 가능합니다.\r\n```dart\r\nconst AlertDialog({\r\n  Key? key,\r\n  this.title,\r\n  this.titlePadding,\r\n  this.titleTextStyle,\r\n  this.content,\r\n  this.contentPadding = const EdgeInsets.fromLTRB(24.0, 20.0, 24.0, 24.0),\r\n  this.contentTextStyle,\r\n  this.actions,\r\n  this.actionsPadding = EdgeInsets.zero,\r\n  this.actionsAlignment,\r\n  this.actionsOverflowDirection,\r\n  this.actionsOverflowButtonSpacing,\r\n  this.buttonPadding,\r\n  this.backgroundColor,\r\n  this.elevation,\r\n  this.semanticLabel,\r\n  this.insetPadding = _defaultInsetPadding,\r\n  this.clipBehavior = Clip.none,\r\n  this.shape,\r\n  this.alignment,\r\n  this.scrollable = false,\r\n})\r\n```\r\n\r\n사용 예시입니다.\r\n\r\n```dart\r\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: \"MaterialApp\",\r\n      home: TestDialog(),\r\n    );\r\n  }\r\n}\r\n\r\nclass TestDialog extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: Text(\"Flutter Dialogs\")),\r\n      body: Container(\r\n        child: Center(\r\n          child: RaisedButton(\r\n            color: Colors.blueAccent,\r\n            textColor: Colors.white,\r\n            onPressed: () {\r\n              testAlert(context);\r\n            },\r\n            child: Text(\"Alert !!!\"),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void testAlert(BuildContext context) {\r\n    var alert = AlertDialog(\r\n      title: Text(\"AlertDialog\"),\r\n      content: Text(\"Ta-da\"),\r\n    );\r\n\r\n    showDialog(\r\n        context: context,\r\n        builder: (BuildContext context) {\r\n          return alert;\r\n        });\r\n  }\r\n}\r\n```\r\n\r\n<div>\r\n<img src=\"https://user-images.githubusercontent.com/76241233/195512362-e8f38170-c3eb-4893-82ec-f1a5b90ad7e6.png\" />\r\n<img src=\"https://user-images.githubusercontent.com/76241233/195512581-0a1683a0-dd3d-476e-87b6-4e77730542cf.png\" />\r\n</div>\r\n\r\n<br/>\r\n\r\n### SimpleDialog\r\n\r\nAlertDialog와 유사하지만, 이름 그대로 매개변수가 좀더 적고 간단합니다.\r\n\r\nAlertDialog에는 content를 작성했는데, SimpleDialog에서는 내용을 적을 때 children에 적어주어야 합니다.\r\n\r\n```dart\r\nconst SimpleDialog({\r\n  Key? key,\r\n  this.title,\r\n  this.titlePadding = const EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0),\r\n  this.titleTextStyle,\r\n  this.children,\r\n  this.contentPadding = const EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0),\r\n  this.backgroundColor,\r\n  this.elevation,\r\n  this.semanticLabel,\r\n  this.insetPadding = _defaultInsetPadding,\r\n  this.clipBehavior = Clip.none,\r\n  this.shape,\r\n  this.alignment,\r\n})\r\n```\r\n\r\n코드 작성은 AlertDialog와 크게 다르지 않습니다.\r\n\r\nAlertDialog의 `testAlert` 부분에서 SimpleDialog로 바꿔줍니다. content 대신 children을 작성합니다.\r\n\r\n```dart\r\nvoid testAlert(BuildContext context) {\r\n    var alert = SimpleDialog(\r\n      title: Text(\"AlertDialog\"),\r\n      children: [\r\n        Center(\r\n          child: Text('Hmm... Simple one!'),\r\n        )\r\n      ],\r\n    );\r\n\r\n    showDialog(\r\n        context: context,\r\n        builder: (BuildContext context) {\r\n          return alert;\r\n        });\r\n  }\r\n```\r\n\r\n<div>\r\n<img src=\"https://user-images.githubusercontent.com/76241233/195514015-4d87016f-64d3-45c3-b63e-9229e22312ca.png\" />\r\n<img src=\"https://user-images.githubusercontent.com/76241233/195514247-b170a459-960f-490c-ab6c-8d9961ae6a03.png\" />\r\n</div>\r\n\r\n<br />\r\n\r\n\r\n### SnackBar\r\n\r\nSnackBar는 팝업 메시지를 일시적으로 표시할 수 있는 위젯입니다. 보통 앱 하단에 띄우는 경우가 많습니다.   \r\n예를 들자면 장바구니 추가 알림 같은 (경고보다는 중요도가 떨어지는) 알람을 사용할 때 쓰는 것 같습니다.\r\n\r\nSnackBar는 이런 설정이 가능합니다.\r\n\r\n```dart\r\nconst SnackBar({\r\n  Key? key,\r\n  required this.content,\r\n  this.backgroundColor,\r\n  this.elevation,\r\n  this.margin,\r\n  this.padding,\r\n  this.width,\r\n  this.shape,\r\n  this.behavior,\r\n  this.action,\r\n  this.duration = _snackBarDisplayDuration,\r\n  this.animation,\r\n  this.onVisible,\r\n  this.dismissDirection = DismissDirection.down,\r\n})\r\n```\r\n\r\nSnackBar를 사용하기 위해 위젯을 변경했습니다.\r\n\r\n```dart\r\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: \"MaterialApp\",\r\n      // SnackBarPage로 설정\r\n      home: SnackBarPage(),\r\n    );\r\n  }\r\n}\r\n\r\n// SnackBarPage class 생성\r\nclass SnackBarPage extends StatelessWidget {\r\n  const SnackBarPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('Flutter SnackBar'), \r\n          centerTitle: true\r\n        ),\r\n        body: Center(\r\n          child: ElevatedButton(\r\n            onPressed: () {\r\n              final snackBar = SnackBar(\r\n                content: const Text('Hi, I am a SnackBar!'),\r\n                backgroundColor: (Colors.black12),\r\n                action: SnackBarAction(\r\n                  label: 'dismiss',\r\n                  onPressed: () {},\r\n                ),\r\n              );\r\n              ScaffoldMessenger.of(context).showSnackBar(snackBar);\r\n            },\r\n            child: const Text(\r\n              'Click to Display a SnackBar',\r\n            ),\r\n          ),\r\n        ));\r\n  }\r\n}\r\n```\r\n\r\nElevatedButton의 `onPressed`에 SnackBar를 호출하도록 작성했습니다. 아래와 같은 결과가 나옵니다.\r\n\r\n<video width=\"100%\" controls=\"controls\">\r\n    <source src=\"https://user-images.githubusercontent.com/76241233/195518975-3ec7aaf6-dd0e-4bf5-b593-ffdda08877ec.mp4\" type=\"video/mp4\">\r\n</video>\r\n\r\n<br/><br/>\r\n\r\n### ExpansionPanel\r\n\r\nExpansionPanel은 저에게는 아코디언 같은 이름으로 좀더 익숙한 위젯입니다. 펼쳐보기 + 접기가 가능합니다.\r\n\r\nExpansionPanelList와 함께 사용합니다. state가 필요해 ExpansionPanelDemo를 StatefulWidget으로 작성했습니다.\r\n\r\n\r\n```dart\r\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: 'Flutter Demo',\r\n      home: ExpansionPanelDemo(),\r\n    );\r\n  }\r\n}\r\n\r\nclass ExpansionPanelDemo extends StatefulWidget {\r\n  ExpansionPanelDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _ExpansionPanelDemoState createState() => _ExpansionPanelDemoState();\r\n}\r\n\r\nclass _ExpansionPanelDemoState extends State<ExpansionPanelDemo> {\r\n  List<Item> _items = generateItems(8);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Flutter ExpansionPanel'), \r\n        centerTitle: true\r\n      ),\r\n\r\n      // 펼쳤을 때 화면을 넘어갈 수 있으므로 ScrollView로 처리합니다.\r\n      body: SingleChildScrollView(\r\n        child: Container(\r\n          padding: EdgeInsets.only(top: 80),\r\n          child: _buildPanel(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildPanel() {\r\n    return ExpansionPanelList(\r\n      expansionCallback: (int index, bool isExpanded) {\r\n        setState(() {\r\n          _items[index].isExpanded = !isExpanded;\r\n        });\r\n      },\r\n      children: _items.map<ExpansionPanel>((Item item) {\r\n        return ExpansionPanel(\r\n          headerBuilder: (BuildContext context, bool isExpanded) {\r\n            return ListTile(\r\n              title: Text(item.headerValue),\r\n            );\r\n          },\r\n          body: ListTile(\r\n            title: Text(item.expandedValue),\r\n          ),\r\n          isExpanded: item.isExpanded,\r\n        );\r\n      }).toList(),\r\n    );\r\n  }\r\n}\r\n\r\n// ExpansionPanel state 정보를 저장합니다.\r\nclass Item {\r\n  Item({\r\n    required this.expandedValue,\r\n    required this.headerValue,\r\n    this.isExpanded = false,\r\n  });\r\n\r\n  String expandedValue;\r\n  String headerValue;\r\n  bool isExpanded;\r\n}\r\n\r\nList<Item> generateItems(int numberOfItems) {\r\n  return List.generate(numberOfItems, (int index) {\r\n    return Item(\r\n      headerValue: 'Item ${index + 1}',\r\n      expandedValue: 'Item ${index + 1} Detail',\r\n    );\r\n  });\r\n}\r\n```\r\n\r\n<video width=\"100%\" controls=\"controls\">\r\n    <source src=\"https://user-images.githubusercontent.com/76241233/195524053-13b12adf-79f0-4b38-ba23-bf3e5fce2e7d.mp4\" type=\"video/mp4\">\r\n</video>\r\n\r\n<br/><br/>\r\n\r\n\r\n### BottomSheet\r\n\r\n하단에서 올라오는 시트 위젯입니다. \r\n\r\n```dart\r\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() => runApp(new MyApp());\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return new MaterialApp(\r\n      title: 'Flutter Demo',\r\n      theme: new ThemeData(\r\n        primarySwatch: Colors.blue,\r\n      ),\r\n      home: new BottomSheetPage(),\r\n    );\r\n  }\r\n}\r\n\r\nclass BottomSheetPage extends StatefulWidget {\r\n  BottomSheetPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _BottomSheetPageState createState() => new _BottomSheetPageState();\r\n}\r\n\r\nclass _BottomSheetPageState extends State<BottomSheetPage> {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return new Scaffold(\r\n      appBar: new AppBar(\r\n        title: new Text('Flutter BottomSheet'),\r\n      ),\r\n      floatingActionButton: new FloatingActionButton(\r\n        onPressed: () {\r\n          _settingModalBottomSheet(context);\r\n        },\r\n        child: new Icon(Icons.add),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nvoid _settingModalBottomSheet(context) {\r\n  showModalBottomSheet(\r\n      context: context,\r\n      builder: (BuildContext bc) {\r\n        return Container(\r\n          child: new Wrap(\r\n            children: <Widget>[\r\n              new ListTile(\r\n                  leading: new Icon(Icons.music_note),\r\n                  title: new Text('Music'),\r\n                  onTap: () => {}),\r\n              new ListTile(\r\n                leading: new Icon(Icons.videocam),\r\n                title: new Text('Video'),\r\n                onTap: () => {},\r\n              ),\r\n            ],\r\n          ),\r\n        );\r\n      });\r\n}\r\n```\r\n\r\n<video width=\"100%\" controls=\"controls\">\r\n    <source src=\"https://user-images.githubusercontent.com/76241233/195550948-45c105ac-75e8-4ce9-b5b7-a9681b1366aa.mp4\" type=\"video/mp4\">\r\n</video>\r\n\r\n<br/><br/>\r\n\r\n---\r\n<br/>\r\n\r\n## Input & Selections\r\n\r\n다음은 흔히 Form을 만들 때 사용할 수 있는 컴포넌트 위젯들을 살펴보겠습니다.\r\n\r\n```dart\r\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: InputSelectionPage(),\r\n  ));\r\n}\r\n\r\nclass InputSelectionPage extends StatefulWidget {\r\n  @override\r\n  _InputSelectionPageState createState() => _InputSelectionPageState();\r\n}\r\n\r\nclass _InputSelectionPageState extends State<InputSelectionPage> {\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      home: Scaffold(\r\n          appBar: AppBar(\r\n            title: Text('Flutter Input & Selection'),\r\n          ),\r\n          body: Column(\r\n            children: <Widget>[\r\n              \r\n            ],\r\n          )),\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n여기서부터 시작해보겠습니다. 기본 코드에 계속 input 요소들을 추가 해볼겁니다.\r\n\r\n### Checkbox\r\n\r\n웹에서도 볼 수 있는 checkbox입니다. Input & Selection 부분은 웹과 동일한 부분이 많아 익숙하게 느껴졌습니다.\r\n\r\nCheckbox는 bool 타입으로 작동합니다. 체크되었냐 or 체크되지 않았냐 두 가지의 상태입니다. \r\n\r\n```dart\r\nclass _InputSelectionPageState extends State<InputSelectionPage> {\r\n\r\n  // state 설정\r\n  bool? valuefirst = false;\r\n  bool? valuesecond = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      home: Scaffold(\r\n          appBar: AppBar(\r\n            title: Text('Flutter Input & Selection'),\r\n          ),\r\n          body: Column(\r\n            children: <Widget>[\r\n              Row(\r\n                children: <Widget>[\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    'Checkbox ',\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Checkbox(\r\n                    checkColor: Colors.greenAccent,\r\n                    activeColor: Colors.red,\r\n                    value: this.valuefirst,\r\n                    onChanged: (bool? value) {\r\n                      setState(() {\r\n                        this.valuefirst = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                  Checkbox(\r\n                    value: this.valuesecond,\r\n                    onChanged: (bool? value) {\r\n                      setState(() {\r\n                        this.valuesecond = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                ],\r\n              ),\r\n            ],\r\n          )),\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Date & Time Pickers\r\n\r\n날짜와 시간 선택이 가능한 위젯입니다. `showDatePicker`를 사용합니다.\r\n\r\n먼저 날짜를 선택했을 때 바뀔 state를 위해 `selectedDate`를 하나 선언 할당합니다.\r\n\r\n자바스크립트에서는 `promise`에 해당하는 `Future`가 있습니다. 비동기처리로 selectedDate를 컨트롤합니다.\r\n\r\n```dart\r\nclass _InputSelectionPageState extends State<InputSelectionPage> {\r\n  bool? valuefirst = false;\r\n  bool? valuesecond = false;\r\n\r\n  // DateTime 타입으로 selectedDate를 설정합니다.\r\n  DateTime selectedDate = DateTime.now();\r\n\r\n\r\n  // 비동기 처리\r\n  Future<void> _selectDate(BuildContext context) async {\r\n    final DateTime? picked = await showDatePicker(\r\n        context: context,\r\n        initialDate: selectedDate, // 첫 세팅을 selecteDate로\r\n        firstDate: DateTime(2015, 8), // 2015년도 8월부터 선택 가능\r\n        lastDate: DateTime(2025)); // 2025년도까지 선택 가능\r\n\r\n    // picked가 null이 아니고 첫 값이랑 똑같지 않으면 selectedDate를 picked로 치환.    \r\n    if (picked != null && picked != selectedDate) {\r\n      setState(() {\r\n        selectedDate = picked;\r\n      });\r\n    }\r\n  }\r\n\r\n  //...\r\n}\r\n```\r\n<br/>\r\n\r\n`Column`의 children 속에 Row를 하나 더 작성해 picker를 열고, 선택된 날짜를 보여주도록 작성합니다.\r\n\r\n```dart\r\nRow(\r\n  children: <Widget>[\r\n    SizedBox(\r\n      width: 10,\r\n    ),\r\n    Text(\r\n      'Date picker ',\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    SizedBox(\r\n      height: 20.0,\r\n    ),\r\n    RaisedButton(\r\n      // 비동기 처리한 _selectDate 호출\r\n      onPressed: () => _selectDate(context),\r\n      child: Text('Select date'),\r\n    ),\r\n    SizedBox(\r\n      width: 20.0,\r\n    ),\r\n    Text(\"${selectedDate.toLocal()}\".split(' ')[0]),\r\n  ],\r\n),\r\n```\r\n\r\n### Radio\r\n\r\n여러 선택지 중 하나를 고를 수 있게 하는 위젯입니다.\r\n\r\n성별로 선택지를 만들어보겠습니다.\r\n\r\n먼저 `enum Gender` 를 클래스 밖에 만들어줍니다.\r\n\r\n```dart\r\nenum Gender { female, male }\r\n```\r\n\r\n그리고 state를 만들어줍니다.\r\n\r\n```dart\r\nclass _InputSelectionPageState extends State<InputSelectionPage> {\r\n  //...\r\n\r\n  // 기본값을 female로 세팅\r\n  Gender? _gender = Gender.female;\r\n\r\n  //...\r\n}\r\n```\r\n\r\n마지막으로 Row를 하나 더 추가합니다. \r\n\r\n```dart\r\nRow(\r\n  children: <Widget>[\r\n    SizedBox(\r\n      width: 10,\r\n    ),\r\n    Text(\r\n      'Radio ',\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    SizedBox(\r\n      width: 10,\r\n    ),\r\n    Text(\r\n      'Female ',\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    Radio<Gender>(\r\n      value: Gender.female,\r\n      groupValue: _gender,\r\n      onChanged: (Gender? value) {\r\n        setState(() {\r\n          _gender = value;\r\n        });\r\n      },\r\n    ),\r\n    Text(\r\n      'Male ',\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    Radio<Gender>(\r\n      value: Gender.male,\r\n      groupValue: _gender,\r\n      onChanged: (Gender? value) {\r\n        setState(() {\r\n          _gender = value;\r\n        });\r\n      },\r\n    )\r\n  ],\r\n),\r\n```\r\n\r\n<br/>\r\n\r\n### Slider\r\n\r\n보통 음량 조절 할때 많이 볼 수 있는 Slider입니다. \r\n\r\nstate를 하나 만들어줍니다. \r\n\r\nSlider의 min값은 0이고, max 값은 1입니다.\r\n\r\n```dart\r\nclass _InputSelectionPageState extends State<InputSelectionPage> {\r\n  //...\r\n\r\n  // 기본값을 0.0으로 세팅\r\n  double _volumn = 0.0;\r\n\r\n  //...\r\n}\r\n```\r\n\r\n그리고 Row를 하나 더 만듭니다.\r\n\r\n```dart\r\nRow(\r\n  children: <Widget>[\r\n    SizedBox(\r\n      width: 10,\r\n    ),\r\n    Text(\r\n      'Slider ',\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    Slider(\r\n      value: _volumn,\r\n      onChanged: (value) {\r\n        setState(() {\r\n          _volumn = value;\r\n        });\r\n      },\r\n    ),\r\n    Text(\"${(_volumn * 100).toStringAsFixed(2)}\"),\r\n  ],\r\n),\r\n```\r\n\r\n0부터 1까지의 값이 아닌, 1부터 100까지를 보여주고 싶어 toStringAsFixed를 이용했습니다.\r\n\r\n<br/>\r\n\r\n### Switch\r\n\r\n저는 흔히 토글이라고 불러온 버튼입니다. 참/거짓 2가지의 값만 가질 수 있습니다.\r\n\r\n```dart\r\nclass _InputSelectionPageState extends State<InputSelectionPage> {\r\n  //...\r\n\r\n  // 기본값을 false로 세팅\r\n  bool isSwitched = false;\r\n\r\n  //...\r\n}\r\n```\r\n\r\nRow를 또 작성해봅시다.\r\n\r\n```dart\r\nRow(\r\n  children: <Widget>[\r\n    SizedBox(width: 10),\r\n    Text(\r\n      'Switch ',\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    Switch(\r\n      value: isSwitched,\r\n      onChanged: (value) {\r\n        setState(() {\r\n          isSwitched = value;\r\n        });\r\n      },\r\n      activeTrackColor: Colors.lightBlueAccent,\r\n      activeColor: Colors.blue,\r\n    ),\r\n  ],\r\n)\r\n```\r\n\r\n\r\n### TextField\r\n\r\nhtml에서 볼 수 있는 `<input type=\"text\">`와 같은 문자 입력 위젯입니다.\r\n\r\n문자를 입력할 때마다 바뀌도록, state와 `TextEditingController`를 추가합니다.\r\n\r\n```dart\r\nclass _InputSelectionPageState extends State<InputSelectionPage> {\r\n  //...\r\n\r\n  TextEditingController nameController = TextEditingController();\r\n  String _anyText = '';\r\n  \r\n  //...\r\n}\r\n```\r\n\r\nTextField를 사용할 때에는 너비가 지정된 상태로 사용해야 합니다. \r\n\r\n~~Row 밑에 그냥 넣었다가 에러가 발생했습니다.~~\r\n\r\n따라서 우리는 SizedBox에다가 TextField를 넣어줍시다.\r\n\r\n```dart\r\nRow(\r\n  children: <Widget>[\r\n    SizedBox(width: 10),\r\n    Text(\r\n      'TextField ',\r\n      style: TextStyle(fontSize: 17.0),\r\n    ),\r\n    SizedBox(\r\n        width: 150,\r\n        child: TextField(\r\n          controller: nameController,\r\n          onChanged: (text) {\r\n            setState(() {\r\n              _anyText = text;\r\n            });\r\n          },\r\n        )),\r\n    Text(\"${_anyText}\"),\r\n  ],\r\n)\r\n```\r\n\r\n여기까지 완료하면 이렇게 만들어집니다.\r\n\r\n<video width=\"100%\" controls=\"controls\">\r\n    <source src=\"https://user-images.githubusercontent.com/76241233/195763265-78f504ce-e0d0-4b1d-a979-920bc935baff.mp4\" type=\"video/mp4\">\r\n</video>\r\n\r\n<br/><br/>\r\n\r\n전체 코드는 이렇습니다.\r\n\r\n```dart\r\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: InputSelectionPage(),\r\n  ));\r\n}\r\n\r\nclass InputSelectionPage extends StatefulWidget {\r\n  @override\r\n  _InputSelectionPageState createState() => _InputSelectionPageState();\r\n}\r\n\r\nenum Gender { female, male }\r\n\r\nclass _InputSelectionPageState extends State<InputSelectionPage> {\r\n  bool? valuefirst = false;\r\n  bool? valuesecond = false;\r\n\r\n  DateTime selectedDate = DateTime.now();\r\n  Future<void> _selectDate(BuildContext context) async {\r\n    final DateTime? picked = await showDatePicker(\r\n        context: context,\r\n        initialDate: selectedDate,\r\n        firstDate: DateTime(2015, 8),\r\n        lastDate: DateTime(2101));\r\n    if (picked != null && picked != selectedDate) {\r\n      setState(() {\r\n        selectedDate = picked;\r\n      });\r\n    }\r\n  }\r\n\r\n  Gender? _gender = Gender.female;\r\n\r\n  double _volumn = 0.0;\r\n\r\n  bool isSwitched = false;\r\n\r\n  TextEditingController nameController = TextEditingController();\r\n  String _anyText = '';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      home: Scaffold(\r\n          appBar: AppBar(\r\n            title: Text('Flutter Input & Selection'),\r\n          ),\r\n          body: Column(\r\n            children: <Widget>[\r\n              SizedBox(\r\n                height: 30,\r\n              ),\r\n              Row(\r\n                children: <Widget>[\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    'Checkbox ',\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Checkbox(\r\n                    checkColor: Colors.greenAccent,\r\n                    activeColor: Colors.red,\r\n                    value: this.valuefirst,\r\n                    onChanged: (bool? value) {\r\n                      setState(() {\r\n                        this.valuefirst = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                  Checkbox(\r\n                    value: this.valuesecond,\r\n                    onChanged: (bool? value) {\r\n                      setState(() {\r\n                        this.valuesecond = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                ],\r\n              ),\r\n              Row(\r\n                children: <Widget>[\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    'Date picker ',\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  SizedBox(\r\n                    height: 20.0,\r\n                  ),\r\n                  RaisedButton(\r\n                    onPressed: () => _selectDate(context),\r\n                    child: Text('Select date'),\r\n                  ),\r\n                  SizedBox(\r\n                    width: 20.0,\r\n                  ),\r\n                  Text(\"${selectedDate.toLocal()}\".split(' ')[0]),\r\n                ],\r\n              ),\r\n              Row(\r\n                children: <Widget>[\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    'Radio ',\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    'Female ',\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Radio<Gender>(\r\n                    value: Gender.female,\r\n                    groupValue: _gender,\r\n                    onChanged: (Gender? value) {\r\n                      setState(() {\r\n                        _gender = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                  Text(\r\n                    'Male ',\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Radio<Gender>(\r\n                    value: Gender.male,\r\n                    groupValue: _gender,\r\n                    onChanged: (Gender? value) {\r\n                      setState(() {\r\n                        _gender = value;\r\n                      });\r\n                    },\r\n                  )\r\n                ],\r\n              ),\r\n              Row(\r\n                children: <Widget>[\r\n                  SizedBox(\r\n                    width: 10,\r\n                  ),\r\n                  Text(\r\n                    'Slider ',\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Slider(\r\n                    value: _volumn,\r\n                    onChanged: (value) {\r\n                      setState(() {\r\n                        _volumn = value;\r\n                      });\r\n                    },\r\n                  ),\r\n                  Text(\"${(_volumn * 100).toStringAsFixed(2)}\"),\r\n                ],\r\n              ),\r\n              Row(\r\n                children: <Widget>[\r\n                  SizedBox(width: 10),\r\n                  Text(\r\n                    'Switch ',\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  Switch(\r\n                    value: isSwitched,\r\n                    onChanged: (value) {\r\n                      setState(() {\r\n                        isSwitched = value;\r\n                      });\r\n                    },\r\n                    activeTrackColor: Colors.lightBlueAccent,\r\n                    activeColor: Colors.blue,\r\n                  ),\r\n                ],\r\n              ),\r\n              Row(\r\n                children: <Widget>[\r\n                  SizedBox(width: 10),\r\n                  Text(\r\n                    'TextField ',\r\n                    style: TextStyle(fontSize: 17.0),\r\n                  ),\r\n                  SizedBox(\r\n                      width: 150,\r\n                      child: TextField(\r\n                        controller: nameController,\r\n                        onChanged: (text) {\r\n                          setState(() {\r\n                            _anyText = text;\r\n                          });\r\n                        },\r\n                      )),\r\n                  Text(\"${_anyText}\"),\r\n                ],\r\n              )\r\n            ],\r\n          )),\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n\r\n◾ [[Flutter] 다양한 버튼 사용하기](/tech/flutter-use-several-buttons) 👈 이전 글 보기   \r\n◾ [[Flutter] CircularProgressIndicator와 Chip 사용해보기](/tech/flutter-CircularProgressIndicator-and-chip) 👈 다음 글 보기\r\n\r\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#dialogs-alerts-panels\">Dialogs, Alerts, Panels</a></p>\n<ul>\n<li><a href=\"#alertdialog\">AlertDialog</a></li>\n<li><a href=\"#simpledialog\">SimpleDialog</a></li>\n<li><a href=\"#snackbar\">SnackBar</a></li>\n<li><a href=\"#expansionpanel\">ExpansionPanel</a></li>\n<li><a href=\"#bottomsheet\">BottomSheet</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#input--selections\">Input &#x26; Selections</a></p>\n<ul>\n<li><a href=\"#checkbox\">Checkbox</a></li>\n<li><a href=\"#date--time-pickers\">Date &#x26; Time Pickers</a></li>\n<li><a href=\"#radio\">Radio</a></li>\n<li><a href=\"#slider\">Slider</a></li>\n<li><a href=\"#switch\">Switch</a></li>\n<li><a href=\"#textfield\">TextField</a></li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/flutter-use-several-components"}},"staticQueryHashes":["2665612806"]}