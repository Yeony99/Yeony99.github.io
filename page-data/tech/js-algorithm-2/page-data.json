{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/js-algorithm-2","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/js-algorithm-2","tags":["Book"],"date":"2023-10-27","img":null,"title":"[JS 자료구조 & 알고리즘 (2)] 자바스크립트 숫자"},"excerpt":"도서 자바스크립트로 하는 자료 구조와 알고리즘을 읽으며 정리하는 글 시리즈. 2장은 var, let 등 변수 선언의 호이스팅과 TDZ와 관련된 내용이라…","html":"<p>도서 <strong>자바스크립트로 하는 자료 구조와 알고리즘</strong>을 읽으며 정리하는 글 시리즈.<br>\n2장은 var, let 등 변수 선언의 호이스팅과 TDZ와 관련된 내용이라 3장을 이어서 정리한다.</p>\n<h2 id=\"자바스크립트의-숫자-체계\" style=\"position:relative;\">자바스크립트의 숫자 체계<a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%88%AB%EC%9E%90-%EC%B2%B4%EA%B3%84\" aria-label=\"자바스크립트의 숫자 체계 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>자바스크립트로 고도의 수학적 연산이 필요한 작업을 한 적이 별로 없는 듯 하다. 적당히 <code class=\"language-text\">Math.round()</code> 나 <code class=\"language-text\">toFixed()</code> 처리 정도? 자바스크립트가 어떠한 숫자 체계를 가지고 있는지 이 파트를 통해 알 수 있었다.</p>\n<p>자바스크립트는 <strong>64비트 부동소수점</strong> 표현을 사용한다.</p>\n<p>64개의 자리를 가지고 있다는 의미다. 각각의 자리는 세 가지 부분으로 나뉜다.<br>\n부호 비트(63번째 비트)가 1이면 해당 수는 음수다. 다음 11개 비트(62번째에서 52번째 비트)는 지수 값 e를 나타낸다. 그리고 나머지 52비트가 소수 값을 나타낸다.</p>\n<p>여기서 자바스크립트의 부동소수점 체계가 반올림 오류를 일으킬 수 있다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">console.log(0.1 + 0.2 === 0.3) // false</code>\n        </deckgo-highlight-code>\n<p>놀랍게도 <code class=\"language-text\">0.1 + 0.2 === 0.3</code> 비교 결과는 <code class=\"language-text\">false</code>다.</p>\n<p>파이썬에서도 한 번 실행해봤다.</p>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">print(1/10 + 2/10) # 0.30000000000000004\r\nprint(0.1 + 0.2 == 0.3) # False</code>\n        </deckgo-highlight-code>\n<p>확실히 이상한 결과가 나온다. 이렇게 나오는 이유는 이진 표기법으로 십진수를 표현할 때, 무한 개의 수가 필요한 경우가 많기 때문이다.\r\n<code class=\"language-text\">0.1</code>을 계산하려 할 때 <code class=\"language-text\">1/10</code> 나눗셈은 끝나지 않고 계속 진행되고, 소수 부분이 무한정 생기게 된다.</p>\n<h2 id=\"자바스크립트-숫자-객체\" style=\"position:relative;\">자바스크립트 숫자 객체<a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%88%AB%EC%9E%90-%EA%B0%9D%EC%B2%B4\" aria-label=\"자바스크립트 숫자 객체 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>이런 문제들을 해결할 수 있도록 자바스크립트에는 내장 <code class=\"language-text\">Number</code> 객체 속성들이 있다.</p>\n<h3 id=\"정수-반올림\" style=\"position:relative;\">정수 반올림<a href=\"#%EC%A0%95%EC%88%98-%EB%B0%98%EC%98%AC%EB%A6%BC\" aria-label=\"정수 반올림 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>Math.floor : 가장 가까운 정수로 내림</li>\n<li>Math.round : 가장 가까운 정수로 반올림</li>\n<li>Math.ceil : 가장 가까운 정수로 올림</li>\n</ul>\n<h3 id=\"numberepsilon\" style=\"position:relative;\">Number.EPSILON<a href=\"#numberepsilon\" aria-label=\"numberepsilon permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><strong>EPSILON</strong>은 그리스어의 알파벳으로  ϵ 또는 ε로 나타낸다. 수학에서는 보통 epslion을 적은 양이나 무한대로 갔을 때 0으로 취급될 수 있는 용어를 나타낼 때 사용한다고 한다.</p>\n<p>자바스크립트에서도 <code class=\"language-text\">Number.EPSILON</code>을 제공한다. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON#testing_equality\">MDN Number EPSILON</a>의 예제를 살펴보자.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">function equal(x, y) {\r\n  return Math.abs(x - y) &lt; Number.EPSILON;\r\n}\r\n\r\nconst x = 0.2;\r\nconst y = 0.3;\r\nconst z = 0.1;\r\nconsole.log(equal(x + z, y)); // true\r\n</code>\n        </deckgo-highlight-code>\n<p>\"floating point numbers should never be compared with <code class=\"language-text\">===</code>\". 소수점을 가지는 숫자들을 비교할 때 <code class=\"language-text\">===</code> 연산자를 사용하지 말고, 두 숫자 사이가 충분하게 가까울 경우 동일한 것으로 간주하는 것이다.</p>\n<p><code class=\"language-text\">Number.EPSILON</code>을 사용하면 이런 오류를 어느정도 커버할 수 있다.</p>\n<p>다만 10³이 넘어가는 경우에는 적합하지 않다고 한다.</p>\n<h3 id=\"numbermax_safe_integer\" style=\"position:relative;\">Number.MAX_SAFE_INTEGER<a href=\"#numbermax_safe_integer\" aria-label=\"numbermax_safe_integer permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>가장 큰 정수를 반환한다. 가장 크기 때문에 정수를 더한 값으로 비교해도 모두 같은 값으로 인식한다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER // true</code>\n        </deckgo-highlight-code>\n<p>다만 부동소수점과 함께 사용하면 에러가 발생한다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Number.MAX_SAFE_INTEGER + 0.1 === Number.MAX_SAFE_INTEGER // false</code>\n        </deckgo-highlight-code>\n<h3 id=\"numbermax_value\" style=\"position:relative;\">Number.MAX_VALUE<a href=\"#numbermax_value\" aria-label=\"numbermax_value permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>가장 큰 부동소수점을 반환한다. <code class=\"language-text\">Number.MAX_SAFE_INTEGER</code>와는 달리 부동소수점에서도 잘 동작한다.</p>\n<h3 id=\"numbermin_safe_integer\" style=\"position:relative;\">Number.MIN_SAFE_INTEGER<a href=\"#numbermin_safe_integer\" aria-label=\"numbermin_safe_integer permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>가장 작은 음의 정수를 반환한다. 부동소수점과 함께 사용하면 마찬가지로 에러가 발생한다.</p>\n<h3 id=\"numbermin_value\" style=\"position:relative;\">Number.MIN_VALUE<a href=\"#numbermin_value\" aria-label=\"numbermin_value permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>가장 작은 부동소수점을 반환한다. <strong>가장 작은 부동소수점</strong> 이기 때문에 음수가 아니다. 0에 가장 가까운 부동소수점이기 때문에, 아래와 같이 동작할 수 있다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Number.MIN_VALUE - 1 == -1 // true</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">0 - 1 == -1</code> 의 결과가 true 인 것과 마찬가지로 동작한다.</p>\n<h3 id=\"무한\" style=\"position:relative;\">무한<a href=\"#%EB%AC%B4%ED%95%9C\" aria-label=\"무한 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>양의 무한대 <code class=\"language-text\">Infinity</code>와 음의 무한대 <code class=\"language-text\">-Infinity</code>가 있다.</p>\n<p><code class=\"language-text\">Number.MAX_SAFE_INTEGER</code>보다 큰 유일한 수가 <code class=\"language-text\">Infinity</code>이고, 마찬가지로 <code class=\"language-text\">Number.MIN_SAFE_INTEGER</code>보다 작은 유일한 수가 <code class=\"language-text\">-Infinity</code>다.</p>\n<h3 id=\"랜덤\" style=\"position:relative;\">랜덤<a href=\"#%EB%9E%9C%EB%8D%A4\" aria-label=\"랜덤 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Math.random()</code> 은 0과 1사이의 부동소수점을 무작위로 반환한다.</p>","internal":{"content":"\r\n도서 **자바스크립트로 하는 자료 구조와 알고리즘**을 읽으며 정리하는 글 시리즈.   \r\n2장은 var, let 등 변수 선언의 호이스팅과 TDZ와 관련된 내용이라 3장을 이어서 정리한다.\r\n\r\n## 자바스크립트의 숫자 체계\r\n\r\n자바스크립트로 고도의 수학적 연산이 필요한 작업을 한 적이 별로 없는 듯 하다. 적당히 `Math.round()` 나 `toFixed()` 처리 정도? 자바스크립트가 어떠한 숫자 체계를 가지고 있는지 이 파트를 통해 알 수 있었다.\r\n\r\n자바스크립트는 **64비트 부동소수점** 표현을 사용한다. \r\n\r\n64개의 자리를 가지고 있다는 의미다. 각각의 자리는 세 가지 부분으로 나뉜다.   \r\n부호 비트(63번째 비트)가 1이면 해당 수는 음수다. 다음 11개 비트(62번째에서 52번째 비트)는 지수 값 e를 나타낸다. 그리고 나머지 52비트가 소수 값을 나타낸다.\r\n\r\n여기서 자바스크립트의 부동소수점 체계가 반올림 오류를 일으킬 수 있다.\r\n\r\n```javascript\r\nconsole.log(0.1 + 0.2 === 0.3) // false\r\n```\r\n\r\n놀랍게도 `0.1 + 0.2 === 0.3` 비교 결과는 `false`다.  \r\n\r\n파이썬에서도 한 번 실행해봤다.\r\n\r\n```python\r\nprint(1/10 + 2/10) # 0.30000000000000004\r\nprint(0.1 + 0.2 == 0.3) # False\r\n```\r\n\r\n확실히 이상한 결과가 나온다. 이렇게 나오는 이유는 이진 표기법으로 십진수를 표현할 때, 무한 개의 수가 필요한 경우가 많기 때문이다. \r\n`0.1`을 계산하려 할 때 `1/10` 나눗셈은 끝나지 않고 계속 진행되고, 소수 부분이 무한정 생기게 된다. \r\n\r\n\r\n## 자바스크립트 숫자 객체\r\n\r\n이런 문제들을 해결할 수 있도록 자바스크립트에는 내장 `Number` 객체 속성들이 있다.\r\n\r\n### 정수 반올림\r\n\r\n* Math.floor : 가장 가까운 정수로 내림\r\n* Math.round : 가장 가까운 정수로 반올림\r\n* Math.ceil : 가장 가까운 정수로 올림\r\n\r\n### Number.EPSILON\r\n\r\n**EPSILON**은 그리스어의 알파벳으로  ϵ 또는 ε로 나타낸다. 수학에서는 보통 epslion을 적은 양이나 무한대로 갔을 때 0으로 취급될 수 있는 용어를 나타낼 때 사용한다고 한다.\r\n\r\n자바스크립트에서도 `Number.EPSILON`을 제공한다. [MDN Number EPSILON](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON#testing_equality)의 예제를 살펴보자.\r\n\r\n```javascript\r\nfunction equal(x, y) {\r\n  return Math.abs(x - y) < Number.EPSILON;\r\n}\r\n\r\nconst x = 0.2;\r\nconst y = 0.3;\r\nconst z = 0.1;\r\nconsole.log(equal(x + z, y)); // true\r\n\r\n```\r\n\r\n\"floating point numbers should never be compared with `===`\". 소수점을 가지는 숫자들을 비교할 때 `===` 연산자를 사용하지 말고, 두 숫자 사이가 충분하게 가까울 경우 동일한 것으로 간주하는 것이다.   \r\n\r\n`Number.EPSILON`을 사용하면 이런 오류를 어느정도 커버할 수 있다.   \r\n\r\n\r\n다만 10³이 넘어가는 경우에는 적합하지 않다고 한다.\r\n\r\n\r\n### Number.MAX_SAFE_INTEGER\r\n\r\n가장 큰 정수를 반환한다. 가장 크기 때문에 정수를 더한 값으로 비교해도 모두 같은 값으로 인식한다.\r\n\r\n\r\n```javascript\r\nNumber.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER // true\r\n```\r\n\r\n다만 부동소수점과 함께 사용하면 에러가 발생한다.\r\n\r\n```javascript\r\nNumber.MAX_SAFE_INTEGER + 0.1 === Number.MAX_SAFE_INTEGER // false\r\n```\r\n\r\n\r\n### Number.MAX_VALUE\r\n\r\n가장 큰 부동소수점을 반환한다. `Number.MAX_SAFE_INTEGER`와는 달리 부동소수점에서도 잘 동작한다.\r\n\r\n### Number.MIN_SAFE_INTEGER\r\n\r\n가장 작은 음의 정수를 반환한다. 부동소수점과 함께 사용하면 마찬가지로 에러가 발생한다.\r\n\r\n\r\n### Number.MIN_VALUE\r\n\r\n가장 작은 부동소수점을 반환한다. **가장 작은 부동소수점** 이기 때문에 음수가 아니다. 0에 가장 가까운 부동소수점이기 때문에, 아래와 같이 동작할 수 있다.\r\n\r\n```javascript\r\nNumber.MIN_VALUE - 1 == -1 // true\r\n```\r\n\r\n`0 - 1 == -1` 의 결과가 true 인 것과 마찬가지로 동작한다.\r\n\r\n\r\n### 무한\r\n\r\n양의 무한대 `Infinity`와 음의 무한대 `-Infinity`가 있다. \r\n\r\n`Number.MAX_SAFE_INTEGER`보다 큰 유일한 수가 `Infinity`이고, 마찬가지로 `Number.MIN_SAFE_INTEGER`보다 작은 유일한 수가 `-Infinity`다. \r\n\r\n\r\n### 랜덤\r\n\r\n`Math.random()` 은 0과 1사이의 부동소수점을 무작위로 반환한다. "},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%88%AB%EC%9E%90-%EC%B2%B4%EA%B3%84\">자바스크립트의 숫자 체계</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%88%AB%EC%9E%90-%EA%B0%9D%EC%B2%B4\">자바스크립트 숫자 객체</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EC%88%98-%EB%B0%98%EC%98%AC%EB%A6%BC\">정수 반올림</a></li>\n<li><a href=\"#numberepsilon\">Number.EPSILON</a></li>\n<li><a href=\"#numbermax_safe_integer\">Number.MAX_SAFE_INTEGER</a></li>\n<li><a href=\"#numbermax_value\">Number.MAX_VALUE</a></li>\n<li><a href=\"#numbermin_safe_integer\">Number.MIN_SAFE_INTEGER</a></li>\n<li><a href=\"#numbermin_value\">Number.MIN_VALUE</a></li>\n<li><a href=\"#%EB%AC%B4%ED%95%9C\">무한</a></li>\n<li><a href=\"#%EB%9E%9C%EB%8D%A4\">랜덤</a></li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/js-algorithm-2"}},"staticQueryHashes":["2665612806"]}