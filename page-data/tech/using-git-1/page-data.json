{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/using-git-1","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/using-git-1","tags":["Git"],"date":"2023-02-04","img":null,"title":"경험에 기반한 Git과 Github 사용법"},"excerpt":"git을 사용하기 시작한지 벌써 햇수로…","html":"<p>git을 사용하기 시작한지 벌써 햇수로 3년째다. 계속 꾸준히 사용해 오긴 했지만 어떻게 사용하는지, 누군가가 가르쳐주는 것보단 경험적으로 얻는 것들이 더 많았던 것 같다.<br>\n특히 오픈소스에 기여할 때 가장 얻어가는 게 많았다. 개발 공부를 시작하는 친구와 개발을 하는 중인 나를 위해 git과 github 사용법을 한 번 정리해본다.</p>\n<h2 id=\"git과-github\" style=\"position:relative;\">Git과 Github<a href=\"#git%EA%B3%BC-github\" aria-label=\"git과 github permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">Git</code>은 변경사항을 추적하고, 협업 시 작업을 조율하기 위해 사용되는 분산 버전관리 시스템이다.</p>\n<p><strong>Github</strong>는 <code class=\"language-text\">Git</code> 저장소 호스팅을 지원하는 웹 서비스이다.</p>\n<p>간단하게 말하면 협업 툴이다. 조별과제로 PPT를 만들어 본 사람이라면 이해할 것이다. 여러명이 한 파일을 수정하려면 한 사람의 수정이 끝난 후 해당 파일을 다시 저장해 수정한다. 만약 내가 저장해 수정하던 중, 누군가 자신의 수정 사항을 업로드하면 다시 수정된 파일을 다운받아 수정한다. 그러면 결국 '조별과제(1)(2)(1)(1)' 등의 파일명이 만들어지는 경우가 있다. 깃은 이런 과정을 수월하게 처리할 수 있게 돕는 버전관리 시스템이다.</p>\n<hr>\n<h3 id=\"branch\" style=\"position:relative;\">branch<a href=\"#branch\" aria-label=\"branch permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Git</code>을 사용할 때 중요한 개념은 <code class=\"language-text\">branch</code>다. 개발을 혼자 하는 경우면 모르겠지만, 대부분의 개발은 협업으로 이뤄진다. 보통 파일을 편집해야 할 때, 백업본을 하나 만든 후 새 파일에서 작업하듯이, 이렇게 독립적으로 개발할 수 있게 돕는 것이 <strong>브랜치</strong>이다. 브랜치의 뜻은 나무의 '가지'다. 분리되는 지점을 일컫기도 한다. 소스코드를 하나의 tree라고 보면, 여기저기로 분산되어 작업한 후 하나의 프로그램을 이루는 것으로 그림을 그려보면 이해가 쉽다.</p>\n<p>실무에서는 대개 <code class=\"language-text\">dev</code> 브랜치와 <code class=\"language-text\">main</code> (혹은 master) 브랜치를 사용하며, 급한 수정이나 레거시 코드를 들어내는 별도의 작업을 할 때 따로 브랜치를 땄다.</p>\n<hr>\n<h3 id=\"git-사용-흐름\" style=\"position:relative;\">git 사용 흐름<a href=\"#git-%EC%82%AC%EC%9A%A9-%ED%9D%90%EB%A6%84\" aria-label=\"git 사용 흐름 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>깃의 작업 흐름을 살펴보자.</p>\n<ol>\n<li>git add : 작업 디렉토리 내 변경된 내용을 스테이징 영역에 추가</li>\n<li>git commit : 스테이징에 있는 파일을 버전으로 기록</li>\n<li>git push : 원격 저장소(보통 Github Repository)에 코드 변경분을 업로드</li>\n</ol>\n<p>기본적으로 이 과정으로 이루어진다.</p>\n<h4 id=\"staging-area\" style=\"position:relative;\">Staging Area<a href=\"#staging-area\" aria-label=\"staging area permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>스테이징 영역이 무엇인가도 짚고 넘어가야 한다.</p>\n<p>깃에서 commit시에 3개 영역을 기반으로 작동한다.</p>\n<ul>\n<li>Working Directory(작업 디렉토리): 소스를 작업 중인 프로젝트의 디렉토리</li>\n<li>Staging Area: 커밋하기 전 <code class=\"language-text\">git add</code> 명령어로 추가한 파일들이 모여있는 공간</li>\n<li>Repository: 커밋들을 모아놓은 저장소</li>\n</ul>\n<p>비유 하자면 내 컴퓨터(local working directory)에서 작업한 ppt를 교수님(Repository)한테 보내기 전에 나에게 보내기(Staging Area)해놓은 느낌?</p>\n<p>정확한 비유는 아니지만 Staging Area는 일종의 대기장소이다.</p>\n<hr>\n<h3 id=\"예제\" style=\"position:relative;\">예제<a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>깃허브 &#x26; 깃 실습을 해보자.</p>\n<h4 id=\"깃-설치\" style=\"position:relative;\">깃 설치<a href=\"#%EA%B9%83-%EC%84%A4%EC%B9%98\" aria-label=\"깃 설치 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><a href=\"https://git-scm.com/downloads\">git downloads</a> 이 링크에서 운영체제에 맞는 깃을 다운로드 해 설치한다. 기본 체크되어 있는 상태로 Next 버튼을 눌러준다.</p>\n<p>설치는 이 블로그를 참고하면 좋을 듯. <a href=\"https://coding-factory.tistory.com/245\">https://coding-factory.tistory.com/245</a></p>\n<h4 id=\"깃허브-repository-생성\" style=\"position:relative;\">깃허브 Repository 생성<a href=\"#%EA%B9%83%ED%97%88%EB%B8%8C-repository-%EC%83%9D%EC%84%B1\" aria-label=\"깃허브 repository 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>깃허브의 Repository 탭에 들어가, New 버튼을 누른다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215683153-86d9a65d-cae2-4d03-9040-684ae82034b5.png\" alt=\"리포지토리 생성\"></p>\n<p>나는 <code class=\"language-text\">git-demo</code>로 리포지토리를 이미 생성했다. 기본 설정에서 아무것도 건들이지 않고 아래 Create repository 버튼을 클릭하면</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215683044-3702807d-29b9-45a7-9d57-a4ab19b4d9ae.png\" alt=\"리포지토리 생성\"></p>\n<p>이렇게 내 깃허브에 원격 저장소가 하나 만들어진다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215684184-2b8bd205-d57c-497e-a78f-14c5139d7eea.png\" alt=\"깃허브 원격 저장소\"></p>\n<h4 id=\"로컬-환경-세팅\" style=\"position:relative;\">로컬 환경 세팅<a href=\"#%EB%A1%9C%EC%BB%AC-%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85\" aria-label=\"로컬 환경 세팅 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>window에서 깃 환경을 세팅해보자.</p>\n<p>터미널이나 git bash 를 실행한 후, 프로젝트들을 모아놓을 폴더를 생성한다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"># make directory, &#39;git-demo&#39; 폴더 생성\r\nmkdir git-demo </code>\n        </deckgo-highlight-code>\n<p>프로젝트를 작업할 위치로 이동한다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"># change directory\r\ncd git-demo</code>\n        </deckgo-highlight-code>\n<p>깃을 해당 폴더에서 초기화한다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">git init\r\n\r\n# Initialized empty Git repository in [경로]/git-demo/.git/ \r\n# 위 메시지가 출력되면 성공</code>\n        </deckgo-highlight-code>\n<p>파일을 하나 생성한다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">echo &quot;# git-demo&quot; &gt;&gt; README.md\r\n\r\n# md (markdown)문서로 README 파일 생성</code>\n        </deckgo-highlight-code>\n<p>여기까지 완료하고 탐색기에서 해당 폴더를 열어보면, 아마 이렇게 되어 있을 것이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215687622-59bc508e-560d-440a-8a3e-f02110bcb7b4.png\" alt=\"파일 탐색기 확인\"></p>\n<p>만약 '.git' 폴더가 보이지 않는다면 파일탐색기에서 숨김 항목을 볼 수 있도록 설정을 바꾼다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215688048-5f570822-447e-496e-aead-972278381ab6.png\" alt=\"파일 탐색기 숨김 파일 보기\"></p>\n<p>Working Directory의 상태를 확인해보자.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">git status</code>\n        </deckgo-highlight-code>\n<p>현재 폴더에 어떤 작업이 진행되고 있는지 터미널을 통해 확인할 수 있다.\r\n지금은 아무 커밋도 하지 않았기 때문에 <strong>No commits yet</strong> 과 함께 추적관리되지 않는 파일 <strong>README.md</strong>가 있다고 출력된다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215688917-0dd2a2cc-c98b-4b3b-9468-9bf876dd52cf.png\" alt=\"git status\"></p>\n<p>이제 <code class=\"language-text\">README.md</code> 파일을 스테이징 영역에 넣어보자.<br>\n아래 명령어 중 아무거나 입력해도 된다. 다만 all (*) 은 원치 않는 파일까지 넣게 되어버릴 위험이 있으니 주의한다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"># ignore 처리된 파일 제외하고 모두 git add\r\ngit add *\r\n# 파일명과 경로가 모두 일치하는 것 git add\r\ngit add README.md\r\n# 확장자가 .md 로 끝나는 모든 파일 git add\r\ngit add *.md</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">git status</code> 명령어로 스테이징이 잘 되었는지 확인한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215689923-0e8d12d5-0a87-4088-9cbc-a3955878f328.png\" alt=\"스테이징 확인\"></p>\n<p>이제 커밋을 해보자. 커밋 시에는 <code class=\"language-text\">-m</code> 을 붙여 <strong>Commit Message</strong>를 작성해야 한다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">git commit -m &quot;Initial commit&quot;</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215690571-1203c8d0-7efe-4e3b-b60f-8838d24c46f9.png\" alt=\"git commit\"></p>\n<p>한번 더 status를 확인해보자.\r\n커밋할 것이 없다고 출력되면 제대로 커밋된 것이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215690675-f2202e35-6b7c-4db1-b10a-366745aa2c74.png\" alt=\"커밋 후 status\"></p>\n<p>브랜치 명을 'main'으로 변경하자. git은 기본 브랜치가 'master'로 생성된다.\r\n브랜치명이 프로젝트에 큰 영향을 주는 것은 아니나, master-slave 등의 브랜치명이 현 시대에 적합하지 않다고 바라보아 main-sub 브랜치로 작성하는 것이 대세다.</p>\n<p>자세히 알고 싶으면 <a href=\"https://go-review.googlesource.com/c/go/+/236857\">Go의 공지</a>와 <a href=\"https://www.theserverside.com/feature/Why-GitHub-renamed-its-master-branch-to-main\">Why GitHub renamed its master branch to main</a> 블로그 게시글을 읽어보자.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"># 브랜치명을 main으로 변경\r\ngit branch -M main</code>\n        </deckgo-highlight-code>\n<p>원격 저장소(remote)와 로컬 작업 디렉토리를 연결시켜주자. 깃허브에 있는 리포지토리에서 경로를 복사한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215692189-fde6df0d-a9e4-48d3-a2be-c3e14a3ca667.png\" alt=\"add remote origin\"></p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">git remote add origin [복사한 경로 붙여넣기]\r\n\r\n# git remote add origin https://github.com/Yeony99/git-demo.git</code>\n        </deckgo-highlight-code>\n<p>원격 저장소로 push 한다. 아마 첫 커밋은 이런 에러가 날 것이다. upstream이 없기 때문.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">git push\r\n# fatal: The current branch main has no upstream branch.\r\n# To push the current branch and set the remote as upstream, use\r\n\r\n#    git push --set-upstream origin main</code>\n        </deckgo-highlight-code>\n<p>깃에서 해결법을 제시해준다. 그대로 명령어를 입력한다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">git push --set-upstream origin main</code>\n        </deckgo-highlight-code>\n<p>깃허브 리포지토리를 확인해보자.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/215698792-1859eb3a-0549-47c4-9371-7d93653da1d0.png\" alt=\"완료된 리포지토리\"></p>\n<p>기본 사용법은 이렇게 끝!</p>\n<h2 id=\"reference\" style=\"position:relative;\">Reference<a href=\"#reference\" aria-label=\"reference permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"https://git-scm.com/\">Git</a></p>","internal":{"content":"\r\ngit을 사용하기 시작한지 벌써 햇수로 3년째다. 계속 꾸준히 사용해 오긴 했지만 어떻게 사용하는지, 누군가가 가르쳐주는 것보단 경험적으로 얻는 것들이 더 많았던 것 같다.    \r\n특히 오픈소스에 기여할 때 가장 얻어가는 게 많았다. 개발 공부를 시작하는 친구와 개발을 하는 중인 나를 위해 git과 github 사용법을 한 번 정리해본다.\r\n\r\n## Git과 Github\r\n\r\n`Git`은 변경사항을 추적하고, 협업 시 작업을 조율하기 위해 사용되는 분산 버전관리 시스템이다. \r\n\r\n**Github**는 `Git` 저장소 호스팅을 지원하는 웹 서비스이다.\r\n\r\n간단하게 말하면 협업 툴이다. 조별과제로 PPT를 만들어 본 사람이라면 이해할 것이다. 여러명이 한 파일을 수정하려면 한 사람의 수정이 끝난 후 해당 파일을 다시 저장해 수정한다. 만약 내가 저장해 수정하던 중, 누군가 자신의 수정 사항을 업로드하면 다시 수정된 파일을 다운받아 수정한다. 그러면 결국 '조별과제(1)(2)(1)(1)' 등의 파일명이 만들어지는 경우가 있다. 깃은 이런 과정을 수월하게 처리할 수 있게 돕는 버전관리 시스템이다.\r\n\r\n---\r\n\r\n### branch\r\n\r\n`Git`을 사용할 때 중요한 개념은 `branch`다. 개발을 혼자 하는 경우면 모르겠지만, 대부분의 개발은 협업으로 이뤄진다. 보통 파일을 편집해야 할 때, 백업본을 하나 만든 후 새 파일에서 작업하듯이, 이렇게 독립적으로 개발할 수 있게 돕는 것이 **브랜치**이다. 브랜치의 뜻은 나무의 '가지'다. 분리되는 지점을 일컫기도 한다. 소스코드를 하나의 tree라고 보면, 여기저기로 분산되어 작업한 후 하나의 프로그램을 이루는 것으로 그림을 그려보면 이해가 쉽다.\r\n\r\n실무에서는 대개 `dev` 브랜치와 `main` (혹은 master) 브랜치를 사용하며, 급한 수정이나 레거시 코드를 들어내는 별도의 작업을 할 때 따로 브랜치를 땄다.\r\n\r\n---\r\n\r\n### git 사용 흐름\r\n\r\n깃의 작업 흐름을 살펴보자.\r\n\r\n1. git add : 작업 디렉토리 내 변경된 내용을 스테이징 영역에 추가\r\n2. git commit : 스테이징에 있는 파일을 버전으로 기록\r\n3. git push : 원격 저장소(보통 Github Repository)에 코드 변경분을 업로드\r\n\r\n기본적으로 이 과정으로 이루어진다.\r\n\r\n\r\n#### Staging Area\r\n\r\n스테이징 영역이 무엇인가도 짚고 넘어가야 한다.\r\n\r\n깃에서 commit시에 3개 영역을 기반으로 작동한다.\r\n\r\n* Working Directory(작업 디렉토리): 소스를 작업 중인 프로젝트의 디렉토리\r\n* Staging Area: 커밋하기 전 `git add` 명령어로 추가한 파일들이 모여있는 공간\r\n* Repository: 커밋들을 모아놓은 저장소\r\n\r\n비유 하자면 내 컴퓨터(local working directory)에서 작업한 ppt를 교수님(Repository)한테 보내기 전에 나에게 보내기(Staging Area)해놓은 느낌?\r\n\r\n정확한 비유는 아니지만 Staging Area는 일종의 대기장소이다.\r\n\r\n---\r\n\r\n### 예제\r\n\r\n깃허브 & 깃 실습을 해보자.\r\n\r\n#### 깃 설치\r\n\r\n[git downloads](https://git-scm.com/downloads) 이 링크에서 운영체제에 맞는 깃을 다운로드 해 설치한다. 기본 체크되어 있는 상태로 Next 버튼을 눌러준다.\r\n\r\n설치는 이 블로그를 참고하면 좋을 듯. https://coding-factory.tistory.com/245\r\n\r\n#### 깃허브 Repository 생성\r\n\r\n깃허브의 Repository 탭에 들어가, New 버튼을 누른다.\r\n\r\n![리포지토리 생성](https://user-images.githubusercontent.com/76241233/215683153-86d9a65d-cae2-4d03-9040-684ae82034b5.png)\r\n\r\n나는 `git-demo`로 리포지토리를 이미 생성했다. 기본 설정에서 아무것도 건들이지 않고 아래 Create repository 버튼을 클릭하면 \r\n\r\n![리포지토리 생성](https://user-images.githubusercontent.com/76241233/215683044-3702807d-29b9-45a7-9d57-a4ab19b4d9ae.png)\r\n\r\n이렇게 내 깃허브에 원격 저장소가 하나 만들어진다.\r\n\r\n![깃허브 원격 저장소](https://user-images.githubusercontent.com/76241233/215684184-2b8bd205-d57c-497e-a78f-14c5139d7eea.png)\r\n\r\n\r\n#### 로컬 환경 세팅\r\n\r\nwindow에서 깃 환경을 세팅해보자.\r\n\r\n터미널이나 git bash 를 실행한 후, 프로젝트들을 모아놓을 폴더를 생성한다.\r\n\r\n```bash\r\n# make directory, 'git-demo' 폴더 생성\r\nmkdir git-demo \r\n```\r\n\r\n프로젝트를 작업할 위치로 이동한다.\r\n\r\n```bash\r\n# change directory\r\ncd git-demo\r\n```\r\n\r\n깃을 해당 폴더에서 초기화한다.\r\n\r\n```bash\r\ngit init\r\n\r\n# Initialized empty Git repository in [경로]/git-demo/.git/ \r\n# 위 메시지가 출력되면 성공\r\n```\r\n\r\n파일을 하나 생성한다.\r\n\r\n```bash\r\necho \"# git-demo\" >> README.md\r\n\r\n# md (markdown)문서로 README 파일 생성\r\n```\r\n\r\n여기까지 완료하고 탐색기에서 해당 폴더를 열어보면, 아마 이렇게 되어 있을 것이다.\r\n\r\n![파일 탐색기 확인](https://user-images.githubusercontent.com/76241233/215687622-59bc508e-560d-440a-8a3e-f02110bcb7b4.png)\r\n\r\n만약 '.git' 폴더가 보이지 않는다면 파일탐색기에서 숨김 항목을 볼 수 있도록 설정을 바꾼다.\r\n\r\n![파일 탐색기 숨김 파일 보기](https://user-images.githubusercontent.com/76241233/215688048-5f570822-447e-496e-aead-972278381ab6.png)\r\n\r\nWorking Directory의 상태를 확인해보자.\r\n\r\n```bash\r\ngit status\r\n```\r\n\r\n현재 폴더에 어떤 작업이 진행되고 있는지 터미널을 통해 확인할 수 있다.\r\n지금은 아무 커밋도 하지 않았기 때문에 **No commits yet** 과 함께 추적관리되지 않는 파일 **README.md**가 있다고 출력된다.\r\n\r\n![git status](https://user-images.githubusercontent.com/76241233/215688917-0dd2a2cc-c98b-4b3b-9468-9bf876dd52cf.png)\r\n\r\n이제 `README.md` 파일을 스테이징 영역에 넣어보자.   \r\n아래 명령어 중 아무거나 입력해도 된다. 다만 all (*) 은 원치 않는 파일까지 넣게 되어버릴 위험이 있으니 주의한다.\r\n```bash\r\n# ignore 처리된 파일 제외하고 모두 git add\r\ngit add *\r\n# 파일명과 경로가 모두 일치하는 것 git add\r\ngit add README.md\r\n# 확장자가 .md 로 끝나는 모든 파일 git add\r\ngit add *.md\r\n```\r\n\r\n`git status` 명령어로 스테이징이 잘 되었는지 확인한다.\r\n\r\n![스테이징 확인](https://user-images.githubusercontent.com/76241233/215689923-0e8d12d5-0a87-4088-9cbc-a3955878f328.png)\r\n\r\n이제 커밋을 해보자. 커밋 시에는 `-m` 을 붙여 **Commit Message**를 작성해야 한다.\r\n\r\n```bash\r\ngit commit -m \"Initial commit\"\r\n```\r\n\r\n![git commit](https://user-images.githubusercontent.com/76241233/215690571-1203c8d0-7efe-4e3b-b60f-8838d24c46f9.png)\r\n\r\n한번 더 status를 확인해보자.\r\n커밋할 것이 없다고 출력되면 제대로 커밋된 것이다.\r\n\r\n![커밋 후 status](https://user-images.githubusercontent.com/76241233/215690675-f2202e35-6b7c-4db1-b10a-366745aa2c74.png)\r\n\r\n브랜치 명을 'main'으로 변경하자. git은 기본 브랜치가 'master'로 생성된다. \r\n브랜치명이 프로젝트에 큰 영향을 주는 것은 아니나, master-slave 등의 브랜치명이 현 시대에 적합하지 않다고 바라보아 main-sub 브랜치로 작성하는 것이 대세다.\r\n\r\n자세히 알고 싶으면 [Go의 공지](https://go-review.googlesource.com/c/go/+/236857)와 [Why GitHub renamed its master branch to main](https://www.theserverside.com/feature/Why-GitHub-renamed-its-master-branch-to-main) 블로그 게시글을 읽어보자. \r\n\r\n```bash\r\n# 브랜치명을 main으로 변경\r\ngit branch -M main\r\n```\r\n\r\n원격 저장소(remote)와 로컬 작업 디렉토리를 연결시켜주자. 깃허브에 있는 리포지토리에서 경로를 복사한다.\r\n\r\n![add remote origin](https://user-images.githubusercontent.com/76241233/215692189-fde6df0d-a9e4-48d3-a2be-c3e14a3ca667.png)\r\n\r\n```bash\r\ngit remote add origin [복사한 경로 붙여넣기]\r\n\r\n# git remote add origin https://github.com/Yeony99/git-demo.git\r\n```\r\n\r\n원격 저장소로 push 한다. 아마 첫 커밋은 이런 에러가 날 것이다. upstream이 없기 때문.\r\n\r\n```bash\r\ngit push\r\n# fatal: The current branch main has no upstream branch.\r\n# To push the current branch and set the remote as upstream, use\r\n\r\n#    git push --set-upstream origin main\r\n```\r\n\r\n깃에서 해결법을 제시해준다. 그대로 명령어를 입력한다.\r\n\r\n```bash\r\ngit push --set-upstream origin main\r\n```\r\n\r\n깃허브 리포지토리를 확인해보자.\r\n\r\n![완료된 리포지토리](https://user-images.githubusercontent.com/76241233/215698792-1859eb3a-0549-47c4-9371-7d93653da1d0.png)\r\n\r\n기본 사용법은 이렇게 끝!\r\n\r\n## Reference\r\n\r\n[Git](https://git-scm.com/)\r\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#git%EA%B3%BC-github\">Git과 Github</a></p>\n<ul>\n<li>\n<p><a href=\"#branch\">branch</a></p>\n</li>\n<li>\n<p><a href=\"#git-%EC%82%AC%EC%9A%A9-%ED%9D%90%EB%A6%84\">git 사용 흐름</a></p>\n<ul>\n<li><a href=\"#staging-area\">Staging Area</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%98%88%EC%A0%9C\">예제</a></p>\n<ul>\n<li><a href=\"#%EA%B9%83-%EC%84%A4%EC%B9%98\">깃 설치</a></li>\n<li><a href=\"#%EA%B9%83%ED%97%88%EB%B8%8C-repository-%EC%83%9D%EC%84%B1\">깃허브 Repository 생성</a></li>\n<li><a href=\"#%EB%A1%9C%EC%BB%AC-%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85\">로컬 환경 세팅</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/using-git-1"}},"staticQueryHashes":["2665612806"]}