{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/let-me-know-js-a-bit-scope","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/let-me-know-js-a-bit-scope","tags":["쫌만알자"],"date":"2022-11-30","img":"https://user-images.githubusercontent.com/76241233/177932893-5a504b26-12e4-4ade-b1ce-1951d072ba82.jpg","title":"쫌만알자! (18) - 스코프"},"excerpt":"앞서 함수를 알아봤습니다. 함수는  이렇게 작성되는 코드블록을 가지고 있습니다. 사실 함수 뿐 아니라 이전에 살펴본 제어문도 코드블록을 가지고 있죠. 코드블록을 언급하는 이유는, 여기서 알아볼 스코프(scope…","html":"<p>앞서 함수를 알아봤습니다. 함수는 <code class=\"language-text\">{}</code> 이렇게 작성되는 코드블록을 가지고 있습니다. 사실 함수 뿐 아니라 이전에 살펴본 제어문도 코드블록을 가지고 있죠.<br>\n코드블록을 언급하는 이유는, 여기서 알아볼 스코프(scope)가 <strong>범위</strong>를 뜻하기 때문입니다.</p>\n<h2 id=\"스코프란\" style=\"position:relative;\">스코프란?<a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84%EB%9E%80\" aria-label=\"스코프란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>스코프는 <strong>유효범위</strong>입니다. 지금껏 봐왔던 제어문과 함수의 코드블록 내에서 선언된 변수나 혹은 매개변수는 해당 제어문/함수의 코드블록 바깥에서는 접근하지 못합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">function add(x, y) {\r\n  return x + y;\r\n}\r\n\r\nadd(1, 2);\r\n\r\nconsole.log(x); // ReferenceError: x is not defined</code>\n        </deckgo-highlight-code>\n<p>함수에 전달된 매개변수는 함수 body 내부에서만 <strong>유효범위</strong>를 가지기 때문입니다. 그 안에서만 유효하기 때문에 바깥에서는 아무리 참조하려고 해도 가져올 수 없는 것이죠.</p>\n<p>간단한 예제를 살펴봅시다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let a = &#39;a in global&#39;;\r\n\r\nfunction foo() {\r\n  let a = &#39;a in function&#39;;\r\n  console.log(a); // &#39;a in function&#39;\r\n}\r\n\r\nfoo();\r\n\r\nconsole.log(a); // &#39;a in global&#39;</code>\n        </deckgo-highlight-code>\n<p>똑같은 <code class=\"language-text\">a</code>로 변수를 선언했지만 함수 내에서는 함수 내의 <code class=\"language-text\">a</code>가, 외부의 console.log() 에서는 전역변수로 선언된 <code class=\"language-text\">a</code>가 출력됩니다.</p>\n<p>자바스크립트 엔진은 똑같은 이름의 변수가 2개 이상 있으면, 어떤 변수를 참조해야 할 것인지를 결정합니다. 변수는 <strong>식별자</strong>이기 때문에, 변수 이름은 중복될 수 없습니다. 따라서 결국 변수는 변수명과 스코프 두 가지 모두를 가지고 서로 다른 변수인지 판별하는 것입니다.</p>\n<h3 id=\"스코프-종류\" style=\"position:relative;\">스코프 종류<a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EC%A2%85%EB%A5%98\" aria-label=\"스코프 종류 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>스코프는 전역(global)과 지역(local)로 나뉩니다. 전역에서 선언된 변수라면 전역 스코프를 가지고, 지역에서 선언된 변수는 지역 스코프를 갖게 됩니다.</p>\n<p>간단하게 코드블록 <code class=\"language-text\">{}</code> 만으로 스코프를 나누어보겠습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let a = &#39;global 1&#39;;\r\nlet b = &#39;global 2&#39;;\r\n\r\n// local 1 scope\r\n{\r\n  let c = &#39;local 1&#39;;\r\n\r\n  console.log(a, b, c); // &#39;global 1&#39;, &#39;global 2&#39;, &#39;local 1&#39;\r\n\r\n  // local 2 scope\r\n  {\r\n    let b = &#39;local 2&#39;;\r\n\r\n    console.log(a, b, c); // // &#39;global 1&#39;, &#39;local 2&#39;, &#39;local 1&#39;\r\n  }\r\n}\r\n\r\nconsole.log(a); // &#39;global 1&#39;\r\nconsole.log(b); // &#39;global 2&#39;\r\nconsole.log(c); // ReferenceError: c is not defined</code>\n        </deckgo-highlight-code>\n<p>이런 스코프를 지정할 때 ES6 문법인 <code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>를 사용하면 별 문제가 없습니다. 하지만 <code class=\"language-text\">var</code> 키워드를 사용해 변수를 선언하게 되면 함수 레벨 스코프에서만 우리가 원하는대로 작동하는 것을 볼 수 있습니다.</p>\n<h4 id=\"함수-레벨-스코프\" style=\"position:relative;\">함수 레벨 스코프<a href=\"#%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"함수 레벨 스코프 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var a = 1;\r\n\r\n{\r\n  var a = 2;\r\n}\r\nconsole.log(a); // 2\r\n\r\nif(true) {\r\n  var a = 3;\r\n}\r\nconsole.log(a); // 3\r\n\r\nfor(var i = 0; i &lt; 5; i++) {\r\n  var a = i;\r\n}\r\nconsole.log(a); // 4\r\n\r\nfunction foo() {\r\n  var a = 999;\r\n  console.log(a); // 999\r\n}\r\n\r\nfoo();\r\n\r\n// 전역 변수가 변하지 않았음을 확인 가능\r\nconsole.log(a); // 4 </code>\n        </deckgo-highlight-code>\n<p>함수 내에서 선언한 변수만 지역변수로 취급되는 것을 확인할 수 있습니다. 반면 <code class=\"language-text\">const</code>나 <code class=\"language-text\">let</code> 키워드는 <strong>블록 레벨 스코프</strong>를 지원합니다.</p>\n<h4 id=\"블록-레벨-스코프\" style=\"position:relative;\">블록 레벨 스코프<a href=\"#%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"블록 레벨 스코프 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const a = 1;\r\n\r\n{\r\n  const a = 2;\r\n  console.log(a) // 2\r\n}\r\nconsole.log(a); // 1\r\n\r\nif(true) {\r\n  const a = 3;\r\n  console.log(a); // 3\r\n}\r\nconsole.log(a); // 1\r\n\r\nfor(let i = 0; i &lt; 5; i++) {\r\n  const a = i;\r\n}\r\nconsole.log(a); // 1\r\n\r\nfunction foo() {\r\n  const a = 999;\r\n  console.log(a); // 999\r\n}\r\n\r\nfoo();\r\n// 처음 선언한 변수 변하지 않음\r\nconsole.log(a); // 1 </code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">const</code>로만 선언했기 때문에 만약 전역으로 선언한 <code class=\"language-text\">a</code>가 값이 바뀌었다면 아마 상수를 바꿀 수 없다는 에러가 발생했을 것입니다. 하지만 에러가 발생하지 않고,\r\n<code class=\"language-text\">{}</code> 코드 블록 내에서 선언된 모든 <code class=\"language-text\">a</code>가 해당 블록 내의 값으로 할당되는 것을 확인할 수 있습니다.</p>\n<h4 id=\"렉시컬-스코프\" style=\"position:relative;\">렉시컬 스코프<a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"렉시컬 스코프 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>렉시컬 스코프는 함수를 정의한 곳에 따라 상위 스코프를 결정합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let a = 1;\r\n\r\n// 전역함수\r\nfunction foo() {\r\n  let a = 999;\r\n  bar();\r\n}\r\n\r\n// 전역함수\r\nfunction bar() {\r\n  console.log(a); // 전역 변수 참조\r\n}</code>\n        </deckgo-highlight-code>\n<p>위 예시는 함수를 모두 <strong>전역</strong>에 정의했습니다. 함수는 자신이 정의된 장소(전역/지역)를 기억해 상위 스코프의 변수를 참조합니다.<br>\n따라서 <code class=\"language-text\">bar</code> 함수가 어디서 호출되든 상관없이, <code class=\"language-text\">bar</code> 는 <code class=\"language-text\">전역변수 a</code>를 참조하게 됩니다.</p>\n<p>◾ <a href=\"/tech/let-me-know-js-a-bit-function\">함수</a> 👈 이전 글 보기</p>","internal":{"content":"\r\n앞서 함수를 알아봤습니다. 함수는 `{}` 이렇게 작성되는 코드블록을 가지고 있습니다. 사실 함수 뿐 아니라 이전에 살펴본 제어문도 코드블록을 가지고 있죠.   \r\n코드블록을 언급하는 이유는, 여기서 알아볼 스코프(scope)가 **범위**를 뜻하기 때문입니다.\r\n\r\n## 스코프란?\r\n\r\n스코프는 **유효범위**입니다. 지금껏 봐왔던 제어문과 함수의 코드블록 내에서 선언된 변수나 혹은 매개변수는 해당 제어문/함수의 코드블록 바깥에서는 접근하지 못합니다.\r\n\r\n```javascript\r\nfunction add(x, y) {\r\n  return x + y;\r\n}\r\n\r\nadd(1, 2);\r\n\r\nconsole.log(x); // ReferenceError: x is not defined\r\n```\r\n\r\n함수에 전달된 매개변수는 함수 body 내부에서만 **유효범위**를 가지기 때문입니다. 그 안에서만 유효하기 때문에 바깥에서는 아무리 참조하려고 해도 가져올 수 없는 것이죠.\r\n\r\n간단한 예제를 살펴봅시다.\r\n\r\n```javascript\r\nlet a = 'a in global';\r\n\r\nfunction foo() {\r\n  let a = 'a in function';\r\n  console.log(a); // 'a in function'\r\n}\r\n\r\nfoo();\r\n\r\nconsole.log(a); // 'a in global'\r\n```\r\n\r\n똑같은 `a`로 변수를 선언했지만 함수 내에서는 함수 내의 `a`가, 외부의 console.log() 에서는 전역변수로 선언된 `a`가 출력됩니다. \r\n\r\n자바스크립트 엔진은 똑같은 이름의 변수가 2개 이상 있으면, 어떤 변수를 참조해야 할 것인지를 결정합니다. 변수는 **식별자**이기 때문에, 변수 이름은 중복될 수 없습니다. 따라서 결국 변수는 변수명과 스코프 두 가지 모두를 가지고 서로 다른 변수인지 판별하는 것입니다.\r\n\r\n### 스코프 종류\r\n\r\n스코프는 전역(global)과 지역(local)로 나뉩니다. 전역에서 선언된 변수라면 전역 스코프를 가지고, 지역에서 선언된 변수는 지역 스코프를 갖게 됩니다.\r\n\r\n간단하게 코드블록 `{}` 만으로 스코프를 나누어보겠습니다.\r\n\r\n```javascript\r\nlet a = 'global 1';\r\nlet b = 'global 2';\r\n\r\n// local 1 scope\r\n{\r\n  let c = 'local 1';\r\n\r\n  console.log(a, b, c); // 'global 1', 'global 2', 'local 1'\r\n\r\n  // local 2 scope\r\n  {\r\n    let b = 'local 2';\r\n\r\n    console.log(a, b, c); // // 'global 1', 'local 2', 'local 1'\r\n  }\r\n}\r\n\r\nconsole.log(a); // 'global 1'\r\nconsole.log(b); // 'global 2'\r\nconsole.log(c); // ReferenceError: c is not defined\r\n```\r\n\r\n이런 스코프를 지정할 때 ES6 문법인 `let`과 `const`를 사용하면 별 문제가 없습니다. 하지만 `var` 키워드를 사용해 변수를 선언하게 되면 함수 레벨 스코프에서만 우리가 원하는대로 작동하는 것을 볼 수 있습니다.\r\n\r\n#### 함수 레벨 스코프\r\n\r\n```javascript\r\nvar a = 1;\r\n\r\n{\r\n  var a = 2;\r\n}\r\nconsole.log(a); // 2\r\n\r\nif(true) {\r\n  var a = 3;\r\n}\r\nconsole.log(a); // 3\r\n\r\nfor(var i = 0; i < 5; i++) {\r\n  var a = i;\r\n}\r\nconsole.log(a); // 4\r\n\r\nfunction foo() {\r\n  var a = 999;\r\n  console.log(a); // 999\r\n}\r\n\r\nfoo();\r\n\r\n// 전역 변수가 변하지 않았음을 확인 가능\r\nconsole.log(a); // 4 \r\n```\r\n\r\n함수 내에서 선언한 변수만 지역변수로 취급되는 것을 확인할 수 있습니다. 반면 `const`나 `let` 키워드는 **블록 레벨 스코프**를 지원합니다.\r\n\r\n#### 블록 레벨 스코프\r\n\r\n```javascript\r\nconst a = 1;\r\n\r\n{\r\n  const a = 2;\r\n  console.log(a) // 2\r\n}\r\nconsole.log(a); // 1\r\n\r\nif(true) {\r\n  const a = 3;\r\n  console.log(a); // 3\r\n}\r\nconsole.log(a); // 1\r\n\r\nfor(let i = 0; i < 5; i++) {\r\n  const a = i;\r\n}\r\nconsole.log(a); // 1\r\n\r\nfunction foo() {\r\n  const a = 999;\r\n  console.log(a); // 999\r\n}\r\n\r\nfoo();\r\n// 처음 선언한 변수 변하지 않음\r\nconsole.log(a); // 1 \r\n```\r\n\r\n`const`로만 선언했기 때문에 만약 전역으로 선언한 `a`가 값이 바뀌었다면 아마 상수를 바꿀 수 없다는 에러가 발생했을 것입니다. 하지만 에러가 발생하지 않고, \r\n`{}` 코드 블록 내에서 선언된 모든 `a`가 해당 블록 내의 값으로 할당되는 것을 확인할 수 있습니다.\r\n\r\n\r\n#### 렉시컬 스코프\r\n\r\n렉시컬 스코프는 함수를 정의한 곳에 따라 상위 스코프를 결정합니다.\r\n\r\n```javascript\r\nlet a = 1;\r\n\r\n// 전역함수\r\nfunction foo() {\r\n  let a = 999;\r\n  bar();\r\n}\r\n\r\n// 전역함수\r\nfunction bar() {\r\n  console.log(a); // 전역 변수 참조\r\n}\r\n```\r\n\r\n위 예시는 함수를 모두 **전역**에 정의했습니다. 함수는 자신이 정의된 장소(전역/지역)를 기억해 상위 스코프의 변수를 참조합니다.   \r\n따라서 `bar` 함수가 어디서 호출되든 상관없이, `bar` 는 `전역변수 a`를 참조하게 됩니다.\r\n\r\n◾ [함수](/tech/let-me-know-js-a-bit-function) 👈 이전 글 보기\r\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84%EB%9E%80\">스코프란?</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EC%A2%85%EB%A5%98\">스코프 종류</a></p>\n<ul>\n<li><a href=\"#%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\">함수 레벨 스코프</a></li>\n<li><a href=\"#%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\">블록 레벨 스코프</a></li>\n<li><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%EC%8A%A4%EC%BD%94%ED%94%84\">렉시컬 스코프</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/let-me-know-js-a-bit-scope"}},"staticQueryHashes":["2665612806"]}