{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/let-me-know-js-a-bit-function","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/let-me-know-js-a-bit-function","tags":["쫌만알자"],"date":"2022-11-16","img":"https://user-images.githubusercontent.com/76241233/177932893-5a504b26-12e4-4ade-b1ce-1951d072ba82.jpg","title":"쫌만알자! (17) - 함수"},"excerpt":"자바스크립트를 수월하게 사용하려면 함수(Function…","html":"<p>자바스크립트를 수월하게 사용하려면 함수(Function)을 아는 것이 중요합니다. 함수란 무엇일까요?</p>\n<h2 id=\"함수란\" style=\"position:relative;\">함수란?<a href=\"#%ED%95%A8%EC%88%98%EB%9E%80\" aria-label=\"함수란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>수학에서는 <code class=\"language-text\">input</code>을 받아 <code class=\"language-text\">output</code>을 내보내는 과정을 함수라고 합니다. <strong>더하기</strong> 라는 함수를 정의했다고 가정해봅시다.</p>\n<div style=\"background-color: #eee; border-radius: 1rem; font-size: 0.9rem; padding: 1rem\">\r\n<h5>Fn : 더하기</h6>\r\n<div style=\"padding:1rem; background-color: #fff; display: flex; justify-content: space-around; align-items: center\">\r\n<div>INPUT(3, 5)</div><div style=\"font-size: 30px\">=></div> <div>OUTPUT(8)</div>\r\n</div>\r\n</div>\r\n<br/>\n<p>이렇게 동작하죠. 프로그래밍에서도 똑같습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">function add(x, y) {\r\n  return x + y;\r\n}\r\n\r\nadd(3, 5) // 8</code>\n        </deckgo-highlight-code>\n<br/>\n<h2 id=\"왜-함수를-사용할까\" style=\"position:relative;\">왜 함수를 사용할까?<a href=\"#%EC%99%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\" aria-label=\"왜 함수를 사용할까 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>무언가를 더하고 싶다면 더할 개수만큼 더하기를 반복하면 되는 건 아닐까요?</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">3 + 5 + 8 + ...</code>\n        </deckgo-highlight-code>\n<p>하지만 프로그래머들은 이런 과정을 반복하고 싶지 않아합니다. 물론 몇 번이나 반복해야하는지 모를 때도 있구요.</p>\n<p>따라서 계속 반복되는 동일한 작업이 있을 경우 함수를 정의해 사용하는 것이 편리합니다.</p>\n<p>만약 <code class=\"language-text\">1+2+3+4+ ...</code> 가 n번째 수까지 이어진다면 사람은 그걸 다 더하고 있어야겠죠. <del>수열의 합 공식 같은 경우는 배제하고 봅시다.</del> 하지만 <code class=\"language-text\">n</code>까지의 수를 다 더하는 함수를 작성하면 n이 어떤 수가 되든 상관 없고, 프로그램이 다 계산해주는 편리함을 누릴 수 있습니다.</p>\n<p>뿐만 아니라 <code class=\"language-text\">1+2+3+4+ ... + n</code> 번이 된다면 가독성도 좋지 않습니다. 누구나 보고 잘 읽을 수 있는 코드를 작성하기 위해서도 함수는 반드시 필요합니다.</p>\n<h2 id=\"함수-작성하기\" style=\"position:relative;\">함수 작성하기<a href=\"#%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"함수 작성하기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>함수는 여러 형태로 작성할 수 있는 <strong>객체</strong>입니다. 다만 일반 객체와는 구별되는 <strong>호출할 수 있는 객체</strong>입니다.</p>\n<p>작성할 수 있는 형태는 다음과 같습니다.</p>\n<ul>\n<li>함수 선언문(function declaration)</li>\n<li>함수 표현식(function expression)</li>\n<li>Function 생성자 함수</li>\n<li>화살표 함수 (ES6) (arrow function)</li>\n</ul>\n<p>이 밖에도 약식 메소드 정의나 제너레이터 함수가 있지만 이후에 살펴보도록 하겠습니다.</p>\n<h3 id=\"함수의-형태\" style=\"position:relative;\">함수의 형태<a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%ED%98%95%ED%83%9C\" aria-label=\"함수의 형태 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>함수를 작성할 때의 구성요소를 알아보겠습니다.</p>\n<ul>\n<li>함수명\n<ul>\n<li>식별자 명명 규칙을 준수해야 합니다.</li>\n<li>함수 이름은 생략 가능합니다. (함수명이 있는 함수는 기명함수, 없는 함수는 익명함수)</li>\n</ul>\n</li>\n<li>매개변수\n<ul>\n<li>함수 내부로 전달할 변수입니다.</li>\n<li>0개 이상을 작성할 수 있습니다.</li>\n<li><strong>순서</strong>가 중요합니다. (첫 번째 매개변수를 비우고 두 번째 매개변수를 전달할 수 없습니다.)</li>\n<li>식별자 명명 규칙을 준수해야 합니다.</li>\n</ul>\n</li>\n<li>함수몸통(body)\n<ul>\n<li>함수를 호출했을 때 동작할 문들을 작성합니다.</li>\n</ul>\n</li>\n</ul>\n<p>가장 기본적인 형태인 함수 선언문부터 알아보겠습니다.</p>\n<h3 id=\"함수-선언문\" style=\"position:relative;\">함수 선언문<a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8\" aria-label=\"함수 선언문 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">function add(x, y) {\r\n  return x + y\r\n}</code>\n        </deckgo-highlight-code>\n<p>위와 같은 형태를 띄고 있습니다.</p>\n<p><code class=\"language-text\">function</code> 키워드로 함수를 작성한다고 명시하고, 함수명을 입력합니다. 함수 선언문에서는 함수의 이름을 생략할 수 없습니다.</p>\n<h4 id=\"return\" style=\"position:relative;\">return<a href=\"#return\" aria-label=\"return permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>함수 선언문은 <code class=\"language-text\">return</code>이 있는 형태와 없는 형태로 구분할 수 있습니다.</p>\n<p>먼저 <code class=\"language-text\">return</code>은 키워드 뜻 그대로 <strong>돌려준다</strong>는 의미입니다. 자바스크립트의 함수는 기본적으로 리턴 값을 명시하지 않으면 <code class=\"language-text\">undefined</code> 를 리턴합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">function add(x, y) {\r\n  return x + y\r\n}\r\n\r\n// 함수의 정보 확인 가능\r\nconsole.log(add) // ƒ add(x, y) { return x+y }\r\nconsole.dir(add) // arguments, caller, length, name, prototype 확인 가능\r\n\r\n// 값으로 평가\r\nconsole.log(add(1, 2)) // 3</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">add</code> 함수에 인자(arguments)를 넣으니 return 된 값이 있음을 확인할 수 있습니다.</p>\n<p>분명 함수를 호출했는데, 값이 콘솔에 기록됩니다. 이것은 자바스크립트 함수의 특징인데요.<br>\n자바스크립트에서 함수는 <strong>값의 성질을 갖는 객체</strong>입니다.</p>\n<p>return이 없는 함수 선언문도 살펴보겠습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let result = 0;\r\n\r\nfunction addOnResult(x, y) {\r\n  result = x + y;\r\n}\r\n\r\nconsole.log(addOnResult(1, 2)) // undefined\r\nconsole.log(result) // 3</code>\n        </deckgo-highlight-code>\n<p>return이 없고 외부의 변수를 컨트롤할 경우에는 함수는 <code class=\"language-text\">undefined</code>를 되돌려줌을 볼 수 있습니다.</p>\n<h3 id=\"함수-표현식\" style=\"position:relative;\">함수 표현식<a href=\"#%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"함수 표현식 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>앞서 살펴본 함수 선언문에서 함수는 <strong>문</strong>이기 때문에 변수에 할당할 수 없다고 생각할 수 있습니다. 하지만 함수는 또한 <strong>값처럼 사용할 수 있는 객체</strong> 이기 때문에 변수에 할당해 사용할 수도 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const add = function(x, y) {\r\n  return x + y\r\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게 표현식으로 작성하게 되면 함수명으로 접근해 함수를 호출하는 것이 아니라, 변수에 변수와 이름이 같은 함수를 하나 생성한 것으로 바라봅니다.</p>\n<p><code class=\"language-text\">const add</code>는 곧 <code class=\"language-text\">function add(x, y) {...}</code>를 할당한 것과 같은 것이죠.</p>\n<p>그렇기에 함수 표현식을 작성할 때 이름이 있는 함수(기명함수)로 작성하지 않고 함수명을 생략하는 것이 일반적입니다.</p>\n<p>다음과 같은 사례가 발생할 수 있기 때문입니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const foo = function bar(x) {\r\n  return x + 1;\r\n}\r\n\r\nconsole.log(foo(5)) // 6\r\nconsole.log(bar(5)) // ReferenceError: bar is not defined\r\n\r\n// foo 내부에서만 접근할 수 있는 이름.\r\nconsole.dir(foo) // name: &quot;bar&quot;, length: 1, arguments: null, caller: null</code>\n        </deckgo-highlight-code>\n<br/>\n<h4 id=\"함수-선언문과-함수-표현식의-차이\" style=\"position:relative;\">함수 선언문과 함수 표현식의 차이<a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8%EA%B3%BC-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"함수 선언문과 함수 표현식의 차이 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>함수 선언문으로 정의한 함수는 <strong>호이스팅</strong>됩니다. 반면 표현식은 불가능합니다. 각각의 생성 시점이 다르기 때문입니다.</p>\n<p>표현식은 <strong>변수 호이스팅</strong>으로 취급됩니다.</p>\n<br/>\n<h3 id=\"생성자-함수\" style=\"position:relative;\">생성자 함수<a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\" aria-label=\"생성자 함수 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>생성자 함수로 함수를 생성하는 것은 일반적이지 않은 방식입니다. 위에서 살펴본 함수 선언문, 함수 표현식으로 관리되는 함수와는 다른 동작 방식을 가지고, 클로저를 지원하지 않습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const add = new Function(&#39;x&#39;, &#39;y&#39;, &#39;return x+y&#39;);</code>\n        </deckgo-highlight-code>\n<p>형태만 보고 넘어갑시다.</p>\n<br/>\n<h3 id=\"화살표-함수es6\" style=\"position:relative;\">화살표 함수(ES6)<a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98es6\" aria-label=\"화살표 함수es6 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>ES6 문법부터 도입된 화살표 함수입니다. <code class=\"language-text\">function</code> 키워드 대신 <code class=\"language-text\">=></code> 화살표를 사용해 축약된 표현으로 함수를 작성할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const add = (x, y) =&gt; x + y;\r\n\r\nconsole.dir(add) // length: 2, name: &quot;add&quot;</code>\n        </deckgo-highlight-code>\n<p>다른 함수보다 좀더 간략하게 보여지나요?</p>\n<p>화살표 함수는 위 코드에서 볼 수 있듯 항상 익명함수로 작성합니다.</p>\n<p>다른 함수 정의 방법과 다른 점은 <code class=\"language-text\">console.dir</code>로 확인했을 때 prototype과 arguments 가 없는 것을 확인할 수 있습니다.</p>\n<p>화살표 함수는 추후에 어떤 방식으로 작동하는지 보다 자세히 알아보겠습니다.</p>\n<br/>\n<p>다음 글에서는 함수를 사용하는 다양한 방법을 알아보겠습니다.</p>\n<p>◾ <a href=\"/tech/let-me-know-js-a-bit-shallow-copy-deep-copy\">얕은 복사와 깊은 복사</a> 👈 이전 글 보기</p>","internal":{"content":"자바스크립트를 수월하게 사용하려면 함수(Function)을 아는 것이 중요합니다. 함수란 무엇일까요?\r\n\r\n## 함수란?\r\n\r\n수학에서는 `input`을 받아 `output`을 내보내는 과정을 함수라고 합니다. **더하기** 라는 함수를 정의했다고 가정해봅시다.\r\n\r\n<div style=\"background-color: #eee; border-radius: 1rem; font-size: 0.9rem; padding: 1rem\">\r\n<h5>Fn : 더하기</h6>\r\n<div style=\"padding:1rem; background-color: #fff; display: flex; justify-content: space-around; align-items: center\">\r\n<div>INPUT(3, 5)</div><div style=\"font-size: 30px\">=></div> <div>OUTPUT(8)</div>\r\n</div>\r\n</div>\r\n<br/>\r\n\r\n이렇게 동작하죠. 프로그래밍에서도 똑같습니다.\r\n\r\n\r\n```javascript\r\nfunction add(x, y) {\r\n  return x + y;\r\n}\r\n\r\nadd(3, 5) // 8\r\n```\r\n\r\n<br/>\r\n\r\n\r\n## 왜 함수를 사용할까?\r\n\r\n무언가를 더하고 싶다면 더할 개수만큼 더하기를 반복하면 되는 건 아닐까요?\r\n\r\n```bash\r\n3 + 5 + 8 + ...\r\n```\r\n\r\n하지만 프로그래머들은 이런 과정을 반복하고 싶지 않아합니다. 물론 몇 번이나 반복해야하는지 모를 때도 있구요.\r\n\r\n따라서 계속 반복되는 동일한 작업이 있을 경우 함수를 정의해 사용하는 것이 편리합니다.\r\n\r\n만약 `1+2+3+4+ ...` 가 n번째 수까지 이어진다면 사람은 그걸 다 더하고 있어야겠죠. ~~수열의 합 공식 같은 경우는 배제하고 봅시다.~~ 하지만 `n`까지의 수를 다 더하는 함수를 작성하면 n이 어떤 수가 되든 상관 없고, 프로그램이 다 계산해주는 편리함을 누릴 수 있습니다.\r\n\r\n뿐만 아니라 `1+2+3+4+ ... + n` 번이 된다면 가독성도 좋지 않습니다. 누구나 보고 잘 읽을 수 있는 코드를 작성하기 위해서도 함수는 반드시 필요합니다.\r\n\r\n\r\n## 함수 작성하기\r\n\r\n함수는 여러 형태로 작성할 수 있는 **객체**입니다. 다만 일반 객체와는 구별되는 **호출할 수 있는 객체**입니다.\r\n\r\n작성할 수 있는 형태는 다음과 같습니다.\r\n\r\n* 함수 선언문(function declaration)\r\n* 함수 표현식(function expression)\r\n* Function 생성자 함수\r\n* 화살표 함수 (ES6) (arrow function)\r\n\r\n이 밖에도 약식 메소드 정의나 제너레이터 함수가 있지만 이후에 살펴보도록 하겠습니다.\r\n\r\n### 함수의 형태\r\n\r\n함수를 작성할 때의 구성요소를 알아보겠습니다.\r\n\r\n* 함수명\r\n  * 식별자 명명 규칙을 준수해야 합니다.\r\n  * 함수 이름은 생략 가능합니다. (함수명이 있는 함수는 기명함수, 없는 함수는 익명함수)\r\n* 매개변수\r\n  * 함수 내부로 전달할 변수입니다.\r\n  * 0개 이상을 작성할 수 있습니다.\r\n  * **순서**가 중요합니다. (첫 번째 매개변수를 비우고 두 번째 매개변수를 전달할 수 없습니다.)\r\n  * 식별자 명명 규칙을 준수해야 합니다.\r\n* 함수몸통(body)\r\n  * 함수를 호출했을 때 동작할 문들을 작성합니다.\r\n\r\n가장 기본적인 형태인 함수 선언문부터 알아보겠습니다.\r\n\r\n### 함수 선언문\r\n\r\n```javascript\r\nfunction add(x, y) {\r\n  return x + y\r\n}\r\n```\r\n\r\n위와 같은 형태를 띄고 있습니다.\r\n\r\n`function` 키워드로 함수를 작성한다고 명시하고, 함수명을 입력합니다. 함수 선언문에서는 함수의 이름을 생략할 수 없습니다.\r\n\r\n#### return\r\n\r\n함수 선언문은 `return`이 있는 형태와 없는 형태로 구분할 수 있습니다.\r\n\r\n먼저 `return`은 키워드 뜻 그대로 **돌려준다**는 의미입니다. 자바스크립트의 함수는 기본적으로 리턴 값을 명시하지 않으면 `undefined` 를 리턴합니다.\r\n\r\n```javascript\r\nfunction add(x, y) {\r\n  return x + y\r\n}\r\n\r\n// 함수의 정보 확인 가능\r\nconsole.log(add) // ƒ add(x, y) { return x+y }\r\nconsole.dir(add) // arguments, caller, length, name, prototype 확인 가능\r\n\r\n// 값으로 평가\r\nconsole.log(add(1, 2)) // 3\r\n```\r\n\r\n`add` 함수에 인자(arguments)를 넣으니 return 된 값이 있음을 확인할 수 있습니다. \r\n\r\n분명 함수를 호출했는데, 값이 콘솔에 기록됩니다. 이것은 자바스크립트 함수의 특징인데요.   \r\n자바스크립트에서 함수는 **값의 성질을 갖는 객체**입니다.\r\n\r\nreturn이 없는 함수 선언문도 살펴보겠습니다.\r\n\r\n```javascript\r\nlet result = 0;\r\n\r\nfunction addOnResult(x, y) {\r\n  result = x + y;\r\n}\r\n\r\nconsole.log(addOnResult(1, 2)) // undefined\r\nconsole.log(result) // 3\r\n```\r\n\r\nreturn이 없고 외부의 변수를 컨트롤할 경우에는 함수는 `undefined`를 되돌려줌을 볼 수 있습니다.\r\n\r\n\r\n### 함수 표현식\r\n\r\n앞서 살펴본 함수 선언문에서 함수는 **문**이기 때문에 변수에 할당할 수 없다고 생각할 수 있습니다. 하지만 함수는 또한 **값처럼 사용할 수 있는 객체** 이기 때문에 변수에 할당해 사용할 수도 있습니다.\r\n\r\n```javascript\r\nconst add = function(x, y) {\r\n  return x + y\r\n}\r\n```\r\n\r\n이렇게 표현식으로 작성하게 되면 함수명으로 접근해 함수를 호출하는 것이 아니라, 변수에 변수와 이름이 같은 함수를 하나 생성한 것으로 바라봅니다.\r\n\r\n`const add`는 곧 `function add(x, y) {...}`를 할당한 것과 같은 것이죠.\r\n\r\n그렇기에 함수 표현식을 작성할 때 이름이 있는 함수(기명함수)로 작성하지 않고 함수명을 생략하는 것이 일반적입니다.\r\n\r\n다음과 같은 사례가 발생할 수 있기 때문입니다.\r\n\r\n\r\n```javascript\r\nconst foo = function bar(x) {\r\n  return x + 1;\r\n}\r\n\r\nconsole.log(foo(5)) // 6\r\nconsole.log(bar(5)) // ReferenceError: bar is not defined\r\n\r\n// foo 내부에서만 접근할 수 있는 이름.\r\nconsole.dir(foo) // name: \"bar\", length: 1, arguments: null, caller: null\r\n```\r\n<br/>\r\n\r\n#### 함수 선언문과 함수 표현식의 차이\r\n\r\n함수 선언문으로 정의한 함수는 **호이스팅**됩니다. 반면 표현식은 불가능합니다. 각각의 생성 시점이 다르기 때문입니다. \r\n\r\n표현식은 **변수 호이스팅**으로 취급됩니다.\r\n\r\n<br/>\r\n\r\n### 생성자 함수\r\n\r\n생성자 함수로 함수를 생성하는 것은 일반적이지 않은 방식입니다. 위에서 살펴본 함수 선언문, 함수 표현식으로 관리되는 함수와는 다른 동작 방식을 가지고, 클로저를 지원하지 않습니다.\r\n\r\n```javascript\r\nconst add = new Function('x', 'y', 'return x+y');\r\n```\r\n\r\n형태만 보고 넘어갑시다.\r\n\r\n<br/>\r\n\r\n### 화살표 함수(ES6)\r\n\r\nES6 문법부터 도입된 화살표 함수입니다. `function` 키워드 대신 `=>` 화살표를 사용해 축약된 표현으로 함수를 작성할 수 있습니다.\r\n\r\n```javascript\r\nconst add = (x, y) => x + y;\r\n\r\nconsole.dir(add) // length: 2, name: \"add\"\r\n```\r\n\r\n다른 함수보다 좀더 간략하게 보여지나요?\r\n\r\n화살표 함수는 위 코드에서 볼 수 있듯 항상 익명함수로 작성합니다. \r\n\r\n다른 함수 정의 방법과 다른 점은 `console.dir`로 확인했을 때 prototype과 arguments 가 없는 것을 확인할 수 있습니다. \r\n\r\n화살표 함수는 추후에 어떤 방식으로 작동하는지 보다 자세히 알아보겠습니다.\r\n\r\n<br/>\r\n\r\n다음 글에서는 함수를 사용하는 다양한 방법을 알아보겠습니다.\r\n\r\n◾ [얕은 복사와 깊은 복사](/tech/let-me-know-js-a-bit-shallow-copy-deep-copy) 👈 이전 글 보기\r\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98%EB%9E%80\">함수란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%99%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\">왜 함수를 사용할까?</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">함수 작성하기</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%ED%98%95%ED%83%9C\">함수의 형태</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8\">함수 선언문</a></p>\n<ul>\n<li><a href=\"#return\">return</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D\">함수 표현식</a></p>\n<ul>\n<li><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8%EA%B3%BC-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EC%B0%A8%EC%9D%B4\">함수 선언문과 함수 표현식의 차이</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\">생성자 함수</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98es6\">화살표 함수(ES6)</a></p>\n</li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/let-me-know-js-a-bit-function"}},"staticQueryHashes":["2665612806"]}