{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/let-me-know-js-a-bit-js-value-expression-statement","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/let-me-know-js-a-bit-js-value-expression-statement","tags":["쫌만알자"],"date":"2022-09-21","img":"https://user-images.githubusercontent.com/76241233/177932893-5a504b26-12e4-4ade-b1ce-1951d072ba82.jpg","title":"쫌만알자! (9) - 값, 식, 문"},"excerpt":"값, 식, 문 값을 할당한다 라는 말을 이전 글에서 자주 사용했습니다. 값은 무엇일까요? 자바스크립트 뿐 아니라 값은 프로그래밍 전반에서 사용하는 용어입니다. 값(value)과 식(expression), 문(statement…","html":"<h2 id=\"값-식-문\" style=\"position:relative;\">값, 식, 문<a href=\"#%EA%B0%92-%EC%8B%9D-%EB%AC%B8\" aria-label=\"값 식 문 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><strong>값을 할당한다</strong> 라는 말을 이전 글에서 자주 사용했습니다.</p>\n<p>값은 무엇일까요? 자바스크립트 뿐 아니라 값은 프로그래밍 전반에서 사용하는 용어입니다.</p>\n<p>값(value)과 식(expression), 문(statement)의 차이에 대해서 알아봅시다.</p>\n<h3 id=\"값\" style=\"position:relative;\">값<a href=\"#%EA%B0%92\" aria-label=\"값 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>먼저 값부터 알아봅니다.</p>\n<p>값은 식(=표현식, expression)이 평가되고 생성된 결과<strong>값</strong>입니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">10 + 100 // 110</code>\n        </deckgo-highlight-code>\n<p>식이 평가되어 값이 생성되었습니다.</p>\n<p>변수에 할당해 볼까요?</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let num = 10 + 100</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">10 + 100</code>이라는 식이 평가되어 <code class=\"language-text\">110</code>이라는 값이 할당됩니다.</p>\n<hr>\n<br/>\n<h3 id=\"표현식\" style=\"position:relative;\">표현식<a href=\"#%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"표현식 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>표현식은 값으로 여겨지는 문(statement)입니다.</p>\n<p>표현식이 평가되면 새로운 값을 만들거나 혹은 기존의 값을 참조합니다. 이런 연산과정을 **평가(evaluate)**라고 합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let valueNum = 10 // 선언/할당문\r\nlet expressionNum = 10 + 10 // 표현식, 선언/할당문\r\n\r\nvalueNum * 10 // 표현식\r\nvalueNum - 100 // 표현식\r\n\r\nconsole.log(valueNum) // 10\r\nconsole.log(expressionNum) // 20</code>\n        </deckgo-highlight-code>\n<p>위 <code class=\"language-text\">valueNum</code> 변수는 아무리 표현식을 작성한다 하더라도 값에 할당하지 않았기 때문에 여전히 처음 할당된 값인 <code class=\"language-text\">10</code>인 것을 볼 수 있습니다. 변수 식별자를 참조하는 것은 값을 생성하진 않지만 값을 평가하므로 <code class=\"language-text\">value * 10</code>은 표현식입니다.</p>\n<p>반면 <code class=\"language-text\">expressionNum</code>은 <strong>표현식이 평가된 결과</strong>가 할당되어 <code class=\"language-text\">20</code>이라는 값이 반영되었습니다.</p>\n<p>따라서 식이란, <strong>값으로 평가될 수 있는 모든 문</strong>입니다.</p>\n<p>값으로 평가된다는 말을 다시 한 번 살펴봅시다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">1 + 2 == 3 // true</code>\n        </deckgo-highlight-code>\n<p>좌항 <code class=\"language-text\">1+2</code>는 표현식인데, 값과 동등하다고 결과가 나옵니다. 표현식과 표현식이 평가된 결과(=값)은 <strong>동치</strong>입니다.</p>\n<p>이 말은 값이 위치할 수 있는 곳에 표현식이 있을 수 있다는 뜻입니다.</p>\n<hr>\n<br/>\n<h3 id=\"문\" style=\"position:relative;\">문<a href=\"#%EB%AC%B8\" aria-label=\"문 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>문은 기본적으로 어떤 태스크를 수행합니다. 프로그램 실행의 최소 단위죠. 무언가를 실행하라고 컴퓨터에게 지시하기 때문에 <strong>명령문</strong>이라고도 불립니다.</p>\n<p>문들이 모여 프고그램이 되고, 이 문을 잘 작성하고 나열하는 것이 프로그래밍이 됩니다.</p>\n<p>자바스크립트의 문은 앞서 살펴본 예약어에 나온 것들이 있습니다. 종류는 선언문, 할당문, 조건문, 반복문 등으로 구분할 수 있습니다.</p>\n<p>다시 한번 살펴봅시다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 선언문\r\nlet num\r\n\r\n// 할당문\r\nnum = 100\r\n\r\n// 함수 선언문\r\nfunction foo() {}\r\n\r\n// 조건문\r\nif (num &gt; 1) {\r\n  console.log(&quot;1보다 큰 수!&quot;)\r\n}\r\n\r\n// 반복문\r\nfor (let i = 0; i &lt; num; i++) {\r\n  console.log(i)\r\n}</code>\n        </deckgo-highlight-code>\n<p>이 외에도</p>\n<ul>\n<li>do ... while</li>\n<li>switch ~ case ... default</li>\n<li>debugger</li>\n</ul>\n<p>이런 문들이 있습니다.</p>\n<hr>\n<br/>\n<h2 id=\"문과-표현식의-구분\" style=\"position:relative;\">문과 표현식의 구분<a href=\"#%EB%AC%B8%EA%B3%BC-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EA%B5%AC%EB%B6%84\" aria-label=\"문과 표현식의 구분 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>표현식과 문의 구분이 애매모호하다고 느끼셨을 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let num // 선언문. 값으로 평가될 수 없음\r\n\r\nnum = 1 + 1 // 값으로 표현되는 표현식이면서도 할당문</code>\n        </deckgo-highlight-code>\n<p>위 예제처럼 표현식이 문의 일부가 될 수도 있고, 표현식이 문 자체일 수도 있기 때문입니다.</p>\n<p>그렇다면 어떻게 이 둘을 구분하면 좋을까요?</p>\n<p>답은 간단합니다. <strong>표현식은 값으로 평가</strong>될 수 있다 하였죠? 변수에 할당해보면 됩니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const alwaysTrue = true;\r\nlet foo = if(alwaysTrue) {console.log(&#39;HI&#39;)}; // Uncaught SyntaxError: Unexpected token &#39;if&#39;</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">if</code>는 문이기 때문에 변수에 할당할 수 없습니다.</p>\n<p>에러 메시지를 보면 <code class=\"language-text\">Uncaught SyntaxError: Unexpected token 'if'</code> 라고 뜨는데요. 여기서 <strong>token</strong>이라는 게 문을 구성하는 최소단위 요소입니다.</p>\n<p><code class=\"language-text\">let score = 10 + 20</code>이라는 문에서는 <code class=\"language-text\">let</code>, <code class=\"language-text\">score</code>, <code class=\"language-text\">=</code>, <code class=\"language-text\">10</code>, <code class=\"language-text\">+</code>, <code class=\"language-text\">20</code>이 각각의 토큰입니다.</p>\n<p>또 다른 예제를 살펴볼게요.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 선언문\r\nlet x\r\n\r\nx = 100 // 할당문이자 표현식</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">x = 100</code>은 표현식입니다. 하지만 할당되는 <strong>값</strong>이죠. 따라서 값처럼 사용할 수 있습니다.</p>\n<p>심지어 이런 모습도 가능합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var x = (y = 10)\r\n\r\nconsole.log(x) // 10\r\nconsole.log(y) // 10</code>\n        </deckgo-highlight-code>\n<p>도대체 무슨 코드인가 싶죠? 이 코드는 아래코드의 축약형입니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">y = 10 // y는 글로벌 변수\r\nvar x = y</code>\n        </deckgo-highlight-code>\n<p>다만 변수를 이런 식으로 할당하는 건 글로벌 변수가 되는 등의 위험이 존재하고, 또한 읽기 쉬운 코드가 아니기에 추천하진 않습니다.</p>\n<p>이 밖에도 <strong>함수 표현식</strong>이 있습니다. 함수는 함수 선언식과 함수 표현식으로 나뉘는데요.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 함수 선언식\r\nfunction foo() {\r\n  //...\r\n}\r\n\r\n// 함수 표현식\r\nlet bar = function () {\r\n  //...\r\n}</code>\n        </deckgo-highlight-code>\n<p>이 둘의 차이는 <strong>호이스팅</strong>입니다. 선언식은 호이스팅에 영향을 받지만, 표현식은 영향받지 않습니다.<br>\n함수에 대해서는 이후에 좀더 자세히 살펴보도록 하겠습니다.</p>\n<p>다음 글에서는 자바스크립트의 연산자에 대해 알아보도록 하겠습니다.</p>\n<p>◾ <a href=\"/tech/let-me-know-js-a-bit-js-variable-naming\">변수 명명 규칙</a> 👈 이전 글 보기<br>\n◾ <a href=\"/tech/let-me-know-js-a-bit-js-value-expression-statement\">자바스크립트 연산자</a> 👈 다음 글 보기</p>","internal":{"content":"\r\n## 값, 식, 문\r\n\r\n**값을 할당한다** 라는 말을 이전 글에서 자주 사용했습니다.\r\n\r\n값은 무엇일까요? 자바스크립트 뿐 아니라 값은 프로그래밍 전반에서 사용하는 용어입니다.\r\n\r\n값(value)과 식(expression), 문(statement)의 차이에 대해서 알아봅시다.\r\n\r\n### 값\r\n\r\n먼저 값부터 알아봅니다.\r\n\r\n값은 식(=표현식, expression)이 평가되고 생성된 결과**값**입니다.\r\n\r\n```javascript\r\n10 + 100 // 110\r\n```\r\n\r\n식이 평가되어 값이 생성되었습니다.\r\n\r\n변수에 할당해 볼까요?\r\n\r\n```javascript\r\nlet num = 10 + 100\r\n```\r\n\r\n`10 + 100`이라는 식이 평가되어 `110`이라는 값이 할당됩니다.\r\n\r\n---\r\n\r\n<br/>\r\n\r\n### 표현식\r\n\r\n표현식은 값으로 여겨지는 문(statement)입니다.\r\n\r\n표현식이 평가되면 새로운 값을 만들거나 혹은 기존의 값을 참조합니다. 이런 연산과정을 **평가(evaluate)**라고 합니다.\r\n\r\n```javascript\r\nlet valueNum = 10 // 선언/할당문\r\nlet expressionNum = 10 + 10 // 표현식, 선언/할당문\r\n\r\nvalueNum * 10 // 표현식\r\nvalueNum - 100 // 표현식\r\n\r\nconsole.log(valueNum) // 10\r\nconsole.log(expressionNum) // 20\r\n```\r\n\r\n위 `valueNum` 변수는 아무리 표현식을 작성한다 하더라도 값에 할당하지 않았기 때문에 여전히 처음 할당된 값인 `10`인 것을 볼 수 있습니다. 변수 식별자를 참조하는 것은 값을 생성하진 않지만 값을 평가하므로 `value * 10`은 표현식입니다.\r\n\r\n반면 `expressionNum`은 **표현식이 평가된 결과**가 할당되어 `20`이라는 값이 반영되었습니다.\r\n\r\n따라서 식이란, **값으로 평가될 수 있는 모든 문**입니다.\r\n\r\n값으로 평가된다는 말을 다시 한 번 살펴봅시다.\r\n\r\n```javascript\r\n1 + 2 == 3 // true\r\n```\r\n\r\n좌항 `1+2`는 표현식인데, 값과 동등하다고 결과가 나옵니다. 표현식과 표현식이 평가된 결과(=값)은 **동치**입니다.\r\n\r\n이 말은 값이 위치할 수 있는 곳에 표현식이 있을 수 있다는 뜻입니다.\r\n\r\n---\r\n\r\n<br/>\r\n\r\n### 문\r\n\r\n문은 기본적으로 어떤 태스크를 수행합니다. 프로그램 실행의 최소 단위죠. 무언가를 실행하라고 컴퓨터에게 지시하기 때문에 **명령문**이라고도 불립니다.\r\n\r\n문들이 모여 프고그램이 되고, 이 문을 잘 작성하고 나열하는 것이 프로그래밍이 됩니다.\r\n\r\n자바스크립트의 문은 앞서 살펴본 예약어에 나온 것들이 있습니다. 종류는 선언문, 할당문, 조건문, 반복문 등으로 구분할 수 있습니다.\r\n\r\n다시 한번 살펴봅시다.\r\n\r\n```javascript\r\n// 선언문\r\nlet num\r\n\r\n// 할당문\r\nnum = 100\r\n\r\n// 함수 선언문\r\nfunction foo() {}\r\n\r\n// 조건문\r\nif (num > 1) {\r\n  console.log(\"1보다 큰 수!\")\r\n}\r\n\r\n// 반복문\r\nfor (let i = 0; i < num; i++) {\r\n  console.log(i)\r\n}\r\n```\r\n\r\n이 외에도\r\n\r\n- do ... while\r\n- switch ~ case ... default\r\n- debugger\r\n\r\n이런 문들이 있습니다.\r\n\r\n---\r\n\r\n<br/>\r\n\r\n## 문과 표현식의 구분\r\n\r\n표현식과 문의 구분이 애매모호하다고 느끼셨을 수 있습니다.\r\n\r\n```javascript\r\nlet num // 선언문. 값으로 평가될 수 없음\r\n\r\nnum = 1 + 1 // 값으로 표현되는 표현식이면서도 할당문\r\n```\r\n\r\n위 예제처럼 표현식이 문의 일부가 될 수도 있고, 표현식이 문 자체일 수도 있기 때문입니다.\r\n\r\n그렇다면 어떻게 이 둘을 구분하면 좋을까요?\r\n\r\n답은 간단합니다. **표현식은 값으로 평가**될 수 있다 하였죠? 변수에 할당해보면 됩니다.\r\n\r\n```javascript\r\nconst alwaysTrue = true;\r\nlet foo = if(alwaysTrue) {console.log('HI')}; // Uncaught SyntaxError: Unexpected token 'if'\r\n```\r\n\r\n`if`는 문이기 때문에 변수에 할당할 수 없습니다.\r\n\r\n에러 메시지를 보면 `Uncaught SyntaxError: Unexpected token 'if'` 라고 뜨는데요. 여기서 **token**이라는 게 문을 구성하는 최소단위 요소입니다.\r\n\r\n`let score = 10 + 20`이라는 문에서는 `let`, `score`, `=`, `10`, `+`, `20`이 각각의 토큰입니다.\r\n\r\n또 다른 예제를 살펴볼게요.\r\n\r\n```javascript\r\n// 선언문\r\nlet x\r\n\r\nx = 100 // 할당문이자 표현식\r\n```\r\n\r\n`x = 100`은 표현식입니다. 하지만 할당되는 **값**이죠. 따라서 값처럼 사용할 수 있습니다.\r\n\r\n심지어 이런 모습도 가능합니다.\r\n\r\n```javascript\r\nvar x = (y = 10)\r\n\r\nconsole.log(x) // 10\r\nconsole.log(y) // 10\r\n```\r\n\r\n도대체 무슨 코드인가 싶죠? 이 코드는 아래코드의 축약형입니다.\r\n\r\n```javascript\r\ny = 10 // y는 글로벌 변수\r\nvar x = y\r\n```\r\n\r\n다만 변수를 이런 식으로 할당하는 건 글로벌 변수가 되는 등의 위험이 존재하고, 또한 읽기 쉬운 코드가 아니기에 추천하진 않습니다.\r\n\r\n이 밖에도 **함수 표현식**이 있습니다. 함수는 함수 선언식과 함수 표현식으로 나뉘는데요.\r\n\r\n```javascript\r\n// 함수 선언식\r\nfunction foo() {\r\n  //...\r\n}\r\n\r\n// 함수 표현식\r\nlet bar = function () {\r\n  //...\r\n}\r\n```\r\n\r\n이 둘의 차이는 **호이스팅**입니다. 선언식은 호이스팅에 영향을 받지만, 표현식은 영향받지 않습니다.  \r\n함수에 대해서는 이후에 좀더 자세히 살펴보도록 하겠습니다.\r\n\r\n다음 글에서는 자바스크립트의 연산자에 대해 알아보도록 하겠습니다.\r\n\r\n◾ [변수 명명 규칙](/tech/let-me-know-js-a-bit-js-variable-naming) 👈 이전 글 보기  \r\n◾ [자바스크립트 연산자](/tech/let-me-know-js-a-bit-js-value-expression-statement) 👈 다음 글 보기\r\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B0%92-%EC%8B%9D-%EB%AC%B8\">값, 식, 문</a></p>\n<ul>\n<li><a href=\"#%EA%B0%92\">값</a></li>\n<li><a href=\"#%ED%91%9C%ED%98%84%EC%8B%9D\">표현식</a></li>\n<li><a href=\"#%EB%AC%B8\">문</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EA%B3%BC-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EA%B5%AC%EB%B6%84\">문과 표현식의 구분</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/let-me-know-js-a-bit-js-value-expression-statement"}},"staticQueryHashes":["2665612806"]}