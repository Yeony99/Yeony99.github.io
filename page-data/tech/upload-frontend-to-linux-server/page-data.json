{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/upload-frontend-to-linux-server","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/upload-frontend-to-linux-server","tags":["Linux"],"date":"2023-03-15","img":null,"title":"Linux 서버에 frontend 파일 올리기"},"excerpt":"리눅스를 건들일 일이 거의 없었는데, 이번에 프론트엔드 파일을 올려보게 되었다. 정리 겸 작성하는 글이 될 듯 하다. 이미 리눅스 서버와 계정이 있다는 전제다. ssh와 scp(sftp)를 사용한다. ssh란? Secure shell…","html":"<p>리눅스를 건들일 일이 거의 없었는데, 이번에 프론트엔드 파일을 올려보게 되었다.</p>\n<p>정리 겸 작성하는 글이 될 듯 하다.<br>\n이미 리눅스 서버와 계정이 있다는 전제다. ssh와 scp(sftp)를 사용한다.</p>\n<h2 id=\"ssh란\" style=\"position:relative;\">ssh란?<a href=\"#ssh%EB%9E%80\" aria-label=\"ssh란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Secure shell의 약자로, 암호화 방식을 지원해 강력한 보안성이 있는 프로토콜이다.</p>\n<h2 id=\"계정-접속\" style=\"position:relative;\">계정 접속<a href=\"#%EA%B3%84%EC%A0%95-%EC%A0%91%EC%86%8D\" aria-label=\"계정 접속 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<deckgo-highlight-code language=\"powershell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">cd ./[올릴 파일이 있는 디렉토리]</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"powershell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">ssh [USER]@[HOST]</code>\n        </deckgo-highlight-code>\n<p>만약 port가 있다면</p>\n<deckgo-highlight-code language=\"powershell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">ssh [USER]@[HOST] -p [PORT]</code>\n        </deckgo-highlight-code>\n<p>이렇게 접속한다.</p>\n<ul>\n<li>USER: 접속할 리눅스 사용자</li>\n<li>HOST: 네트워크 상으로 접근 가능한 호스트 혹은 IP</li>\n<li>PORT: 리눅스 서버의 SSH 포트. 22번을 사용할 경우 -p 옵션 생략 가능</li>\n</ul>\n<p>패스워드를 입력한 후, 리눅스 shell이 뜨면 정상적으로 접속된 것이다.</p>\n<deckgo-highlight-code language=\"powershell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">cat /etc/lsb-release\r\n\r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=20.04\r\nDISTRIB_CODENAME=focal\r\nDISTRIB_DESCRIPTION=&quot;Ubuntu 20.04.5 LTS&quot;</code>\n        </deckgo-highlight-code>\n<p>현재 작업 환경을 확인할 수 있다.</p>\n<h2 id=\"scp와-sftp\" style=\"position:relative;\">SCP와 SFTP<a href=\"#scp%EC%99%80-sftp\" aria-label=\"scp와 sftp permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>SCP로 파일 업로드를 시도하다 자꾸 업로드가 안되어서, 나는 결국 SFTP로 처리했다. (scp 명령어를 쓰니 <code class=\"language-text\">No such file or directory</code> 오류가 자꾸 났다.)<br>\n둘다 파일 전송인데 무슨 차이가 있을까 찾아보았다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>SCP</th>\n<th>SFTP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>뜻</td>\n<td>Secure Copy</td>\n<td>Secure File Transfer Protocol</td>\n</tr>\n<tr>\n<td>속도</td>\n<td>SFTP보다 빠르다</td>\n<td>패킷 암호화 및 일치를 기다려야 해 SCP보다 느림</td>\n</tr>\n<tr>\n<td>파일 전송 용량</td>\n<td>4GB 이상 전송 불가</td>\n<td>대용량 전송 가능</td>\n</tr>\n<tr>\n<td>불완전 전송 재개</td>\n<td>불가능</td>\n<td>가능</td>\n</tr>\n</tbody>\n</table>\n<p>대략적으로 SFTP가 SCP보다 더 많은 기능을 제공한다고 보면 되겠다.</p>\n<h2 id=\"업로드\" style=\"position:relative;\">업로드<a href=\"#%EC%97%85%EB%A1%9C%EB%93%9C\" aria-label=\"업로드 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>나는 SCP에서 에러가 나서 SFTP로 처리했지만, <code class=\"language-text\">scp</code> 명령어는 이렇게 작성하면 된다.</p>\n<h3 id=\"scp\" style=\"position:relative;\">scp<a href=\"#scp\" aria-label=\"scp permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"powershell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">ssh [USER]@[HOST]\r\n\r\n# 접속 후\r\nmkdir [파일을 넣을 디렉토리]\r\nscp -r [프론트엔드 디렉토리명] [USER]@[HOST]:~/[파일 넣을 디렉토리]</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">mkdir</code> 명령어로 파일 넣을 디렉토리를 만든 후, scp 명령어로 컴퓨터에 있는 디렉토리를 복사해 넣는다.<br>\n<code class=\"language-text\">-r</code> 옵션을 사용하면 보내고자 하는 디렉토리의 하위 폴더와 파일까지 동시에 전송이 가능하다.</p>\n<h3 id=\"sftp\" style=\"position:relative;\">sftp<a href=\"#sftp\" aria-label=\"sftp permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>sftp 에서는 <code class=\"language-text\">put</code> 명령어를 사용했다. 원격 호스트의 working directory에 이름이 같은 directory가 없으면 오류가 발생한다. 따라서 <code class=\"language-text\">mkdir</code> 명령어로 동일한 이름을 가진 디렉토리를 생성한다.</p>\n<p>scp와 마찬가지로 <code class=\"language-text\">-r</code> 옵션으로 하위 디렉토리까지 복사되도록 한다.</p>\n<deckgo-highlight-code language=\"powershell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">sftp [USER]@[HOST]\r\n\r\n# 접속 후\r\nmkdir [파일 넣을 디렉토리]\r\nput -r [프론트엔드 디렉토리명]</code>\n        </deckgo-highlight-code>\n<h3 id=\"node-설치\" style=\"position:relative;\">Node 설치<a href=\"#node-%EC%84%A4%EC%B9%98\" aria-label=\"node 설치 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>프론트엔드에서 사용한 Node.js 버전에 맞춰 setup_ 뒤의 버전을 작성한다.</p>\n<p>버전이 뭐가 있는지는 <a href=\"https://github.com/nodesource/distributions/tree/master/deb\">nodesource/distributions</a> 참고</p>\n<deckgo-highlight-code language=\"powershell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">curl --silent --location https://rpm.nodesource.com/setup_[x].x | sudo bash -\r\n\r\nnode -v</code>\n        </deckgo-highlight-code>\n<p>혹은 이렇게도 설치가 가능한 듯 하다.</p>\n<deckgo-highlight-code language=\"powershell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">wget https://nodejs.org/dist/v[버전]/node-v[버전]-linux-x64.tar.gz\r\n\r\ntar -xvf node-v[버전]-linux-x64.tar.gz</code>\n        </deckgo-highlight-code>\n<h3 id=\"yarn-설치\" style=\"position:relative;\">yarn 설치<a href=\"#yarn-%EC%84%A4%EC%B9%98\" aria-label=\"yarn 설치 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>나는 패키지 매니저로 yarn을 사용하고 있어 추가로 yarn 도 설치했다.</p>\n<deckgo-highlight-code language=\"powershell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">sudo npm install -g yarn</code>\n        </deckgo-highlight-code>\n<h3 id=\"백그라운드-실행-nohup\" style=\"position:relative;\">백그라운드 실행 (nohup)<a href=\"#%EB%B0%B1%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C-%EC%8B%A4%ED%96%89-nohup\" aria-label=\"백그라운드 실행 nohup permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>서버가 있으면 프론트엔드 프로젝트의 config 파일에 기입한 PORT로 보일 것이다.</p>\n<p>이 프로젝트는 nuxt를 사용했는데, <code class=\"language-text\">nuxt.config.js</code>에는 이렇게 명시했다.</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">//\r\nserver: {\r\n    host: &quot;0.0.0.0&quot;,\r\n    port: 3000\r\n},\r\n//</code>\n        </deckgo-highlight-code>\n<p>host를 주지 않으면 localhost로 떠버리니 주의할 것.</p>\n<p><code class=\"language-text\">yarn dev</code>나 <code class=\"language-text\">yarn start</code>로 서버를 띄웠는데 엥... 터미널 종료하니 서버에서도 종료되는거다.<br>\n그래서 동료분께 여쭤봤더니, 리눅스의 <code class=\"language-text\">nohup</code> 명령어가 있다고 하셨다.</p>\n<deckgo-highlight-code language=\"powershell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">nohup yarn dev &amp;\r\ndisown</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">nohup</code> 은 <strong>no hang up</strong> 의 약자로 종료하지 말라는 의미다. 터미널 세션 연결을 종료해도 실행시킨 프로그램이 계속 유지된다.</p>\n<p>+) disown까지 입력해야 완전히 터미널 세션에서 분리가 되어 실행된다.</p>\n<h2 id=\"reference\" style=\"position:relative;\">Reference<a href=\"#reference\" aria-label=\"reference permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"https://cloudinfrastructureservices.co.uk/sftp-vs-scp-whats-the-difference-for-secure-file-sharing/\">SFTP vs SCP – What’s the Difference for Secure File Sharing?</a><br>\n<a href=\"https://www.msp360.com/resources/blog/sftp-vs-ftps/\">SFTP vs. FTPS Comparison: Which One Is Better?</a><br>\n<a href=\"https://www.hostwinds.kr/tutorials/how-to-install-node-js-on-linux\">Linux에 Node.js를 설치하는 방법</a><br>\n<a href=\"https://joonyon.tistory.com/entry/%EC%89%BD%EA%B2%8C-%EC%84%A4%EB%AA%85%ED%95%9C-nohup-%EA%B3%BC-%EB%B0%B1%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%82%AC%EC%9A%A9%EB%B2%95\">쉽게 설명한 nohup과 &#x26;(백그라운드) 명령어 사용법</a></p>","internal":{"content":"\r\n리눅스를 건들일 일이 거의 없었는데, 이번에 프론트엔드 파일을 올려보게 되었다.\r\n\r\n정리 겸 작성하는 글이 될 듯 하다.   \r\n이미 리눅스 서버와 계정이 있다는 전제다. ssh와 scp(sftp)를 사용한다.\r\n\r\n## ssh란?\r\n\r\nSecure shell의 약자로, 암호화 방식을 지원해 강력한 보안성이 있는 프로토콜이다.\r\n\r\n## 계정 접속\r\n\r\n```powershell\r\ncd ./[올릴 파일이 있는 디렉토리]\r\n```\r\n\r\n```powershell\r\nssh [USER]@[HOST]\r\n```\r\n\r\n만약 port가 있다면\r\n\r\n```powershell\r\nssh [USER]@[HOST] -p [PORT]\r\n```\r\n\r\n이렇게 접속한다.\r\n\r\n* USER: 접속할 리눅스 사용자\r\n* HOST: 네트워크 상으로 접근 가능한 호스트 혹은 IP\r\n* PORT: 리눅스 서버의 SSH 포트. 22번을 사용할 경우 -p 옵션 생략 가능\r\n\r\n패스워드를 입력한 후, 리눅스 shell이 뜨면 정상적으로 접속된 것이다.\r\n\r\n```powershell\r\ncat /etc/lsb-release\r\n\r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=20.04\r\nDISTRIB_CODENAME=focal\r\nDISTRIB_DESCRIPTION=\"Ubuntu 20.04.5 LTS\"\r\n```\r\n\r\n현재 작업 환경을 확인할 수 있다.\r\n\r\n## SCP와 SFTP \r\n\r\nSCP로 파일 업로드를 시도하다 자꾸 업로드가 안되어서, 나는 결국 SFTP로 처리했다. (scp 명령어를 쓰니 `No such file or directory` 오류가 자꾸 났다.)   \r\n둘다 파일 전송인데 무슨 차이가 있을까 찾아보았다.\r\n\r\n|   |SCP|SFTP|\r\n|---|---|---|\r\n|뜻| Secure Copy| Secure File Transfer Protocol|\r\n|속도| SFTP보다 빠르다 | 패킷 암호화 및 일치를 기다려야 해 SCP보다 느림|\r\n|파일 전송 용량| 4GB 이상 전송 불가 | 대용량 전송 가능 |\r\n|불완전 전송 재개| 불가능 | 가능|\r\n\r\n대략적으로 SFTP가 SCP보다 더 많은 기능을 제공한다고 보면 되겠다.\r\n\r\n\r\n## 업로드\r\n\r\n나는 SCP에서 에러가 나서 SFTP로 처리했지만, `scp` 명령어는 이렇게 작성하면 된다.\r\n\r\n### scp \r\n\r\n```powershell\r\nssh [USER]@[HOST]\r\n\r\n# 접속 후\r\nmkdir [파일을 넣을 디렉토리]\r\nscp -r [프론트엔드 디렉토리명] [USER]@[HOST]:~/[파일 넣을 디렉토리]\r\n```\r\n\r\n`mkdir` 명령어로 파일 넣을 디렉토리를 만든 후, scp 명령어로 컴퓨터에 있는 디렉토리를 복사해 넣는다.   \r\n`-r` 옵션을 사용하면 보내고자 하는 디렉토리의 하위 폴더와 파일까지 동시에 전송이 가능하다.\r\n\r\n\r\n### sftp\r\n\r\nsftp 에서는 `put` 명령어를 사용했다. 원격 호스트의 working directory에 이름이 같은 directory가 없으면 오류가 발생한다. 따라서 `mkdir` 명령어로 동일한 이름을 가진 디렉토리를 생성한다.\r\n\r\nscp와 마찬가지로 `-r` 옵션으로 하위 디렉토리까지 복사되도록 한다.\r\n\r\n```powershell\r\nsftp [USER]@[HOST]\r\n\r\n# 접속 후\r\nmkdir [파일 넣을 디렉토리]\r\nput -r [프론트엔드 디렉토리명]\r\n```\r\n\r\n\r\n### Node 설치\r\n\r\n프론트엔드에서 사용한 Node.js 버전에 맞춰 setup_ 뒤의 버전을 작성한다.\r\n\r\n버전이 뭐가 있는지는 [nodesource/distributions](https://github.com/nodesource/distributions/tree/master/deb) 참고\r\n\r\n```powershell\r\ncurl --silent --location https://rpm.nodesource.com/setup_[x].x | sudo bash -\r\n\r\nnode -v\r\n```\r\n\r\n혹은 이렇게도 설치가 가능한 듯 하다.\r\n\r\n```powershell\r\nwget https://nodejs.org/dist/v[버전]/node-v[버전]-linux-x64.tar.gz\r\n\r\ntar -xvf node-v[버전]-linux-x64.tar.gz\r\n```\r\n\r\n### yarn 설치\r\n\r\n나는 패키지 매니저로 yarn을 사용하고 있어 추가로 yarn 도 설치했다.\r\n\r\n```powershell\r\nsudo npm install -g yarn\r\n```\r\n\r\n### 백그라운드 실행 (nohup)\r\n\r\n서버가 있으면 프론트엔드 프로젝트의 config 파일에 기입한 PORT로 보일 것이다. \r\n\r\n이 프로젝트는 nuxt를 사용했는데, `nuxt.config.js`에는 이렇게 명시했다.\r\n\r\n```json\r\n//\r\nserver: {\r\n    host: \"0.0.0.0\",\r\n    port: 3000\r\n},\r\n//\r\n```\r\n\r\nhost를 주지 않으면 localhost로 떠버리니 주의할 것.\r\n\r\n`yarn dev`나 `yarn start`로 서버를 띄웠는데 엥... 터미널 종료하니 서버에서도 종료되는거다.   \r\n그래서 동료분께 여쭤봤더니, 리눅스의 `nohup` 명령어가 있다고 하셨다.\r\n\r\n```powershell\r\nnohup yarn dev &\r\ndisown\r\n```\r\n\r\n`nohup` 은 **no hang up** 의 약자로 종료하지 말라는 의미다. 터미널 세션 연결을 종료해도 실행시킨 프로그램이 계속 유지된다.\r\n\r\n+) disown까지 입력해야 완전히 터미널 세션에서 분리가 되어 실행된다.\r\n\r\n\r\n## Reference\r\n\r\n[SFTP vs SCP – What’s the Difference for Secure File Sharing?](https://cloudinfrastructureservices.co.uk/sftp-vs-scp-whats-the-difference-for-secure-file-sharing/)   \r\n[SFTP vs. FTPS Comparison: Which One Is Better?](https://www.msp360.com/resources/blog/sftp-vs-ftps/)    \r\n[Linux에 Node.js를 설치하는 방법](https://www.hostwinds.kr/tutorials/how-to-install-node-js-on-linux)    \r\n[쉽게 설명한 nohup과 &(백그라운드) 명령어 사용법](https://joonyon.tistory.com/entry/%EC%89%BD%EA%B2%8C-%EC%84%A4%EB%AA%85%ED%95%9C-nohup-%EA%B3%BC-%EB%B0%B1%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%82%AC%EC%9A%A9%EB%B2%95)   "},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#ssh%EB%9E%80\">ssh란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B3%84%EC%A0%95-%EC%A0%91%EC%86%8D\">계정 접속</a></p>\n</li>\n<li>\n<p><a href=\"#scp%EC%99%80-sftp\">SCP와 SFTP</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%85%EB%A1%9C%EB%93%9C\">업로드</a></p>\n<ul>\n<li><a href=\"#scp\">scp</a></li>\n<li><a href=\"#sftp\">sftp</a></li>\n<li><a href=\"#node-%EC%84%A4%EC%B9%98\">Node 설치</a></li>\n<li><a href=\"#yarn-%EC%84%A4%EC%B9%98\">yarn 설치</a></li>\n<li><a href=\"#%EB%B0%B1%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C-%EC%8B%A4%ED%96%89-nohup\">백그라운드 실행 (nohup)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/upload-frontend-to-linux-server"}},"staticQueryHashes":["2665612806"]}