{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/tech/flutter-understanding-constraints",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/flutter-understanding-constraints","tags":["스터디 Flutter"],"date":"2022-09-23","img":null,"title":"[Flutter] Constraints 이해하기"},"html":"<h2 id=\"constraints란\" style=\"position:relative;\">Constraints란?<a href=\"#constraints%EB%9E%80\" aria-label=\"constraints란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>어떤 프로그래밍이든 <strong>제약조건</strong>이 있습니다. 실생활에 지켜야 할 법이 있듯이 프로그래밍에서도 규칙을 지키도록 강제해놓은 것이죠.</p>\n<p>Flutter도 마찬가지입니다. 일반적으로 많은 개발자가 가장 먼저 접하는 웹, <code class=\"language-text\">HTML</code>과는 다른 방식으로 움직이기 때문에 다른 Constraints를 가지고 있습니다.</p>\n<br/>\n<hr>\n<h2 id=\"constraints-go-down-sizes-go-up-parent-sets-position\" style=\"position:relative;\">Constraints go down. Sizes go up. Parent sets position.<a href=\"#constraints-go-down-sizes-go-up-parent-sets-position\" aria-label=\"constraints go down sizes go up parent sets position permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Flutter의 레이아웃은 이 규칙을 따라 구성됩니다.</p>\n<h3 id=\"예시\" style=\"position:relative;\">예시<a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol>\n<li>제약(constraints) 범위를 결정하는 것은 부모 위젯</li>\n<li>크기를 결정하는 것은 자식 위젯</li>\n<li>위치를 지정하는 것은 부모 위젯</li>\n</ol>\n<p>이 제약은 <strong>크기</strong> 제약입니다. 크기는 <code class=\"language-text\">width</code>와 <code class=\"language-text\">height</code>의 최소/최대값입니다. 부모 위젯은 이런 크기 제약을 자식에게 넘기는 것입니다. 위젯의 위치를 결정하는 것은 결국 그 위젯이 아니라 위젯의 부모입니다.</p>\n<p><code class=\"language-text\">Container</code>위젯으로 예시를 들어보겠습니다.</p>\n<ul>\n<li>제약조건이 없음</li>\n</ul>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Container(\n  color: Colors.amber,\n)</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/191666561-32625295-1853-43f1-b232-2602f0c69d22.png\" alt=\"Container no-constraints\"></p>\n<p>이렇게 꽉 찬 화면이 만들어집니다. 그럼 Container 위젯의 사이즈를 조정해볼까요?</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Container(\n  color: Colors.amber,\n  height: 100,\n  width: 100,\n);</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/191666561-32625295-1853-43f1-b232-2602f0c69d22.png\" alt=\"Container no-constraints\"></p>\n<p>width와 height를 지정했음에도 변하는 건 없습니다.</p>\n<p>그러면 자식 위젯을 가운데에 위치시키는 <code class=\"language-text\">Center</code> 위젯을 사용해 보겠습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Center(\n  child: Container(\n    color: Colors.amber,\n    height: 100,\n    width: 100,\n));</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/191667508-b884bd2e-9e91-4984-aef7-953d1acee3a7.png\" alt=\"Container with Center\"></p>\n<p>부모의 제약이 생기니 height와 width가 제대로 적용이 된 것을 볼 수 있습니다.</p>\n<p>여기서</p>\n<ol>\n<li><code class=\"language-text\">Center</code> 는 제약을 전체 범위로 주었고</li>\n<li><code class=\"language-text\">Container</code> 는 스스로의 크기를 지정하였으며</li>\n<li><code class=\"language-text\">Center</code> 가 자식인 <code class=\"language-text\">Container</code>의 위치를 지정했음을 볼 수 있습니다.</li>\n</ol>\n<br/>\n<hr>\n<h2 id=\"결론\" style=\"position:relative;\">결론<a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>플러터는 크기 명시가 아닌 제약으로 레이아웃을 결정한다.</li>\n</ul>\n<ol>\n<li>제약(constraints) 범위를 결정하는 것은 부모 위젯</li>\n<li>크기를 결정하는 것은 자식 위젯</li>\n<li>위치를 지정하는 것은 부모 위젯</li>\n</ol>\n<p>◾ <a href=\"/tech/flutter-text-widget\">[Flutter] Text Widget 사용하기</a> 👈 이전 글 보기\n◾ <a href=\"/tech/flutter-use-several-widgets\">[Flutter] 다양한 위젯 사용하기</a> 👈 이전 글 보기</p>","internal":{"content":"\n## Constraints란?\n\n어떤 프로그래밍이든 **제약조건**이 있습니다. 실생활에 지켜야 할 법이 있듯이 프로그래밍에서도 규칙을 지키도록 강제해놓은 것이죠.\n\nFlutter도 마찬가지입니다. 일반적으로 많은 개발자가 가장 먼저 접하는 웹, `HTML`과는 다른 방식으로 움직이기 때문에 다른 Constraints를 가지고 있습니다.\n\n<br/>\n\n---\n\n## Constraints go down. Sizes go up. Parent sets position.\n\nFlutter의 레이아웃은 이 규칙을 따라 구성됩니다.\n\n### 예시\n\n1. 제약(constraints) 범위를 결정하는 것은 부모 위젯\n2. 크기를 결정하는 것은 자식 위젯\n3. 위치를 지정하는 것은 부모 위젯\n\n이 제약은 **크기** 제약입니다. 크기는 `width`와 `height`의 최소/최대값입니다. 부모 위젯은 이런 크기 제약을 자식에게 넘기는 것입니다. 위젯의 위치를 결정하는 것은 결국 그 위젯이 아니라 위젯의 부모입니다.\n\n`Container`위젯으로 예시를 들어보겠습니다.\n\n- 제약조건이 없음\n\n```dart\nContainer(\n  color: Colors.amber,\n)\n```\n\n![Container no-constraints](https://user-images.githubusercontent.com/76241233/191666561-32625295-1853-43f1-b232-2602f0c69d22.png)\n\n이렇게 꽉 찬 화면이 만들어집니다. 그럼 Container 위젯의 사이즈를 조정해볼까요?\n\n```dart\nContainer(\n  color: Colors.amber,\n  height: 100,\n  width: 100,\n);\n```\n\n![Container no-constraints](https://user-images.githubusercontent.com/76241233/191666561-32625295-1853-43f1-b232-2602f0c69d22.png)\n\nwidth와 height를 지정했음에도 변하는 건 없습니다.\n\n그러면 자식 위젯을 가운데에 위치시키는 `Center` 위젯을 사용해 보겠습니다.\n\n```dart\nCenter(\n  child: Container(\n    color: Colors.amber,\n    height: 100,\n    width: 100,\n));\n```\n\n![Container with Center](https://user-images.githubusercontent.com/76241233/191667508-b884bd2e-9e91-4984-aef7-953d1acee3a7.png)\n\n부모의 제약이 생기니 height와 width가 제대로 적용이 된 것을 볼 수 있습니다.\n\n여기서\n\n1.  `Center` 는 제약을 전체 범위로 주었고\n2.  `Container` 는 스스로의 크기를 지정하였으며\n3.  `Center` 가 자식인 `Container`의 위치를 지정했음을 볼 수 있습니다.\n\n<br/>\n\n---\n\n## 결론\n\n- 플러터는 크기 명시가 아닌 제약으로 레이아웃을 결정한다.\n\n1. 제약(constraints) 범위를 결정하는 것은 부모 위젯\n2. 크기를 결정하는 것은 자식 위젯\n3. 위치를 지정하는 것은 부모 위젯\n\n◾ [[Flutter] Text Widget 사용하기](/tech/flutter-text-widget) 👈 이전 글 보기\n◾ [[Flutter] 다양한 위젯 사용하기](/tech/flutter-use-several-widgets) 👈 이전 글 보기"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#constraints%EB%9E%80\">Constraints란?</a></p>\n</li>\n<li>\n<p><a href=\"#constraints-go-down-sizes-go-up-parent-sets-position\">Constraints go down. Sizes go up. Parent sets position.</a></p>\n<ul>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/flutter-understanding-constraints"}},
    "staticQueryHashes": ["2665612806"]}