{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/tech/flutter-layout-widget",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/flutter-layout-widget","tags":["Flutter Basic"],"date":"2022-09-16","img":null,"title":"[Flutter] Layout Widget 정리"},"html":"<!--\n📍 어떤 Layout Widget들이 있고, 어떤 역할인지 빠르게 익힌다.\n\n📍 code lab을 공부하며 직접 배운 내용을 적용해본다. -->\n<p>Flutter에서는 모든 것이 위젯입니다. Layout도 위젯을 통해 구성할 수 있습니다.</p>\n<p>Flutter 레이아웃 위젯은 2가지 유형이 있습니다.</p>\n<ul>\n<li>Single-child layout</li>\n<li>Multi-child layout</li>\n</ul>\n<h2 id=\"single-child-layout\" style=\"position:relative;\">Single-child layout<a href=\"#single-child-layout\" aria-label=\"single child layout permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>먼저 Signle-child layout은 이름에서 알 수 있듯이, 하나의 자식(하위) 위젯만 가질 수 있습니다.</p>\n<p>플러터의 위젯은 정말 많기 때문에 일부 필수적인 위젯만 알아보도록 하겠습니다.</p>\n<h3 id=\"container\" style=\"position:relative;\">Container<a href=\"#container\" aria-label=\"container permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Container</code>는 크기(height, width), 배경색, 위치 지정 등의 옵션을 제공하는 위젯입니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Container(\n  height: 200.0,\n  width: double.infinity, // 스크린에 맞춰 확장\n  padding: cosnt Edgeinsets.all(7.0),\n  color: Colors.red,\n  child: Center(\n    //...\n  ),\n),</code>\n        </deckgo-highlight-code>\n<h3 id=\"padding\" style=\"position:relative;\">Padding<a href=\"#padding\" aria-label=\"padding permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Padding</code>은 자식 위젯에 패딩을 추가합니다.</p>\n<p>padding은 여백을 의미하는데요. 테두리를 기준으로 컨텐츠 안쪽의 여백을 의미합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/190837580-e3d14f06-6d2b-4faa-8f7f-61a79434fb99.png\" alt=\"Flutter Padding\"></p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Padding(\n  padding: EdgeInsets.all(10.0),\n  child: Container(\n    //...\n  ),\n),</code>\n        </deckgo-highlight-code>\n<h3 id=\"center\" style=\"position:relative;\">Center<a href=\"#center\" aria-label=\"center permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Center</code>는 이름 그대로 자식 위젯을 가운데에 위치시킬 수 있는 위젯입니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Center(\n  child: //...\n),</code>\n        </deckgo-highlight-code>\n<h3 id=\"align\" style=\"position:relative;\">Align<a href=\"#align\" aria-label=\"align permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Align</code>은 자식 위젯의 위치를 세밀하게 지정할 수 있습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Align(\n  alignment: Alignment.bottomCenter,\n  child: const Container(\n    //...\n  ),\n),</code>\n        </deckgo-highlight-code>\n<ul>\n<li>Alignment.topLeft</li>\n<li>Alignment.topCenter</li>\n<li>Alignment.topRight</li>\n<li>Alignment.bottomLeft</li>\n<li>Alignment.bottomCenter</li>\n<li>Alignment.bottomRight</li>\n<li>Alignment.center</li>\n<li>Alignment.centerLeft</li>\n<li>Alignment.centerRight</li>\n<li>Alignment(x, y)\n<img src=\"https://user-images.githubusercontent.com/76241233/190838139-0a0828c1-8e49-4678-a8e9-4795dbdc38fe.png\" alt=\"Aligment coordinate\"></li>\n</ul>\n<p>마지막 Alignment를 사용해 x, y 좌표를 기준으로 값을 입력하면 해당 위치에 자식 위젯이 자리잡습니다. 다만 이름이 명확한(상수로 취급되는) 다른 속성들을 사용하는 걸 권장한다고 합니다.</p>\n<h3 id=\"sizedbox\" style=\"position:relative;\">SizedBox<a href=\"#sizedbox\" aria-label=\"sizedbox permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">SizedBox</code>는 height, width를 지정할 수 있는 위젯입니다.</p>\n<p>만약 부모 위젯이 SideBox위젯의 크기를 제한하는 위젯이거나, 다른 SizedBox일 경우에는 자식 SizedBox위젯의 height, width값이 무시됩니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">SizedBox(\n  height: 300.0,\n  width: 300.0,\n  child: const Container(\n    //...\n  ),\n),</code>\n        </deckgo-highlight-code>\n<h3 id=\"aspectratio\" style=\"position:relative;\">AspectRatio<a href=\"#aspectratio\" aria-label=\"aspectratio permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">AspectRatio</code>는 16:9와 같은 비율을 지정할 수 있게 하는 위젯입니다.</p>\n<p>정확한 크기와는 관계없이 지정된 비율(종횡비)로 자식 위젯의 비율을 유지합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">AspectRatio(\n  aspectRatio: 16 / 9,\n  child: const Container(\n    //...\n  ),\n),</code>\n        </deckgo-highlight-code>\n<h3 id=\"baseline\" style=\"position:relative;\">Baseline<a href=\"#baseline\" aria-label=\"baseline permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Baseline</code>은 자식 기준선에 따라 자식의 위치를 지정하는 위젯입니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Center(\n  child: const Container(\n    height: 200,\n    width: 200,\n    color: Colors.blue,\n    child: Baseline(\n      baseline: 20.0, // 기준선 범위 지정\n      baselineType: TextBaseline.alphabetic,\n      child: const Container(\n        height: 50,\n        width: 50,\n        color: Colors.red,\n      ),\n    ),\n  ),\n),</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/190838738-4da461be-319f-4d74-bc4d-0c74f01e1bab.png\" alt=\"Flutter Baseline\"></p>\n<p>baseline 속성을 20.0으로 주니 부모 위젯의 상위부터 20까지 가상의 기준선이 그어진 겁니다. 그 기준선 위부터 자식 위젯이 위치하게 됩니다. 위 이미지에서는 자식 위젯이 남은 부모위젯의 공간(20.0)보다 높이(50.0)가 길죠? 따라서 부모 위젯을 벗어나는 모양으로 그려진 겁니다.</p>\n<h3 id=\"constrainedbox\" style=\"position:relative;\">ConstrainedBox<a href=\"#constrainedbox\" aria-label=\"constrainedbox permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">ConstrainedBox</code>는 자식에 추가적인 제약사항을 거는 위젯입니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">ConstrainedBox(\n  constraints: const BoxConstraints.expand(),\n  child: const Container(\n    //...\n  ),\n),</code>\n        </deckgo-highlight-code>\n<br>\n<hr>\n<h2 id=\"multi-child-layout\" style=\"position:relative;\">Multi-child layout<a href=\"#multi-child-layout\" aria-label=\"multi child layout permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Multi-child layout은 자식 위젯을 여러 개 가질 수 있습니다.</p>\n<h3 id=\"row\" style=\"position:relative;\">Row<a href=\"#row\" aria-label=\"row permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Row</code> 위젯은 자식 위젯들을 수평 배열로 표시합니다.</p>\n<p><code class=\"language-text\">Expaneded</code>로 감싸면 차지할 수 있는 가로 공간을 꽉 채우도록 확장됩니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Row(\n  children: const &lt;Widget&gt;[\n    Expanded(\n      child: Text(&#39;Hi&#39;, textAlign: TextAlign.center),\n    ),\n    Expanded(\n      child: Text(&#39;Hi2&#39;, textAlign: TextAlign.center),\n    ),\n  ],\n)</code>\n        </deckgo-highlight-code>\n<h3 id=\"column\" style=\"position:relative;\">Column<a href=\"#column\" aria-label=\"column permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Column</code> 위젯은 자식 위젯들을 수직 배열로 표시합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Column(\n  crossAxisAlignment: CrossAxisAlignment.start,\n  mainAxisSize: MainAxisSize.min,\n  children: &lt;Widget&gt;[\n    const Text(&#39;HI&#39;),\n    const Text(&#39;HI2&#39;),\n    const Text(&#39;HI3&#39;),\n    const Text(&#39;HI4&#39;),\n    //...\n  ],\n)</code>\n        </deckgo-highlight-code>\n<p>만약 수직 정렬된 위젯들을 스크린 범위를 넘어 스크롤하고 싶으면 <code class=\"language-text\">ListView</code>를 사용해야 합니다. 기본적으로 Column은 사용할 수 있는 공간을 넘은 자식 위젯들을 오류로 간주합니다.</p>\n<h3 id=\"listview\" style=\"position:relative;\">ListView<a href=\"#listview\" aria-label=\"listview permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">ListView</code>는 가장 흔하게 사용되는 <strong>스크롤</strong> 위젯입니다. 스크롤되는 방향으로 자식을 차례로 나열합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">ListView(\n  padding: const EdgeInsets.all(5),\n  // scrollDirection: Axis.horizontal, // 수평 정렬\n  children: &lt;Widget&gt;[\n    Container(\n      height: 50,\n      color: Colors.black[600],\n      child: const Center(child: Text(&#39;A&#39;)),\n    ),\n    Container(\n      height: 50,\n      color: Colors.black[500],\n      child: const Center(child: Text(&#39;B&#39;)),\n    ),\n    Container(\n      height: 50,\n      color: Colors.black[100],\n      child: const Center(child: Text(&#39;C&#39;)),\n    ),\n  ],\n),</code>\n        </deckgo-highlight-code>\n<h3 id=\"stack\" style=\"position:relative;\">Stack<a href=\"#stack\" aria-label=\"stack permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Stack</code> 위젯은 자식 위젯들을 겹치게 할 때 유용하게 사용됩니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Stack(\n  children: &lt;Widget&gt;[\n    Container(\n      width: 100,\n      height: 100,\n      color: Colors.red,\n    ),\n    Container(\n      width: 90,\n      height: 90,\n      color: Colors.green,\n    ),\n    Container(\n      width: 80,\n      height: 80,\n      color: Colors.blue,\n    ),\n  ],\n),</code>\n        </deckgo-highlight-code>\n<p>이름 그대로 <strong>스택</strong>구조처럼, 선입후출 방식으로 위젯이 표현됩니다.<br>\n가장 마지막에 있는 파란색 위젯이 가장 앞에 위치합니다.</p>\n<p>◾ <a href=\"/tech/flutter-what-is-widget\">[Flutter] Widget 다루기</a> 👈 이전 글 보기</p>\n<!-- ◾ [자바스크립트 자료형](/tech/let-me-know-js-a-bit-js-data-type) 👈 다음 글 보기 -->","internal":{"content":"\n<!--\n📍 어떤 Layout Widget들이 있고, 어떤 역할인지 빠르게 익힌다.\n\n📍 code lab을 공부하며 직접 배운 내용을 적용해본다. -->\n\nFlutter에서는 모든 것이 위젯입니다. Layout도 위젯을 통해 구성할 수 있습니다.\n\nFlutter 레이아웃 위젯은 2가지 유형이 있습니다.\n\n- Single-child layout\n- Multi-child layout\n\n## Single-child layout\n\n먼저 Signle-child layout은 이름에서 알 수 있듯이, 하나의 자식(하위) 위젯만 가질 수 있습니다.\n\n플러터의 위젯은 정말 많기 때문에 일부 필수적인 위젯만 알아보도록 하겠습니다.\n\n### Container\n\n`Container`는 크기(height, width), 배경색, 위치 지정 등의 옵션을 제공하는 위젯입니다.\n\n```dart\nContainer(\n  height: 200.0,\n  width: double.infinity, // 스크린에 맞춰 확장\n  padding: cosnt Edgeinsets.all(7.0),\n  color: Colors.red,\n  child: Center(\n    //...\n  ),\n),\n```\n\n### Padding\n\n`Padding`은 자식 위젯에 패딩을 추가합니다.\n\npadding은 여백을 의미하는데요. 테두리를 기준으로 컨텐츠 안쪽의 여백을 의미합니다.\n\n![Flutter Padding](https://user-images.githubusercontent.com/76241233/190837580-e3d14f06-6d2b-4faa-8f7f-61a79434fb99.png)\n\n```dart\nPadding(\n  padding: EdgeInsets.all(10.0),\n  child: Container(\n    //...\n  ),\n),\n```\n\n### Center\n\n`Center`는 이름 그대로 자식 위젯을 가운데에 위치시킬 수 있는 위젯입니다.\n\n```dart\nCenter(\n  child: //...\n),\n```\n\n### Align\n\n`Align`은 자식 위젯의 위치를 세밀하게 지정할 수 있습니다.\n\n```dart\nAlign(\n  alignment: Alignment.bottomCenter,\n  child: const Container(\n    //...\n  ),\n),\n```\n\n- Alignment.topLeft\n- Alignment.topCenter\n- Alignment.topRight\n- Alignment.bottomLeft\n- Alignment.bottomCenter\n- Alignment.bottomRight\n- Alignment.center\n- Alignment.centerLeft\n- Alignment.centerRight\n- Alignment(x, y)\n  ![Aligment coordinate](https://user-images.githubusercontent.com/76241233/190838139-0a0828c1-8e49-4678-a8e9-4795dbdc38fe.png)\n\n마지막 Alignment를 사용해 x, y 좌표를 기준으로 값을 입력하면 해당 위치에 자식 위젯이 자리잡습니다. 다만 이름이 명확한(상수로 취급되는) 다른 속성들을 사용하는 걸 권장한다고 합니다.\n\n### SizedBox\n\n`SizedBox`는 height, width를 지정할 수 있는 위젯입니다.\n\n만약 부모 위젯이 SideBox위젯의 크기를 제한하는 위젯이거나, 다른 SizedBox일 경우에는 자식 SizedBox위젯의 height, width값이 무시됩니다.\n\n```dart\nSizedBox(\n  height: 300.0,\n  width: 300.0,\n  child: const Container(\n    //...\n  ),\n),\n```\n\n### AspectRatio\n\n`AspectRatio`는 16:9와 같은 비율을 지정할 수 있게 하는 위젯입니다.\n\n정확한 크기와는 관계없이 지정된 비율(종횡비)로 자식 위젯의 비율을 유지합니다.\n\n```dart\nAspectRatio(\n  aspectRatio: 16 / 9,\n  child: const Container(\n    //...\n  ),\n),\n```\n\n### Baseline\n\n`Baseline`은 자식 기준선에 따라 자식의 위치를 지정하는 위젯입니다.\n\n```dart\nCenter(\n  child: const Container(\n    height: 200,\n    width: 200,\n    color: Colors.blue,\n    child: Baseline(\n      baseline: 20.0, // 기준선 범위 지정\n      baselineType: TextBaseline.alphabetic,\n      child: const Container(\n        height: 50,\n        width: 50,\n        color: Colors.red,\n      ),\n    ),\n  ),\n),\n```\n\n![Flutter Baseline](https://user-images.githubusercontent.com/76241233/190838738-4da461be-319f-4d74-bc4d-0c74f01e1bab.png)\n\nbaseline 속성을 20.0으로 주니 부모 위젯의 상위부터 20까지 가상의 기준선이 그어진 겁니다. 그 기준선 위부터 자식 위젯이 위치하게 됩니다. 위 이미지에서는 자식 위젯이 남은 부모위젯의 공간(20.0)보다 높이(50.0)가 길죠? 따라서 부모 위젯을 벗어나는 모양으로 그려진 겁니다.\n\n### ConstrainedBox\n\n`ConstrainedBox`는 자식에 추가적인 제약사항을 거는 위젯입니다.\n\n```dart\nConstrainedBox(\n  constraints: const BoxConstraints.expand(),\n  child: const Container(\n    //...\n  ),\n),\n```\n\n<br>\n\n---\n\n## Multi-child layout\n\nMulti-child layout은 자식 위젯을 여러 개 가질 수 있습니다.\n\n### Row\n\n`Row` 위젯은 자식 위젯들을 수평 배열로 표시합니다.\n\n`Expaneded`로 감싸면 차지할 수 있는 가로 공간을 꽉 채우도록 확장됩니다.\n\n```dart\nRow(\n  children: const <Widget>[\n    Expanded(\n      child: Text('Hi', textAlign: TextAlign.center),\n    ),\n    Expanded(\n      child: Text('Hi2', textAlign: TextAlign.center),\n    ),\n  ],\n)\n```\n\n### Column\n\n`Column` 위젯은 자식 위젯들을 수직 배열로 표시합니다.\n\n```dart\nColumn(\n  crossAxisAlignment: CrossAxisAlignment.start,\n  mainAxisSize: MainAxisSize.min,\n  children: <Widget>[\n    const Text('HI'),\n    const Text('HI2'),\n    const Text('HI3'),\n    const Text('HI4'),\n    //...\n  ],\n)\n```\n\n만약 수직 정렬된 위젯들을 스크린 범위를 넘어 스크롤하고 싶으면 `ListView`를 사용해야 합니다. 기본적으로 Column은 사용할 수 있는 공간을 넘은 자식 위젯들을 오류로 간주합니다.\n\n### ListView\n\n`ListView`는 가장 흔하게 사용되는 **스크롤** 위젯입니다. 스크롤되는 방향으로 자식을 차례로 나열합니다.\n\n```dart\nListView(\n  padding: const EdgeInsets.all(5),\n  // scrollDirection: Axis.horizontal, // 수평 정렬\n  children: <Widget>[\n    Container(\n      height: 50,\n      color: Colors.black[600],\n      child: const Center(child: Text('A')),\n    ),\n    Container(\n      height: 50,\n      color: Colors.black[500],\n      child: const Center(child: Text('B')),\n    ),\n    Container(\n      height: 50,\n      color: Colors.black[100],\n      child: const Center(child: Text('C')),\n    ),\n  ],\n),\n```\n\n### Stack\n\n`Stack` 위젯은 자식 위젯들을 겹치게 할 때 유용하게 사용됩니다.\n\n```dart\nStack(\n  children: <Widget>[\n    Container(\n      width: 100,\n      height: 100,\n      color: Colors.red,\n    ),\n    Container(\n      width: 90,\n      height: 90,\n      color: Colors.green,\n    ),\n    Container(\n      width: 80,\n      height: 80,\n      color: Colors.blue,\n    ),\n  ],\n),\n```\n\n이름 그대로 **스택**구조처럼, 선입후출 방식으로 위젯이 표현됩니다.  \n가장 마지막에 있는 파란색 위젯이 가장 앞에 위치합니다.\n\n◾ [[Flutter] Widget 다루기](/tech/flutter-what-is-widget) 👈 이전 글 보기\n\n<!-- ◾ [자바스크립트 자료형](/tech/let-me-know-js-a-bit-js-data-type) 👈 다음 글 보기 -->\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#single-child-layout\">Single-child layout</a></p>\n<ul>\n<li><a href=\"#container\">Container</a></li>\n<li><a href=\"#padding\">Padding</a></li>\n<li><a href=\"#center\">Center</a></li>\n<li><a href=\"#align\">Align</a></li>\n<li><a href=\"#sizedbox\">SizedBox</a></li>\n<li><a href=\"#aspectratio\">AspectRatio</a></li>\n<li><a href=\"#baseline\">Baseline</a></li>\n<li><a href=\"#constrainedbox\">ConstrainedBox</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#multi-child-layout\">Multi-child layout</a></p>\n<ul>\n<li><a href=\"#row\">Row</a></li>\n<li><a href=\"#column\">Column</a></li>\n<li><a href=\"#listview\">ListView</a></li>\n<li><a href=\"#stack\">Stack</a></li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/flutter-layout-widget"}},
    "staticQueryHashes": ["2665612806"]}