{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/let-me-know-js-a-bit-js-control-flow-statement-loop","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/let-me-know-js-a-bit-js-control-flow-statement-loop","tags":["쫌만알자"],"date":"2022-10-12","img":"https://user-images.githubusercontent.com/76241233/177932893-5a504b26-12e4-4ade-b1ce-1951d072ba82.jpg","title":"쫌만알자! (12) - 자바스크립트 제어문(2) - 반복문"},"html":"<p>반복문은 조건식의 평가결과가 참일 때 코드 블록을 실행합니다. 그리고 조건이 또 참일 때 코드 블록을 다시 실행합니다. 조건식이 <code class=\"language-text\">false</code>가 될 때까지 반복하기 때문에 <strong>반복문</strong>이라고 칭합니다.</p>\n<p>자바스크립트에는 for, while, do...while 이렇게 3가지 반복문이 있습니다.</p>\n<h2 id=\"while문\" style=\"position:relative;\">while문<a href=\"#while%EB%AC%B8\" aria-label=\"while문 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">while</code>문은 주어진 조건식의 평가 결과가 <code class=\"language-text\">true</code>이면 코드 블록을 계속해서 반복해서 실행합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let counter = 0;\r\n\r\nwhile(counter &lt; 5) {\r\n  console.log(counter) // 0 1 2 3 4\r\n\r\n  counter = counter + 1;\r\n}</code>\n        </deckgo-highlight-code>\n<p>위 코드에서는 counter가 5 미만일 때까지 실행됩니다. 따라서 콘솔에 찍히는 값은 차례대로 0, 1, 2, 3, 4가 됩니다.</p>\n<h3 id=\"무한-루프\" style=\"position:relative;\">무한 루프<a href=\"#%EB%AC%B4%ED%95%9C-%EB%A3%A8%ED%94%84\" aria-label=\"무한 루프 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>반복문을 다룰 때에는 주의해야 하는 게 있습니다. 바로 <strong>무한 루프</strong>입니다.</p>\n<p>무한 루프란 이름 그대로 무한하게 반복하는 문을 의미합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">while(true) {\r\n  console.log(&#39;Looooooop!&#39;)\r\n}</code>\n        </deckgo-highlight-code>\n<p>조건식이 언제나 <code class=\"language-text\">true</code>인 반복문입니다.</p>\n<p>위 코드는 실행시키지 않는 것이 좋습니다. 프로그램을 강제 종료하지 않는 이상 영원히 실행되거든요.</p>\n<p>무한 루프는 프로그램의 원활한 실행을 방해합니다. 따라서 <code class=\"language-text\">if</code>문 등으로 무한 루프를 탈출할 수 있게 해야합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let counter = 0;\r\n\r\nwhile(true) {\r\n  console.log(counter);\r\n  counter = counter + 1;\r\n\r\n  if(counter === 5) {\r\n    break;\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">if</code>문과 <code class=\"language-text\">break</code>의 조합으로 이제 무한 루프를 탈출할 수 있게 되었습니다.</p>\n<br/>\n<hr>\n<h2 id=\"dowhile문\" style=\"position:relative;\">do...while문<a href=\"#dowhile%EB%AC%B8\" aria-label=\"dowhile문 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">do...while</code> 문은 코드블록을 일단 먼저 실행하고 그 후에 조건식을 평가합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let counter = 0;\r\n\r\ndo {\r\n  console.log(counter);\r\n  counter = counter + 1;\r\n} while(counter &lt; 5)</code>\n        </deckgo-highlight-code>\n<p>코드 블록이 <code class=\"language-text\">while</code> 다음에 있지 않고 <code class=\"language-text\">do</code> 다음에 위치하죠? do에 있는 블록은 조건문과 상관없이 먼저 실행됩니다.</p>\n<p>조건식에 부합하지 않더라도 <strong>최소 한번은</strong> 실행되는 조건문입니다.</p>\n<br/>\n<hr>\n<h2 id=\"for문\" style=\"position:relative;\">for문<a href=\"#for%EB%AC%B8\" aria-label=\"for문 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">for</code>문은 <code class=\"language-text\">while</code>문의 로직을 좀더 기계적으로 운용합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">for(변수 선언문 혹은 할당문; 조건식; 증감식) {\r\n  참인경우 실행될 문;\r\n}</code>\n        </deckgo-highlight-code>\n<p>보통 프로그래머들은 <code class=\"language-text\">for</code> 문 사용 시 내부에서 사용할 변수를 <code class=\"language-text\">i</code>로 선언합니다. i는 반복을 의미하는 iteration입니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const arr = [&#39;하나&#39;, &#39;둘&#39;, &#39;셋&#39;];\r\n\r\nfor(let i = 0; i &lt; arr.length; i++) {\r\n  console.log(arr[i]);\r\n}</code>\n        </deckgo-highlight-code>\n<p>for문을 이해하기가 처음엔 어려울 수 있습니다. 차근차근히 살펴봅시다.</p>\n<h3 id=\"for문의-동작\" style=\"position:relative;\">for문의 동작<a href=\"#for%EB%AC%B8%EC%9D%98-%EB%8F%99%EC%9E%91\" aria-label=\"for문의 동작 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const arr = [&#39;하나&#39;, &#39;둘&#39;, &#39;셋&#39;];\r\n\r\nfor(let i = 0; i &lt; arr.length; i++) {\r\n  console.log(arr[i]);\r\n}\r\n\r\n// 동작\r\n// step1\r\ni = 0;\r\ni &lt; arr.length --&gt; true // 0 &lt; 3\r\n  console.log(arr[i]) --&gt; arr[0] // 하나\r\n\r\n// step2\r\ni++; // i는 1\r\ni &lt; arr.length; --&gt; true // 1 &lt; 3\r\n  console.log(arr[i]) --&gt; arr[1] // 둘\r\n\r\n// step3\r\ni++; // i는 2\r\ni &lt; arr.length; --&gt; true // 2 &lt; 3\r\n  console.log(arr[i]) --&gt; arr[2] // 셋\r\n\r\n// step4\r\ni++; // i는 3\r\ni &lt; arr.length; --&gt; false // 3 &lt; 3\r\n\r\n// for문 종료</code>\n        </deckgo-highlight-code>\n<p>for문의 괄호 속 3번째 식은 <strong>증감식</strong>이기 때문에 이렇게 감소하는 형태로도 작성할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">for(let i = 2; i &gt;=0; i--) {\r\n  console.log(i); // 2 1 0\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"for문의-무한루프\" style=\"position:relative;\">for문의 무한루프<a href=\"#for%EB%AC%B8%EC%9D%98-%EB%AC%B4%ED%95%9C%EB%A3%A8%ED%94%84\" aria-label=\"for문의 무한루프 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">while</code> 문에서 <code class=\"language-text\">while(true)</code> 로 작성하면 무한루프가 됩니다.</p>\n<p>for문에서는 이렇게 작성합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">for(;;) {\r\n  //...\r\n}</code>\n        </deckgo-highlight-code>\n<p>for문에서의 변수 선언(할당)문, 조건식, 증감식은 모두 선택적입니다. 따라서 작성하지 않으면 무한루프가 됩니다.</p>\n<h4 id=\"선택적-식-사용\" style=\"position:relative;\">선택적 식 사용<a href=\"#%EC%84%A0%ED%83%9D%EC%A0%81-%EC%8B%9D-%EC%82%AC%EC%9A%A9\" aria-label=\"선택적 식 사용 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ol>\n<li>변수를 밖에 선언(및 할당)</li>\n</ol>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let i = 0;\r\n\r\nfor(; i &lt; 5; i++) {\r\n  //\r\n}</code>\n        </deckgo-highlight-code>\n<ol start=\"2\">\n<li>조건식을 따로 작성</li>\n</ol>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">for(let i = 0; ; i++) {\r\n  console.log(i); \r\n\r\n  // 조건식\r\n  if(i &gt; 3) {\r\n    break;\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"for문의-중첩\" style=\"position:relative;\">for문의 중첩<a href=\"#for%EB%AC%B8%EC%9D%98-%EC%A4%91%EC%B2%A9\" aria-label=\"for문의 중첩 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>for문 속에 for문을 한번 더 작성할 수 있습니다. 이를 <strong>중첩 for문</strong>이라 합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">for(let i = 1; i &lt;=3; i++) {\r\n  for(let j = 1; j &lt;=3; j++) {\r\n    if(i + j == 3) {\r\n      console.log(`${i} + ${j}는 ${i+j}`)\r\n    }\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<p>동작은 이렇습니다.</p>\n<ul>\n<li>\n<p>step1</p>\n<ul>\n<li><code class=\"language-text\">i = 1;</code></li>\n<li><code class=\"language-text\">i &lt;= 3</code> --> true\n<ul>\n<li><code class=\"language-text\">j = 1;</code></li>\n<li><code class=\"language-text\">j &lt;= 3</code> --> true\n<ul>\n<li>\n<p><code class=\"language-text\">i + j</code> --> 2 // 실행 조건 미충족</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>step 1-2\n<ul>\n<li><code class=\"language-text\">j++</code> // j는 2</li>\n<li><code class=\"language-text\">j &lt;= 3</code> --> true\n<ul>\n<li><code class=\"language-text\">i + j</code> --> 3</li>\n<li>출력</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>step 1-3\n<ul>\n<li><code class=\"language-text\">j++</code> // j는 3</li>\n<li><code class=\"language-text\">j &lt;= 3</code> --> true\n<ul>\n<li><code class=\"language-text\">i + j</code> --> 4 // 실행조건 미충족</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>step 1-4\n<ul>\n<li><code class=\"language-text\">j++</code> // j는 4</li>\n<li><code class=\"language-text\">j &lt;= 4</code> --> false // for문 종료</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>중첩된 for문 1번 종료</p>\n</li>\n<li>\n<p>step2</p>\n<ul>\n<li><code class=\"language-text\">i++;</code> // i는 2</li>\n<li><code class=\"language-text\">i &lt;= 3</code> --> true\n<ul>\n<li><code class=\"language-text\">j = 1;</code></li>\n<li><code class=\"language-text\">j &lt;= 3</code> --> true\n<ul>\n<li><code class=\"language-text\">i + j</code> --> 3</li>\n<li>출력</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>step 2-2\n<ul>\n<li><code class=\"language-text\">j++</code> // j는 2</li>\n<li><code class=\"language-text\">j &lt;= 3</code> --> true\n<ul>\n<li><code class=\"language-text\">i + j</code> --> 4 // 실행조건 미충족</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>step 2-3\n<ul>\n<li><code class=\"language-text\">j++</code> // j는 3</li>\n<li><code class=\"language-text\">j &lt;= 3</code> --> true\n<ul>\n<li><code class=\"language-text\">i + j</code> --> 5 // 실행조건 미충족</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>step 2-4\n<ul>\n<li><code class=\"language-text\">j++</code> // j는 4</li>\n<li>j &#x3C;= 4 --> false // for문 종료</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>이렇게 바깥의 for문의 각각의 루프 한번마다 중첩된 for문이 끝까지 반복됩니다.</p>\n<p>보통 중첩되는 for문의 변수를 선언할 경우에는 <code class=\"language-text\">i j k l m n</code> 순으로 작성합니다. 일종의 관례입니다.</p>\n<p>다음 글에서는 지금까지 몇 번 언급했던 암묵적 타입 변환에 대해 알아보겠습니다.</p>\n<p>◾ <a href=\"/tech/let-me-know-js-a-bit-js-control-flow-statement-conditional\">자바스크립트 제어문(1) - 조건문</a> 👈 이전 글 보기</p>","internal":{"content":"\r\n반복문은 조건식의 평가결과가 참일 때 코드 블록을 실행합니다. 그리고 조건이 또 참일 때 코드 블록을 다시 실행합니다. 조건식이 `false`가 될 때까지 반복하기 때문에 **반복문**이라고 칭합니다.\r\n\r\n자바스크립트에는 for, while, do...while 이렇게 3가지 반복문이 있습니다.\r\n\r\n## while문\r\n\r\n`while`문은 주어진 조건식의 평가 결과가 `true`이면 코드 블록을 계속해서 반복해서 실행합니다.\r\n\r\n\r\n```javascript\r\nlet counter = 0;\r\n\r\nwhile(counter < 5) {\r\n  console.log(counter) // 0 1 2 3 4\r\n\r\n  counter = counter + 1;\r\n}\r\n```\r\n\r\n위 코드에서는 counter가 5 미만일 때까지 실행됩니다. 따라서 콘솔에 찍히는 값은 차례대로 0, 1, 2, 3, 4가 됩니다.\r\n\r\n### 무한 루프\r\n\r\n반복문을 다룰 때에는 주의해야 하는 게 있습니다. 바로 **무한 루프**입니다.\r\n\r\n무한 루프란 이름 그대로 무한하게 반복하는 문을 의미합니다. \r\n\r\n```javascript\r\nwhile(true) {\r\n  console.log('Looooooop!')\r\n}\r\n```\r\n조건식이 언제나 `true`인 반복문입니다. \r\n\r\n위 코드는 실행시키지 않는 것이 좋습니다. 프로그램을 강제 종료하지 않는 이상 영원히 실행되거든요.\r\n\r\n무한 루프는 프로그램의 원활한 실행을 방해합니다. 따라서 `if`문 등으로 무한 루프를 탈출할 수 있게 해야합니다.\r\n\r\n```javascript\r\nlet counter = 0;\r\n\r\nwhile(true) {\r\n  console.log(counter);\r\n  counter = counter + 1;\r\n\r\n  if(counter === 5) {\r\n    break;\r\n  }\r\n}\r\n```\r\n\r\n`if`문과 `break`의 조합으로 이제 무한 루프를 탈출할 수 있게 되었습니다.\r\n\r\n<br/>\r\n\r\n---\r\n\r\n## do...while문\r\n\r\n`do...while` 문은 코드블록을 일단 먼저 실행하고 그 후에 조건식을 평가합니다.\r\n\r\n```javascript\r\nlet counter = 0;\r\n\r\ndo {\r\n  console.log(counter);\r\n  counter = counter + 1;\r\n} while(counter < 5)\r\n```\r\n\r\n코드 블록이 `while` 다음에 있지 않고 `do` 다음에 위치하죠? do에 있는 블록은 조건문과 상관없이 먼저 실행됩니다. \r\n\r\n조건식에 부합하지 않더라도 **최소 한번은** 실행되는 조건문입니다.\r\n\r\n<br/>\r\n\r\n---\r\n\r\n## for문\r\n\r\n`for`문은 `while`문의 로직을 좀더 기계적으로 운용합니다.\r\n\r\n```javascript\r\nfor(변수 선언문 혹은 할당문; 조건식; 증감식) {\r\n  참인경우 실행될 문;\r\n}\r\n```\r\n\r\n보통 프로그래머들은 `for` 문 사용 시 내부에서 사용할 변수를 `i`로 선언합니다. i는 반복을 의미하는 iteration입니다.\r\n\r\n```javascript\r\nconst arr = ['하나', '둘', '셋'];\r\n\r\nfor(let i = 0; i < arr.length; i++) {\r\n  console.log(arr[i]);\r\n}\r\n```\r\n\r\nfor문을 이해하기가 처음엔 어려울 수 있습니다. 차근차근히 살펴봅시다.\r\n\r\n### for문의 동작\r\n\r\n```javascript\r\nconst arr = ['하나', '둘', '셋'];\r\n\r\nfor(let i = 0; i < arr.length; i++) {\r\n  console.log(arr[i]);\r\n}\r\n\r\n// 동작\r\n// step1\r\ni = 0;\r\ni < arr.length --> true // 0 < 3\r\n  console.log(arr[i]) --> arr[0] // 하나\r\n\r\n// step2\r\ni++; // i는 1\r\ni < arr.length; --> true // 1 < 3\r\n  console.log(arr[i]) --> arr[1] // 둘\r\n\r\n// step3\r\ni++; // i는 2\r\ni < arr.length; --> true // 2 < 3\r\n  console.log(arr[i]) --> arr[2] // 셋\r\n\r\n// step4\r\ni++; // i는 3\r\ni < arr.length; --> false // 3 < 3\r\n\r\n// for문 종료\r\n```\r\n\r\nfor문의 괄호 속 3번째 식은 **증감식**이기 때문에 이렇게 감소하는 형태로도 작성할 수 있습니다.\r\n\r\n```javascript\r\nfor(let i = 2; i >=0; i--) {\r\n  console.log(i); // 2 1 0\r\n}\r\n```\r\n\r\n### for문의 무한루프\r\n\r\n`while` 문에서 `while(true)` 로 작성하면 무한루프가 됩니다.\r\n\r\nfor문에서는 이렇게 작성합니다.\r\n\r\n```javascript\r\nfor(;;) {\r\n  //...\r\n}\r\n```\r\n\r\nfor문에서의 변수 선언(할당)문, 조건식, 증감식은 모두 선택적입니다. 따라서 작성하지 않으면 무한루프가 됩니다.\r\n\r\n#### 선택적 식 사용\r\n\r\n1. 변수를 밖에 선언(및 할당)\r\n\r\n```javascript\r\nlet i = 0;\r\n\r\nfor(; i < 5; i++) {\r\n  //\r\n}\r\n```\r\n\r\n2. 조건식을 따로 작성\r\n\r\n```javascript\r\nfor(let i = 0; ; i++) {\r\n  console.log(i); \r\n\r\n  // 조건식\r\n  if(i > 3) {\r\n    break;\r\n  }\r\n}\r\n```\r\n\r\n### for문의 중첩\r\n\r\nfor문 속에 for문을 한번 더 작성할 수 있습니다. 이를 **중첩 for문**이라 합니다.\r\n\r\n```javascript\r\nfor(let i = 1; i <=3; i++) {\r\n  for(let j = 1; j <=3; j++) {\r\n    if(i + j == 3) {\r\n      console.log(`${i} + ${j}는 ${i+j}`)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n동작은 이렇습니다.\r\n\r\n* step1\r\n  * `i = 1;`\r\n  * `i <= 3` --> true \r\n    * `j = 1;`\r\n    * `j <= 3` --> true\r\n      * `i + j` --> 2 // 실행 조건 미충족\r\n\r\n  \r\n  * step 1-2\r\n    * `j++` // j는 2\r\n    * `j <= 3` --> true\r\n      * `i + j` --> 3\r\n      * 출력\r\n  \r\n  * step 1-3\r\n    * `j++` // j는 3\r\n    * `j <= 3` --> true\r\n      * `i + j` --> 4 // 실행조건 미충족\r\n  \r\n  * step 1-4\r\n    * `j++` // j는 4\r\n    * `j <= 4` --> false // for문 종료\r\n\r\n* 중첩된 for문 1번 종료\r\n* step2\r\n  * `i++;` // i는 2\r\n  * `i <= 3` --> true\r\n    * `j = 1;`\r\n    * `j <= 3` --> true\r\n      * `i + j` --> 3 \r\n      * 출력\r\n  \r\n  * step 2-2\r\n    * `j++` // j는 2\r\n    * `j <= 3` --> true\r\n      * `i + j` --> 4 // 실행조건 미충족\r\n  \r\n  * step 2-3\r\n    * `j++` // j는 3\r\n    * `j <= 3` --> true\r\n      * `i + j` --> 5 // 실행조건 미충족\r\n  \r\n  * step 2-4\r\n    * `j++` // j는 4\r\n    * j <= 4 --> false // for문 종료\r\n\r\n\r\n이렇게 바깥의 for문의 각각의 루프 한번마다 중첩된 for문이 끝까지 반복됩니다.\r\n\r\n보통 중첩되는 for문의 변수를 선언할 경우에는 `i j k l m n` 순으로 작성합니다. 일종의 관례입니다.\r\n\r\n\r\n다음 글에서는 지금까지 몇 번 언급했던 암묵적 타입 변환에 대해 알아보겠습니다.\r\n\r\n\r\n◾ [자바스크립트 제어문(1) - 조건문](/tech/let-me-know-js-a-bit-js-control-flow-statement-conditional) 👈 이전 글 보기\r\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#while%EB%AC%B8\">while문</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B4%ED%95%9C-%EB%A3%A8%ED%94%84\">무한 루프</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dowhile%EB%AC%B8\">do...while문</a></p>\n</li>\n<li>\n<p><a href=\"#for%EB%AC%B8\">for문</a></p>\n<ul>\n<li>\n<p><a href=\"#for%EB%AC%B8%EC%9D%98-%EB%8F%99%EC%9E%91\">for문의 동작</a></p>\n</li>\n<li>\n<p><a href=\"#for%EB%AC%B8%EC%9D%98-%EB%AC%B4%ED%95%9C%EB%A3%A8%ED%94%84\">for문의 무한루프</a></p>\n<ul>\n<li><a href=\"#%EC%84%A0%ED%83%9D%EC%A0%81-%EC%8B%9D-%EC%82%AC%EC%9A%A9\">선택적 식 사용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#for%EB%AC%B8%EC%9D%98-%EC%A4%91%EC%B2%A9\">for문의 중첩</a></p>\n</li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/let-me-know-js-a-bit-js-control-flow-statement-loop"}},"staticQueryHashes":["2665612806"]}