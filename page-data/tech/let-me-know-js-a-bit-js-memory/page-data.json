{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/let-me-know-js-a-bit-js-memory","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/let-me-know-js-a-bit-js-memory","tags":["쫌만알자"],"date":"2022-11-02","img":"https://user-images.githubusercontent.com/76241233/177932893-5a504b26-12e4-4ade-b1ce-1951d072ba82.jpg","title":"쫌만알자! (15) - 자바스크립트의 메모리"},"excerpt":"와 같은 저급 언어는 메모리 관리를 명시적으로 합니다. 반면 자바스크립트에서는 어떤 작업(객체 생성, 문자열 할당 등...)을 할 때 메모리가 할당되고, 사용되지 않을 때에 자동으로 메모리가 반환됩니다. 이를 가비지 컬렉션(garbage…","html":"<p><code class=\"language-text\">C</code> 와 같은 저급 언어는 메모리 관리를 명시적으로 합니다. 반면 자바스크립트에서는 어떤 작업(객체 생성, 문자열 할당 등...)을 할 때 메모리가 할당되고, 사용되지 않을 때에 <strong>자동으로</strong> 메모리가 반환됩니다. 이를 가비지 컬렉션(garbage collection)이라고 합니다.</p>\n<p>사실 ECMAScript 사양에서는 변수를 통해 메모리를 어떻게 관리해야 하는지 나와있지 않습니다. 또한 자바스크립트가 자동으로 관리해주기도 합니다.</p>\n<p>그래도 자바스크립트 코드가 메모리에 어떻게 저장되는지, 메모리에 대해 대략적으로 알고 가보도록 합시다.</p>\n<h2 id=\"메모리란\" style=\"position:relative;\">메모리란?<a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%9E%80\" aria-label=\"메모리란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"/tech/let-me-know-js-a-bit-js-variable\">변수 사용하기</a> 에서 메모리를 언급한 적이 있습니다. 변수를 <strong>하나의 값을 저장할 수 있는 메모리 공간</strong> 이라고 말했었죠.</p>\n<p>이렇듯 메모리는 자바스크립트 엔진 내에서 데이터를 저장하고, 외부에서 접근할 수 있는 메모리 주소를 제공합니다.</p>\n<h3 id=\"메모리-lifecycle\" style=\"position:relative;\">메모리 LifeCycle<a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-lifecycle\" aria-label=\"메모리 lifecycle permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>메모리는 생명주기가 있습니다. 생성되고, 사용된 후, 소멸되는 과정이 생명 주기입니다.</p>\n<p>메모리의 라이프사이클은 대부분의 언어가 비슷합니다.</p>\n<ol>\n<li>필요할 때 할당</li>\n<li>할당된 메모리 사용</li>\n<li>필요하지 않으면 해제</li>\n</ol>\n<p>이 과정 중 2번은 모든 언어에서 명시적으로 사용되나, 1번과 3번은 고수준언어에서는 암묵적으로 사용됩니다. 자바스크립트는 고급언어이기 때문에 해당 과정이 암묵적으로 진행됩니다.</p>\n<hr>\n<br/>\n<h2 id=\"스택--힙\" style=\"position:relative;\">스택 &#x26; 힙<a href=\"#%EC%8A%A4%ED%83%9D--%ED%9E%99\" aria-label=\"스택  힙 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>우리는 이제 자바스크립트 엔진은 필요하면 메모리를 할당하고, 필요하지 않으면 해제한다는 것을 알았습니다. 그럼 어디에 어떻게 저장되는 걸까요?</p>\n<p>데이터를 저장할 수 있는 위치는 2 가지가 있습니다. 바로 스택(Stack)과 힙(Heap)입니다.\r\n<br/></p>\n<h3 id=\"스택-정적-메모리-할당\" style=\"position:relative;\">스택: 정적 메모리 할당<a href=\"#%EC%8A%A4%ED%83%9D-%EC%A0%95%EC%A0%81-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9\" aria-label=\"스택 정적 메모리 할당 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바스크립트는 정적 데이터를 스택(Stack) 형태로 저장합니다. 여기서 정적 데이터란, <code class=\"language-text\">const</code> 처럼 변하지 않는, 즉 자바스크립트 엔진이 컴파일 시에 크기를 알고 있는 데이터를 일컫습니다.</p>\n<p>엔진은 크기가 변경되지 않는다는 것을 알고 있으므로, 각 값에 대해 <strong>고정된 메모리 크기</strong>를 할당합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const alwaysTrue = true;\r\nconst pie = 3.14; </code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/197654595-a76c5621-90c9-4efb-98c9-949942ccdc70.png\" alt=\"Stack\"></p>\n<p>여기에는 기본 값(string , numbers , booleans , undefined 및 null)과 개체 및 함수를 가리키는 참조(reference)가 포함됩니다.</p>\n<h3 id=\"힙-동적-메모리-할당\" style=\"position:relative;\">힙: 동적 메모리 할당<a href=\"#%ED%9E%99-%EB%8F%99%EC%A0%81-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9\" aria-label=\"힙 동적 메모리 할당 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>동적 데이터는 런타임 시 데이터 크기를 알게 되는 데이터입니다. 크기를 알지 못하니 <strong>고정된 메모리 크기를 할당하지 못합니다.</strong> 필요에 따라 더 많은 공간을 할당하게 됩니다.</p>\n<p>이런 방식을 <strong>동적 메모리 할당</strong>이라고도 합니다.</p>\n<p>스택과 힙의 차이는 이렇습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Stack</th>\n<th>Heap</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Primitive values and references</td>\n<td>Objects and functions</td>\n</tr>\n<tr>\n<td>컴파일 시 사이즈를 알고 있음</td>\n<td>런타임 시 사이즈를 알게 됨</td>\n</tr>\n<tr>\n<td>고정된 메모리 할당</td>\n<td>각각에 제한된 메모리 없음</td>\n</tr>\n</tbody>\n</table>\n<!-- https://media.geeksforgeeks.org/wp-content/uploads/20220614193345/UntitledDiagramdrawio15.png 참고 -->\n<br/>\n<hr>\n<br/>\n<h2 id=\"자바스크립트의-참조reference\" style=\"position:relative;\">자바스크립트의 참조(Reference)<a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%B0%B8%EC%A1%B0reference\" aria-label=\"자바스크립트의 참조reference permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>자바스크립트에서 모든 변수는 먼저 스택에 저장됩니다.</p>\n<p>만약 원시 값(primitive)이 아닌 경우, 스택에는 <strong>힙에 저장된 참조</strong>가 저장됩니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const user = {\r\n  id: 1,\r\n  name: &#39;Yeony&#39;,\r\n  age: 24\r\n}\r\n\r\nconst name = &#39;Nayeon&#39;;\r\n\r\nfunction add(x, y) {\r\n  return x + y;\r\n}\r\n\r\nconst newUser = user;</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/197653935-75012c0a-8ab6-4b0b-8a7a-9c432a017113.png\" alt=\"Stack and Heap\"></p>\n<p>위 코드와 그림을 통해 각각의 값들이 어떻게 저장되는지 알 수 있습니다. 여기서 주의해야 할 점은, <code class=\"language-text\">user</code>와 <code class=\"language-text\">newUser</code>가 같은 객체를 **참조(Reference)**하고 있다는 것입니다.</p>\n<p>같은 객체를 참조한다는 의미는 한 객체의 프로퍼티 값이 바뀌면 그 객체를 참조하고 있는 개별적인 변수의 프로퍼티 값이 다 바뀐다는 것입니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const user = {\r\n  id: 1,\r\n  name: &#39;Yeony&#39;,\r\n  age: 24\r\n}\r\n\r\nconst newUser = user;\r\n\r\nconsole.log(newUser.name); // &#39;Yeony&#39;\r\n\r\n// user 객체의 name 변경\r\nuser.name = &#39;Nayeon&#39;;\r\nconsole.log(newUser.name); // &#39;Nayeon&#39;\r\n\r\n// newUser 객체의 name 변경\r\nnewUser.name = &#39;Kim&#39;;\r\nconsole.log(user.name) // &#39;Kim&#39;</code>\n        </deckgo-highlight-code>\n<p>이렇게 두 개의 변수가 하나의 개체를 가리키고 있기 때문에 값이 같이 바뀌게 됩니다.</p>\n<p>다음 글에서는 참조 값과 관련된 <strong>복사</strong>에 대해 알아보도록 하겠습니다.</p>\n<hr>\n<br/>\n<h2 id=\"reference\" style=\"position:relative;\">Reference<a href=\"#reference\" aria-label=\"reference permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>메모리 관리와 가비지 컬렉션를 좀더 알아보고 싶다면 아래 글을 참고해주세요.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management\">Memory management</a>\r\n<a href=\"https://felixgerschau.com/javascript-memory-management/\">JavaScript's Memory Management Explained</a></p>\n<br/>\n<p>◾ <a href=\"/tech/let-me-know-js-a-bit-js-object\">객체란 무엇일까?</a> 👈 이전 글 보기<br>\n◾ <a href=\"/tech/let-me-know-js-a-bit-shallow-copy-deep-copy\">얕은 복사와 깊은 복사</a> 👈 다음 글 보기</p>","internal":{"content":"\r\n`C` 와 같은 저급 언어는 메모리 관리를 명시적으로 합니다. 반면 자바스크립트에서는 어떤 작업(객체 생성, 문자열 할당 등...)을 할 때 메모리가 할당되고, 사용되지 않을 때에 **자동으로** 메모리가 반환됩니다. 이를 가비지 컬렉션(garbage collection)이라고 합니다. \r\n\r\n사실 ECMAScript 사양에서는 변수를 통해 메모리를 어떻게 관리해야 하는지 나와있지 않습니다. 또한 자바스크립트가 자동으로 관리해주기도 합니다.\r\n\r\n그래도 자바스크립트 코드가 메모리에 어떻게 저장되는지, 메모리에 대해 대략적으로 알고 가보도록 합시다.\r\n\r\n## 메모리란?\r\n\r\n[변수 사용하기](/tech/let-me-know-js-a-bit-js-variable) 에서 메모리를 언급한 적이 있습니다. 변수를 **하나의 값을 저장할 수 있는 메모리 공간** 이라고 말했었죠.\r\n\r\n이렇듯 메모리는 자바스크립트 엔진 내에서 데이터를 저장하고, 외부에서 접근할 수 있는 메모리 주소를 제공합니다.\r\n\r\n### 메모리 LifeCycle\r\n\r\n메모리는 생명주기가 있습니다. 생성되고, 사용된 후, 소멸되는 과정이 생명 주기입니다.\r\n\r\n메모리의 라이프사이클은 대부분의 언어가 비슷합니다. \r\n\r\n1. 필요할 때 할당\r\n2. 할당된 메모리 사용\r\n3. 필요하지 않으면 해제\r\n\r\n이 과정 중 2번은 모든 언어에서 명시적으로 사용되나, 1번과 3번은 고수준언어에서는 암묵적으로 사용됩니다. 자바스크립트는 고급언어이기 때문에 해당 과정이 암묵적으로 진행됩니다.\r\n\r\n---\r\n\r\n<br/>\r\n\r\n## 스택 & 힙\r\n\r\n우리는 이제 자바스크립트 엔진은 필요하면 메모리를 할당하고, 필요하지 않으면 해제한다는 것을 알았습니다. 그럼 어디에 어떻게 저장되는 걸까요? \r\n\r\n데이터를 저장할 수 있는 위치는 2 가지가 있습니다. 바로 스택(Stack)과 힙(Heap)입니다.\r\n<br/>\r\n\r\n### 스택: 정적 메모리 할당\r\n\r\n자바스크립트는 정적 데이터를 스택(Stack) 형태로 저장합니다. 여기서 정적 데이터란, `const` 처럼 변하지 않는, 즉 자바스크립트 엔진이 컴파일 시에 크기를 알고 있는 데이터를 일컫습니다. \r\n\r\n엔진은 크기가 변경되지 않는다는 것을 알고 있으므로, 각 값에 대해 **고정된 메모리 크기**를 할당합니다.\r\n\r\n\r\n```javascript\r\nconst alwaysTrue = true;\r\nconst pie = 3.14; \r\n```\r\n\r\n![Stack](https://user-images.githubusercontent.com/76241233/197654595-a76c5621-90c9-4efb-98c9-949942ccdc70.png)\r\n\r\n\r\n여기에는 기본 값(string , numbers , booleans , undefined 및 null)과 개체 및 함수를 가리키는 참조(reference)가 포함됩니다.\r\n\r\n\r\n### 힙: 동적 메모리 할당\r\n\r\n동적 데이터는 런타임 시 데이터 크기를 알게 되는 데이터입니다. 크기를 알지 못하니 **고정된 메모리 크기를 할당하지 못합니다.** 필요에 따라 더 많은 공간을 할당하게 됩니다.\r\n\r\n이런 방식을 **동적 메모리 할당**이라고도 합니다.\r\n\r\n\r\n스택과 힙의 차이는 이렇습니다.\r\n\r\n|  Stack | Heap |\r\n| ------ | ---- |\r\n| Primitive values and references | Objects and functions |\r\n| 컴파일 시 사이즈를 알고 있음 | 런타임 시 사이즈를 알게 됨 |\r\n| 고정된 메모리 할당 | 각각에 제한된 메모리 없음 |\r\n\r\n\r\n<!-- https://media.geeksforgeeks.org/wp-content/uploads/20220614193345/UntitledDiagramdrawio15.png 참고 -->\r\n\r\n<br/>\r\n\r\n---\r\n\r\n<br/>\r\n\r\n## 자바스크립트의 참조(Reference)\r\n\r\n자바스크립트에서 모든 변수는 먼저 스택에 저장됩니다. \r\n\r\n만약 원시 값(primitive)이 아닌 경우, 스택에는 **힙에 저장된 참조**가 저장됩니다.\r\n\r\n```javascript\r\nconst user = {\r\n  id: 1,\r\n  name: 'Yeony',\r\n  age: 24\r\n}\r\n\r\nconst name = 'Nayeon';\r\n\r\nfunction add(x, y) {\r\n  return x + y;\r\n}\r\n\r\nconst newUser = user;\r\n```\r\n\r\n![Stack and Heap](https://user-images.githubusercontent.com/76241233/197653935-75012c0a-8ab6-4b0b-8a7a-9c432a017113.png)\r\n\r\n위 코드와 그림을 통해 각각의 값들이 어떻게 저장되는지 알 수 있습니다. 여기서 주의해야 할 점은, `user`와 `newUser`가 같은 객체를 **참조(Reference)**하고 있다는 것입니다.\r\n\r\n같은 객체를 참조한다는 의미는 한 객체의 프로퍼티 값이 바뀌면 그 객체를 참조하고 있는 개별적인 변수의 프로퍼티 값이 다 바뀐다는 것입니다.\r\n\r\n```javascript\r\nconst user = {\r\n  id: 1,\r\n  name: 'Yeony',\r\n  age: 24\r\n}\r\n\r\nconst newUser = user;\r\n\r\nconsole.log(newUser.name); // 'Yeony'\r\n\r\n// user 객체의 name 변경\r\nuser.name = 'Nayeon';\r\nconsole.log(newUser.name); // 'Nayeon'\r\n\r\n// newUser 객체의 name 변경\r\nnewUser.name = 'Kim';\r\nconsole.log(user.name) // 'Kim'\r\n```\r\n\r\n이렇게 두 개의 변수가 하나의 개체를 가리키고 있기 때문에 값이 같이 바뀌게 됩니다.\r\n\r\n다음 글에서는 참조 값과 관련된 **복사**에 대해 알아보도록 하겠습니다.\r\n\r\n---\r\n<br/>\r\n\r\n## Reference\r\n\r\n메모리 관리와 가비지 컬렉션를 좀더 알아보고 싶다면 아래 글을 참고해주세요.\r\n\r\n[Memory management](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management)\r\n[JavaScript's Memory Management Explained](https://felixgerschau.com/javascript-memory-management/)\r\n\r\n<br/>\r\n\r\n\r\n◾ [객체란 무엇일까?](/tech/let-me-know-js-a-bit-js-object) 👈 이전 글 보기   \r\n◾ [얕은 복사와 깊은 복사](/tech/let-me-know-js-a-bit-shallow-copy-deep-copy) 👈 다음 글 보기\r\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%9E%80\">메모리란?</a></p>\n<ul>\n<li><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-lifecycle\">메모리 LifeCycle</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%ED%83%9D--%ED%9E%99\">스택 &#x26; 힙</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%83%9D-%EC%A0%95%EC%A0%81-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9\">스택: 정적 메모리 할당</a></li>\n<li><a href=\"#%ED%9E%99-%EB%8F%99%EC%A0%81-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9\">힙: 동적 메모리 할당</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%B0%B8%EC%A1%B0reference\">자바스크립트의 참조(Reference)</a></p>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/let-me-know-js-a-bit-js-memory"}},"staticQueryHashes":["2665612806"]}