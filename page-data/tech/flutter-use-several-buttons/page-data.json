{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/tech/flutter-use-several-buttons",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/flutter-use-several-buttons","tags":["스터디 Flutter"],"date":"2022-10-07","img":null,"title":"[Flutter] 다양한 버튼 사용하기"},"excerpt":"Flutter Buttons 사용하기 플러터는 다양한 버튼을 위젯으로 제공합니다. 이 코드를 기본으로 두고 시작해봅시다.\n TextButton TextButton…","html":"<h2 id=\"flutter-buttons-사용하기\" style=\"position:relative;\">Flutter Buttons 사용하기<a href=\"#flutter-buttons-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"flutter buttons 사용하기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>플러터는 다양한 버튼을 위젯으로 제공합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import &#39;package:flutter/material.dart&#39;;\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: &#39;MaterialApp&#39;,\n      home: Scaffold(\n          appBar: AppBar(\n            title: Text(&#39;Flutter Buttons&#39;),\n            centerTitle: true,\n          ),\n          body: Center(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n              children: &lt;Widget&gt;[\n                // Write your Buttons!\n              ],\n            ),\n          )),\n    );\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>이 코드를 기본으로 두고 시작해봅시다.\n<br/><br/></p>\n<h3 id=\"textbutton\" style=\"position:relative;\">TextButton<a href=\"#textbutton\" aria-label=\"textbutton permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>TextButton은 이름 그대로 버튼으로 동작하는 텍스트입니다.<br>\n테두리가 보이지 않아, 주의해서 배치해야합니다.</p>\n<p>TextButton은 이렇게 구성됩니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const TextButton({\n  Key? key,\n  required void Function()? onPressed,\n  void Function()? onLongPress,\n  void Function(bool)? onHover,\n  void Function(bool)? onFocusChange,\n  ButtonStyle? style,\n  FocusNode? focusNode,\n  bool autofocus = false,\n  Clip clipBehavior = Clip.none,\n  required Widget child,\n})</code>\n        </deckgo-highlight-code>\n<p>예시를 살펴봅시다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"> body: Center(\n  child: Column(\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n    children: &lt;Widget&gt;[\n      TextButton(\n        style: TextButton.styleFrom(\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: null,\n        child: const Text(&#39;Disabled&#39;),\n      ),\n      TextButton(\n        style: TextButton.styleFrom(\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: () {},\n        child: const Text(&#39;Click Me!&#39;),\n      ),\n      TextButton(\n        style: TextButton.styleFrom(\n          backgroundColor: Colors.amber,\n          primary: Colors.white,\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: () {},\n        child: const Text(&#39;Set primary!&#39;),\n      ),\n    ],\n  ),\n)</code>\n        </deckgo-highlight-code>\n<p>화면에는 이렇게 보여집니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/194450721-5f36a597-550c-4f18-9a5e-1c25c712beef.png\" alt=\"flutter TextButton\"></p>\n<p>TextButton에서 글자색상을 변경할 경우에는 <code class=\"language-text\">TextButton.styleFrom</code>에서 primary 속성을 지정해 변경할 수 있습니다.</p>\n<p>보다 자세한 색상 변경에 관해서는 <a href=\"https://www.flutterbeads.com/text-button-color-in-flutter/\">Changing Text Button Color in Flutter – The Right Way in 2022</a> 를 참고해주세요.</p>\n<br/>\n<h3 id=\"elevatedbutton\" style=\"position:relative;\">ElevatedButton<a href=\"#elevatedbutton\" aria-label=\"elevatedbutton permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>ElevatedButton은 오른쪽과 아래쪽으로 그림자가 생겨 버튼이 주변과 구분됩니다.</p>\n<p>이렇게 구성됩니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const ElevatedButton({\n  Key? key,\n  required VoidCallback? onPressed,\n  VoidCallback? onLongPress,\n  ValueChanged&lt;bool&gt;? onHover,\n  ValueChanged&lt;bool&gt;? onFocusChange,\n  ButtonStyle? style,\n  FocusNode? focusNode,\n  bool autofocus = false,\n  Clip clipBehavior = Clip.none,\n  required Widget? child,\n})</code>\n        </deckgo-highlight-code>\n<p>예제는 TextButton과 큰 차이가 없습니다. 다만 명확하게 border가 있어 구분됩니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"> body: Center(\n  child: Column(\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n    children: &lt;Widget&gt;[\n      ElevatedButton(\n        style: TextButton.styleFrom(\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: null,\n        child: const Text(&#39;Disabled&#39;),\n      ),\n      ElevatedButton(\n        style: TextButton.styleFrom(\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: () {},\n        child: const Text(&#39;Click Me!&#39;),\n      ),\n      ElevatedButton(\n        style: ElevatedButton.styleFrom(\n          primary: Colors.amber,\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: () {},\n        child: const Text(&#39;Set primary!&#39;),\n      ),\n    ],\n  ),\n)</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">ElevatedButton.styleFfrom</code> 으로 스타일을 지정합니다. TextButton과 다르게 primary를 지정하면 배경색이 바뀝니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/194460842-ba2965a7-3654-4b38-8f66-55846cdfb5b4.png\" alt=\"Flutter ElevatedButton\"></p>\n<br/>\n<h3 id=\"outlinedbutton\" style=\"position:relative;\">OutlinedButton<a href=\"#outlinedbutton\" aria-label=\"outlinedbutton permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>이름 그대로 테두리가 있는 버튼입니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const OutlinedButton({\n  Key? key,\n  required VoidCallback? onPressed,\n  VoidCallback? onLongPress,\n  ValueChanged&lt;bool&gt;? onHover,\n  ValueChanged&lt;bool&gt;? onFocusChange,\n  ButtonStyle? style,\n  FocusNode? focusNode,\n  bool autofocus = false,\n  Clip clipBehavior = Clip.none,\n  required Widget child,\n})</code>\n        </deckgo-highlight-code>\n<p>앞선 버튼들과 크게 다르지 않지만, 테두리 색상이 기본적으로 회색으로 지정되어 있습니다.\n<code class=\"language-text\">side: BorderSide(widht: 2.0, color: Colors.amber)</code> 등으로 속성을 지정하면 테두리 색깔을 바꿀 수 있습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"> body: Center(\n    child: Column(\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n      children: &lt;Widget&gt;[\n        OutlinedButton(\n          style: OutlinedButton.styleFrom(\n            textStyle: const TextStyle(fontSize: 20),\n          ),\n          onPressed: null,\n          child: const Text(&#39;Disabled&#39;),\n        ),\n        OutlinedButton(\n          style: OutlinedButton.styleFrom(\n            textStyle: const TextStyle(fontSize: 20),\n          ),\n          onPressed: () {},\n          child: const Text(&#39;Click Me!&#39;),\n        ),\n        OutlinedButton(\n          style: OutlinedButton.styleFrom(\n            primary: Colors.amber,\n            // Border Style 변경\n            side: BorderSide(width: 2.0, color: Colors.amber),\n            textStyle: const TextStyle(fontSize: 20),\n          ),\n          onPressed: () {},\n          child: const Text(&#39;Set primary!&#39;),\n        ),\n      ],\n    ),\n  )\n),</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/194468926-efe48563-af80-4709-bb37-aeb53d42a1f9.png\" alt=\"Flutter OutlinedButton\"></p>\n<br/>\n<h3 id=\"iconbutton\" style=\"position:relative;\">IconButton<a href=\"#iconbutton\" aria-label=\"iconbutton permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>아이콘으로 버튼을 만들 수 있습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const IconButton({\n  Key? key,\n  this.iconSize,\n  this.visualDensity,\n  this.padding = const EdgeInsets.all(8.0),\n  this.alignment = Alignment.center,\n  this.splashRadius,\n  this.color,\n  this.focusColor,\n  this.hoverColor,\n  this.highlightColor,\n  this.splashColor,\n  this.disabledColor,\n  required this.onPressed,\n  this.mouseCursor,\n  this.focusNode,\n  this.autofocus = false,\n  this.tooltip,\n  this.enableFeedback = true,\n  this.constraints,\n  required this.icon,\n})</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">body: Center(\n  child: Column(\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n    children: &lt;Widget&gt;[\n      IconButton(\n        icon: const Icon(Icons.arrow_back),\n        onPressed: null,\n      ),\n      IconButton(\n        icon: const Icon(Icons.arrow_forward),\n        onPressed: () {},\n      ),\n      IconButton(\n        icon: const Icon(Icons.alarm_add),\n        onPressed: () {},\n      ),\n    ],\n  ),\n)</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/194475945-2e87a65d-cf96-4875-825a-fe3462757f12.png\" alt=\"Flutter IconButton\"></p>\n<br/>\n<h3 id=\"floatingactionbutton\" style=\"position:relative;\">FloatingActionButton<a href=\"#floatingactionbutton\" aria-label=\"floatingactionbutton permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">FloatingActionButton</code>은 둥둥 떠있는 버튼입니다.</p>\n<p>이 버튼을 사용하기 위해서는 <code class=\"language-text\">Scaffold</code> 위젯에 <code class=\"language-text\">floatingActionButton</code> 속성을 추가해야 합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Scaffold(\n  floatingActionButton: FloatingActionButton(),\n),</code>\n        </deckgo-highlight-code>\n<p>이렇게 아이콘을 지정할 수 있습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">floatingActionButton: FloatingActionButton(\n  onPressed: () {},\n  child: const Icon(Icons.thumb_up),\n  backgroundColor: Colors.pink,\n),</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/194480681-d2b0b282-2867-47ae-bcd3-df9d74fffadb.png\" alt=\"Flutter FloatingActionButton\"></p>\n<p>만약 버튼에 label을 넣고 싶다면, <code class=\"language-text\">FloatingActionButton.extended</code>를 이용해 작성합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">floatingActionButton: FloatingActionButton.extended(\n  onPressed: () {},\n  icon: Icon(Icons.thumb_up),\n  label: Text(&#39;Thumb Up!&#39;),\n  backgroundColor: Colors.pink,\n),</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/194481144-024867c9-3ebd-4efb-8303-915475bad22c.png\" alt=\"Flutter FloatingActionButton extended\"></p>\n<br/>\n<h3 id=\"popupmenubutton\" style=\"position:relative;\">PopupMenuButton<a href=\"#popupmenubutton\" aria-label=\"popupmenubutton permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>이 버튼을 사용하려면 <code class=\"language-text\">Scaffold</code>의 <code class=\"language-text\">AppBar</code> 위젯에 actions 속성을 추가합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Scaffold(\n  appBar: AppBar(\n    title: Text(&#39;Flutter Buttons&#39;),\n    centerTitle: true,\n    actions: [\n      PopupMenuButton(\n          itemBuilder: (context) =&gt; [\n                PopupMenuItem(\n                  child: Text(&quot;First&quot;),\n                  value: 1,\n                ),\n                PopupMenuItem(\n                  child: Text(&quot;Second&quot;),\n                  value: 2,\n                )\n              ])\n    ],\n  ),\n)</code>\n        </deckgo-highlight-code>\n<img src=\"https://user-images.githubusercontent.com/76241233/194481812-9aaa08f3-8760-4c9e-a3f2-97e10bde5867.png\" alt=\"Flutter PopupMenuButton closed\">\n<img src=\"https://user-images.githubusercontent.com/76241233/194481750-70fc7ba9-7b99-4ebe-ac1b-0030b62c4f8e.png\" alt=\"Flutter PopupMenuButton opened\"> \n<h3 id=\"dropdownbutton\" style=\"position:relative;\">DropdownButton<a href=\"#dropdownbutton\" aria-label=\"dropdownbutton permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>web의 select 기능을 하는 버튼입니다. Dropdown을 사용하기 위해서는 먼저 StatefulWidget으로 변경합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">DropdownButton({\n  Key key, \n  @required List&lt;DropdownMenuItem&lt;T&gt;&gt; items, \n  DropdownButtonBuilder selectedItemBuilder, \n  T value, \n  Widget hint, \n  Widget disabledHint, \n  @required ValueChanged&lt;T&gt; onChanged, \n  VoidCallback onTap, \n  int elevation: 8, \n  TextStyle style, \n  Widget underline, \n  Widget icon, \n  Color iconDisabledColor, \n  Color iconEnabledColor, \n  double iconSize: 24.0, \n  bool isDense: false, \n  bool isExpanded: false, \n  double itemHeight: kMinInteractiveDimension,\n  Color focusColor, \n  FocusNode focusNode, \n  bool autofocus: false, \n  Color dropdownColor\n})</code>\n        </deckgo-highlight-code>\n<p>StatefulWidget으로 바꾸는 이유는 DropdownButton으로 선택된 값이라는 <strong>상태 변화</strong>가 있기 때문입니다.</p>\n<p>Stateless에서도 DropdownButton을 그릴 수는 있지만, setState를 사용하지 못하기 때문에 의미가 없습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import &#39;package:flutter/material.dart&#39;;\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: &#39;MaterialApp&#39;,\n      home: const MyHomePage(),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key}) : super(key: key);\n\n  @override\n  _MyHomePageState createState() =&gt; _MyHomePageState();\n}\n\nclass _MyHomePageState extends State&lt;MyHomePage&gt; {\n// Initial Selected Value\n  String dropdownvalue = &#39;Item 1&#39;;\n\n// List of items in our dropdown menu\n  var items = [\n    &#39;Item 1&#39;,\n    &#39;Item 2&#39;,\n    &#39;Item 3&#39;,\n    &#39;Item 4&#39;,\n    &#39;Item 5&#39;,\n  ];\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(&#39;Flutter Buttons&#39;),\n        centerTitle: true,\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            DropdownButton(\n              // Initial Value\n              value: dropdownvalue,\n\n              // Down Arrow Icon\n              icon: const Icon(Icons.keyboard_arrow_down),\n\n              // Array list of items\n              items: items.map((String items) {\n                return DropdownMenuItem(\n                  value: items,\n                  child: Text(items),\n                );\n              }).toList(),\n              // After selecting the desired option,it will\n              // change button value to selected value\n              onChanged: (String? newValue) {\n                setState(() {\n                  dropdownvalue = newValue!;\n                });\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}</code>\n        </deckgo-highlight-code>\n<br/>\n<hr>\n<h2 id=\"onpressed-null-or--\" style=\"position:relative;\">onPressed null or () {}<a href=\"#onpressed-null-or--\" aria-label=\"onpressed null or   permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>버튼에서는 <code class=\"language-text\">onPressed</code> 라는 클릭 이벤트를 정의할 수 있습니다.</p>\n<p>위의 예제에서는 onPressed를 <code class=\"language-text\">null</code>로 두는 경우와, <code class=\"language-text\">() {}</code> 로 두는 경우가 있었습니다.</p>\n<ul>\n<li>null : disabled</li>\n<li>() {} : 클릭시 실행될 함수를 정의하지 않은 것</li>\n</ul>\n<p>이러한 차이가 있습니다.</p>\n<p>◾ <a href=\"/tech/flutter-use-several-widgets\">[Flutter] 다양한 위젯 사용하기</a> 👈 이전 글 보기<br>\n◾ <a href=\"/tech/flutter-use-several-components\">[Flutter] Form, Alert에 사용할 수 있는 플러터 컴포넌트</a> 👈 다음 글 보기</p>","internal":{"content":"## Flutter Buttons 사용하기\n\n플러터는 다양한 버튼을 위젯으로 제공합니다.\n\n```dart\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'MaterialApp',\n      home: Scaffold(\n          appBar: AppBar(\n            title: Text('Flutter Buttons'),\n            centerTitle: true,\n          ),\n          body: Center(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n              children: <Widget>[\n                // Write your Buttons!\n              ],\n            ),\n          )),\n    );\n  }\n}\n```\n\n이 코드를 기본으로 두고 시작해봅시다. \n<br/><br/>\n\n### TextButton \n\nTextButton은 이름 그대로 버튼으로 동작하는 텍스트입니다.    \n테두리가 보이지 않아, 주의해서 배치해야합니다.\n\nTextButton은 이렇게 구성됩니다.\n\n```dart\nconst TextButton({\n  Key? key,\n  required void Function()? onPressed,\n  void Function()? onLongPress,\n  void Function(bool)? onHover,\n  void Function(bool)? onFocusChange,\n  ButtonStyle? style,\n  FocusNode? focusNode,\n  bool autofocus = false,\n  Clip clipBehavior = Clip.none,\n  required Widget child,\n})\n```\n\n예시를 살펴봅시다.\n\n```dart\n body: Center(\n  child: Column(\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n    children: <Widget>[\n      TextButton(\n        style: TextButton.styleFrom(\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: null,\n        child: const Text('Disabled'),\n      ),\n      TextButton(\n        style: TextButton.styleFrom(\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: () {},\n        child: const Text('Click Me!'),\n      ),\n      TextButton(\n        style: TextButton.styleFrom(\n          backgroundColor: Colors.amber,\n          primary: Colors.white,\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: () {},\n        child: const Text('Set primary!'),\n      ),\n    ],\n  ),\n)\n```\n\n화면에는 이렇게 보여집니다.\n\n![flutter TextButton](https://user-images.githubusercontent.com/76241233/194450721-5f36a597-550c-4f18-9a5e-1c25c712beef.png)\n\nTextButton에서 글자색상을 변경할 경우에는 `TextButton.styleFrom`에서 primary 속성을 지정해 변경할 수 있습니다.\n\n\n보다 자세한 색상 변경에 관해서는 [Changing Text Button Color in Flutter – The Right Way in 2022](https://www.flutterbeads.com/text-button-color-in-flutter/) 를 참고해주세요.\n\n<br/>\n\n### ElevatedButton\n\nElevatedButton은 오른쪽과 아래쪽으로 그림자가 생겨 버튼이 주변과 구분됩니다.\n\n이렇게 구성됩니다.\n\n```dart\nconst ElevatedButton({\n  Key? key,\n  required VoidCallback? onPressed,\n  VoidCallback? onLongPress,\n  ValueChanged<bool>? onHover,\n  ValueChanged<bool>? onFocusChange,\n  ButtonStyle? style,\n  FocusNode? focusNode,\n  bool autofocus = false,\n  Clip clipBehavior = Clip.none,\n  required Widget? child,\n})\n```\n\n예제는 TextButton과 큰 차이가 없습니다. 다만 명확하게 border가 있어 구분됩니다.\n\n```dart\n body: Center(\n  child: Column(\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n    children: <Widget>[\n      ElevatedButton(\n        style: TextButton.styleFrom(\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: null,\n        child: const Text('Disabled'),\n      ),\n      ElevatedButton(\n        style: TextButton.styleFrom(\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: () {},\n        child: const Text('Click Me!'),\n      ),\n      ElevatedButton(\n        style: ElevatedButton.styleFrom(\n          primary: Colors.amber,\n          textStyle: const TextStyle(fontSize: 20),\n        ),\n        onPressed: () {},\n        child: const Text('Set primary!'),\n      ),\n    ],\n  ),\n)\n```\n\n`ElevatedButton.styleFfrom` 으로 스타일을 지정합니다. TextButton과 다르게 primary를 지정하면 배경색이 바뀝니다.\n\n![Flutter ElevatedButton](https://user-images.githubusercontent.com/76241233/194460842-ba2965a7-3654-4b38-8f66-55846cdfb5b4.png)\n\n<br/>\n\n### OutlinedButton\n\n이름 그대로 테두리가 있는 버튼입니다.\n\n```dart\nconst OutlinedButton({\n  Key? key,\n  required VoidCallback? onPressed,\n  VoidCallback? onLongPress,\n  ValueChanged<bool>? onHover,\n  ValueChanged<bool>? onFocusChange,\n  ButtonStyle? style,\n  FocusNode? focusNode,\n  bool autofocus = false,\n  Clip clipBehavior = Clip.none,\n  required Widget child,\n})\n```\n\n앞선 버튼들과 크게 다르지 않지만, 테두리 색상이 기본적으로 회색으로 지정되어 있습니다.\n`side: BorderSide(widht: 2.0, color: Colors.amber)` 등으로 속성을 지정하면 테두리 색깔을 바꿀 수 있습니다.\n\n```dart\n body: Center(\n    child: Column(\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n      children: <Widget>[\n        OutlinedButton(\n          style: OutlinedButton.styleFrom(\n            textStyle: const TextStyle(fontSize: 20),\n          ),\n          onPressed: null,\n          child: const Text('Disabled'),\n        ),\n        OutlinedButton(\n          style: OutlinedButton.styleFrom(\n            textStyle: const TextStyle(fontSize: 20),\n          ),\n          onPressed: () {},\n          child: const Text('Click Me!'),\n        ),\n        OutlinedButton(\n          style: OutlinedButton.styleFrom(\n            primary: Colors.amber,\n            // Border Style 변경\n            side: BorderSide(width: 2.0, color: Colors.amber),\n            textStyle: const TextStyle(fontSize: 20),\n          ),\n          onPressed: () {},\n          child: const Text('Set primary!'),\n        ),\n      ],\n    ),\n  )\n),\n```\n\n![Flutter OutlinedButton](https://user-images.githubusercontent.com/76241233/194468926-efe48563-af80-4709-bb37-aeb53d42a1f9.png)\n\n<br/>\n\n### IconButton\n\n아이콘으로 버튼을 만들 수 있습니다.\n\n```dart\nconst IconButton({\n  Key? key,\n  this.iconSize,\n  this.visualDensity,\n  this.padding = const EdgeInsets.all(8.0),\n  this.alignment = Alignment.center,\n  this.splashRadius,\n  this.color,\n  this.focusColor,\n  this.hoverColor,\n  this.highlightColor,\n  this.splashColor,\n  this.disabledColor,\n  required this.onPressed,\n  this.mouseCursor,\n  this.focusNode,\n  this.autofocus = false,\n  this.tooltip,\n  this.enableFeedback = true,\n  this.constraints,\n  required this.icon,\n})\n```\n\n```dart\nbody: Center(\n  child: Column(\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n    children: <Widget>[\n      IconButton(\n        icon: const Icon(Icons.arrow_back),\n        onPressed: null,\n      ),\n      IconButton(\n        icon: const Icon(Icons.arrow_forward),\n        onPressed: () {},\n      ),\n      IconButton(\n        icon: const Icon(Icons.alarm_add),\n        onPressed: () {},\n      ),\n    ],\n  ),\n)\n```\n\n![Flutter IconButton](https://user-images.githubusercontent.com/76241233/194475945-2e87a65d-cf96-4875-825a-fe3462757f12.png)\n\n<br/>\n\n### FloatingActionButton\n\n`FloatingActionButton`은 둥둥 떠있는 버튼입니다. \n\n이 버튼을 사용하기 위해서는 `Scaffold` 위젯에 `floatingActionButton` 속성을 추가해야 합니다.\n\n```dart\nScaffold(\n  floatingActionButton: FloatingActionButton(),\n),\n```\n\n이렇게 아이콘을 지정할 수 있습니다.\n\n```dart\nfloatingActionButton: FloatingActionButton(\n  onPressed: () {},\n  child: const Icon(Icons.thumb_up),\n  backgroundColor: Colors.pink,\n),\n```\n\n![Flutter FloatingActionButton](https://user-images.githubusercontent.com/76241233/194480681-d2b0b282-2867-47ae-bcd3-df9d74fffadb.png)\n\n만약 버튼에 label을 넣고 싶다면, `FloatingActionButton.extended`를 이용해 작성합니다.\n\n```dart\nfloatingActionButton: FloatingActionButton.extended(\n  onPressed: () {},\n  icon: Icon(Icons.thumb_up),\n  label: Text('Thumb Up!'),\n  backgroundColor: Colors.pink,\n),\n```\n\n![Flutter FloatingActionButton extended](https://user-images.githubusercontent.com/76241233/194481144-024867c9-3ebd-4efb-8303-915475bad22c.png)\n\n<br/>\n\n### PopupMenuButton\n\n이 버튼을 사용하려면 `Scaffold`의 `AppBar` 위젯에 actions 속성을 추가합니다.\n\n```dart\nScaffold(\n  appBar: AppBar(\n    title: Text('Flutter Buttons'),\n    centerTitle: true,\n    actions: [\n      PopupMenuButton(\n          itemBuilder: (context) => [\n                PopupMenuItem(\n                  child: Text(\"First\"),\n                  value: 1,\n                ),\n                PopupMenuItem(\n                  child: Text(\"Second\"),\n                  value: 2,\n                )\n              ])\n    ],\n  ),\n)\n```\n<img src=\"https://user-images.githubusercontent.com/76241233/194481812-9aaa08f3-8760-4c9e-a3f2-97e10bde5867.png\" alt=\"Flutter PopupMenuButton closed\">\n<img src=\"https://user-images.githubusercontent.com/76241233/194481750-70fc7ba9-7b99-4ebe-ac1b-0030b62c4f8e.png\" alt=\"Flutter PopupMenuButton opened\"> \n\n\n### DropdownButton\n\nweb의 select 기능을 하는 버튼입니다. Dropdown을 사용하기 위해서는 먼저 StatefulWidget으로 변경합니다.\n\n```dart\nDropdownButton({\n  Key key, \n  @required List<DropdownMenuItem<T>> items, \n  DropdownButtonBuilder selectedItemBuilder, \n  T value, \n  Widget hint, \n  Widget disabledHint, \n  @required ValueChanged<T> onChanged, \n  VoidCallback onTap, \n  int elevation: 8, \n  TextStyle style, \n  Widget underline, \n  Widget icon, \n  Color iconDisabledColor, \n  Color iconEnabledColor, \n  double iconSize: 24.0, \n  bool isDense: false, \n  bool isExpanded: false, \n  double itemHeight: kMinInteractiveDimension,\n  Color focusColor, \n  FocusNode focusNode, \n  bool autofocus: false, \n  Color dropdownColor\n})\n```\n\nStatefulWidget으로 바꾸는 이유는 DropdownButton으로 선택된 값이라는 **상태 변화**가 있기 때문입니다.\n\nStateless에서도 DropdownButton을 그릴 수는 있지만, setState를 사용하지 못하기 때문에 의미가 없습니다.\n\n```dart\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'MaterialApp',\n      home: const MyHomePage(),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key}) : super(key: key);\n\n  @override\n  _MyHomePageState createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n// Initial Selected Value\n  String dropdownvalue = 'Item 1';\n\n// List of items in our dropdown menu\n  var items = [\n    'Item 1',\n    'Item 2',\n    'Item 3',\n    'Item 4',\n    'Item 5',\n  ];\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Flutter Buttons'),\n        centerTitle: true,\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            DropdownButton(\n              // Initial Value\n              value: dropdownvalue,\n\n              // Down Arrow Icon\n              icon: const Icon(Icons.keyboard_arrow_down),\n\n              // Array list of items\n              items: items.map((String items) {\n                return DropdownMenuItem(\n                  value: items,\n                  child: Text(items),\n                );\n              }).toList(),\n              // After selecting the desired option,it will\n              // change button value to selected value\n              onChanged: (String? newValue) {\n                setState(() {\n                  dropdownvalue = newValue!;\n                });\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n<br/>\n\n---\n\n## onPressed null or () {}\n\n버튼에서는 `onPressed` 라는 클릭 이벤트를 정의할 수 있습니다. \n\n위의 예제에서는 onPressed를 `null`로 두는 경우와, `() {}` 로 두는 경우가 있었습니다.\n\n* null : disabled\n* () {} : 클릭시 실행될 함수를 정의하지 않은 것\n\n이러한 차이가 있습니다.\n\n\n◾ [[Flutter] 다양한 위젯 사용하기](/tech/flutter-use-several-widgets) 👈 이전 글 보기   \n◾ [[Flutter] Form, Alert에 사용할 수 있는 플러터 컴포넌트](/tech/flutter-use-several-components) 👈 다음 글 보기\n\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#flutter-buttons-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">Flutter Buttons 사용하기</a></p>\n<ul>\n<li><a href=\"#textbutton\">TextButton</a></li>\n<li><a href=\"#elevatedbutton\">ElevatedButton</a></li>\n<li><a href=\"#outlinedbutton\">OutlinedButton</a></li>\n<li><a href=\"#iconbutton\">IconButton</a></li>\n<li><a href=\"#floatingactionbutton\">FloatingActionButton</a></li>\n<li><a href=\"#popupmenubutton\">PopupMenuButton</a></li>\n<li><a href=\"#dropdownbutton\">DropdownButton</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#onpressed-null-or--\">onPressed null or () {}</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/flutter-use-several-buttons"}},
    "staticQueryHashes": ["2665612806"]}