{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/flutter-dart-and-flutter","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/flutter-dart-and-flutter","tags":["Flutter Basic"],"date":"2022-09-02","img":"https://user-images.githubusercontent.com/76241233/187564792-d9177d6e-ab8b-4919-8593-128e5ddc9476.png","title":"[Flutter] Dart 기본 문법"},"html":"<h2 id=\"dart란\" style=\"position:relative;\">Dart란?<a href=\"#dart%EB%9E%80\" aria-label=\"dart란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"https://dart.dev/\">다트(Dart)</a>는 구글이 자바스크립트를 대체하기 위해 2011년도 개발한 <strong>멀티 플랫폼</strong> 프로그래밍 언어입니다.</p>\n<p>다트의 특징으로는 모바일 앱, 웹 앱 등 여러 플랫폼을 다트를 이용해 만들 수 있습니다.</p>\n<h3 id=\"dart-특징\" style=\"position:relative;\">Dart 특징<a href=\"#dart-%ED%8A%B9%EC%A7%95\" aria-label=\"dart 특징 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>statically typed\n<ul>\n<li>dynamic type을 지원</li>\n</ul>\n</li>\n<li>객체 지향 언어</li>\n<li>단일 상속 지원</li>\n<li>mixin 지원</li>\n</ul>\n<h2 id=\"dart-자료형\" style=\"position:relative;\">Dart 자료형<a href=\"#dart-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"dart 자료형 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>다트는 <code class=\"language-text\">Java</code> 혹은 <code class=\"language-text\">Javascript</code>와 유사한 문법을 가지고 있습니다.</p>\n<p>먼저 자료형부터 살펴보겠습니다.</p>\n<ul>\n<li>num : 숫자 타입\n<ul>\n<li>int : 정수 타입</li>\n<li>double : 실수 타입</li>\n</ul>\n</li>\n<li>bool : true/false 불리언 타입</li>\n<li>String : 문자열 타입</li>\n<li>List : 중복 허용, 순서가 있는 집합</li>\n<li>Set : 중복 허용하지 않는 순서 없는 집합</li>\n<li>Map : key-value 쌍으로 구성된 집합 (자바스크립트의 Object 타입과 유사)</li>\n</ul>\n<p>변수와 함수 선언 예시는 아래와 같습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">String name;\r\nnum age;\r\n\r\nList&lt;String&gt; students = [&#39;Nayeon&#39;, &#39;Yeony&#39;, &#39;Kim&#39;];\r\n\r\nMap&lt;String, int&gt; scores = {\r\n    &#39;math&#39;: 97,\r\n    &#39;eng&#39;: 77\r\n}\r\n\r\nvoin main() {\r\n    print(&#39;Hello World!&#39;);\r\n}\r\n\r\nString sayHi() {\r\n    return &#39;Hi!&#39;;\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"dynamic\" style=\"position:relative;\">dynamic<a href=\"#dynamic\" aria-label=\"dynamic permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>다트의 특징으로 <strong>dyanmic type</strong>이 있다고 했는데요.</p>\n<p>변수 선언 시 <code class=\"language-text\">dynamic</code>을 붙이면 해당 변수는 모든 형식을 허용하는 형태가 됩니다. 처음 타입이 String이고 후에 int 타입을 할당해도 에러가 나지 않습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">void main() {\r\n    dynamic changing = &#39;Hi!!&#39;;\r\n    changing = 123;\r\n\r\n    print(changing); // 123\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"var\" style=\"position:relative;\">var<a href=\"#var\" aria-label=\"var permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">var</code>는 <strong>타입 추론</strong>을 가능케 하는 키워드입니다.</p>\n<p>타입을 꼭 선언하지 않아도, 변수에 처음으로 할당되는 값에 따라 자동으로 타입을 추론합니다.<br>\n단, 이후 다른 타입의 값이 할당된다 해도 그 변수의 타입은 변경되지 않습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">void main() {\r\n    var age = 10; // age는 int 타입으로 고정\r\n\r\n    age = 20;\r\n    print(age); // 20\r\n\r\n    age = &#39;I am so young&#39;; // Error! (int 변수에는 String을 할당할 수 없음)\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"final--const\" style=\"position:relative;\">final / const<a href=\"#final--const\" aria-label=\"final  const permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바나 자바스크립트에서 볼 수 있던 키워드를 다트에서도 볼 수 있습니다.</p>\n<p>모두 <strong>상수</strong>를 의미하지만 차이가 있습니다.</p>\n<ul>\n<li>const : compile-time constant로 앱 빌드시 값 정해짐.\n<ul>\n<li>life cycle 상 절대 변하지 않음을 의미. (재빌드하지 않아 성능 개선)</li>\n</ul>\n</li>\n<li>final : run-time constant로 앱 실행시 값이 정해짐</li>\n</ul>\n<h2 id=\"dart의-연산자\" style=\"position:relative;\">Dart의 연산자<a href=\"#dart%EC%9D%98-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"dart의 연산자 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>자바스크립트를 주로 사용하는 개발자로서 자바스크립트 연산자와 아주 유사하다고 생각되었습니다.<br>\n자바스크립트와 다르거나 다트에만 있는 독특한 연산자만 정리합니다.</p>\n<h3 id=\"-정수-나눗셈-연산자\" style=\"position:relative;\">~/ (정수 나눗셈 연산자)<a href=\"#-%EC%A0%95%EC%88%98-%EB%82%98%EB%88%97%EC%85%88-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\" 정수 나눗셈 연산자 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">void main() {\r\n    print(101~/2); // 50\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"is--is-타입-확인-키워드\" style=\"position:relative;\">is / is! (타입 확인 키워드)<a href=\"#is--is-%ED%83%80%EC%9E%85-%ED%99%95%EC%9D%B8-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"is  is 타입 확인 키워드 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바스크립트의 <code class=\"language-text\">typeof</code> 연산자와 유사합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">void main() {\r\n    var name = &#39;Yeony&#39;;\r\n    print(name is int); // false;\r\n    print(name is String); // true;\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"ab-optional-chaining\" style=\"position:relative;\">A?.B (optional chaining)<a href=\"#ab-optional-chaining\" aria-label=\"ab optional chaining permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">?.</code>를 적어줌으로써 해당 객체의 속성을 사용할 수 있는지 여부에 따라 반환되는 값이 달라집니다.</p>\n<p>객체의 속성에 접근할 수 있다면 그대로 반환하고, 사용할 수 없다면 <code class=\"language-text\">null</code>을 반환합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">void main() {\r\n    String? name;\r\n\r\n    print(name.length); // Error!\r\n    print(name?.length); // null\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"a--b-논리-or\" style=\"position:relative;\">A ?? B (논리 OR)<a href=\"#a--b-%EB%85%BC%EB%A6%AC-or\" aria-label=\"a  b 논리 or permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바스크립트의 <code class=\"language-text\">||</code> 연산자와 똑같이 동작합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">void main() {\r\n    String name;\r\n\r\n    String myName = name ?? &#39;Yeony&#39;;\r\n\r\n    print(myName); // name이 null이므로 &#39;Yeony&#39;\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"a--b-논리\" style=\"position:relative;\">A ??= B (논리)<a href=\"#a--b-%EB%85%BC%EB%A6%AC\" aria-label=\"a  b 논리 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">??</code> 연산자와 반대로 동작합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">void main() {\r\n  int age;\r\n\r\n  int myAge = 24;\r\n\r\n  myAge ??= age;\r\n\r\n  print(myAge);\t//age가 null이므로 24\r\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"dart의-class\" style=\"position:relative;\">Dart의 Class<a href=\"#dart%EC%9D%98-class\" aria-label=\"dart의 class permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>class는 객체를 정의하는 일종의 틀입니다. 특정한 모양의 객체를 생성하기 위해 변수, 메소드를 지정하는 것이죠.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class Fruit {\r\n    String name = &#39;Banana&#39;;\r\n\r\n    void printFruitName() {\r\n        print(&#39;This is a ${name}!&#39;); \r\n    } \r\n}\r\n\r\nvoid main() {\r\n    Fruit fruit = new Fruit();\r\n\r\n    fruit.printFruitName(); // This is a Banana!\r\n\r\n    fruit.name = &#39;Grapes&#39;;\r\n    fruit.printFruitName(); // This is a Grapes!\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"생성자\" style=\"position:relative;\">생성자<a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"생성자 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>다트의 class또한 다른 객체지향언어와 같이 생성자(constructor)를 가질 수 있습니다</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class Fruit {\r\n    String? name;\r\n    int? price;\r\n\r\n    Fruit(String name, int price) {\r\n        this.name = name;\r\n        this.price = price;\r\n    }\r\n\r\n    void printFruitName() {\r\n        print(&#39;This is a ${name}! This is ${price} won!&#39;); \r\n    } \r\n}\r\n\r\nvoid main() {\r\n    Fruit fruit = new Fruit(&#39;Strawberry&#39;, 10000);\r\n\r\n    fruit.printFruitName(); // This is a Strawberry! This is 10000 won!\r\n}</code>\n        </deckgo-highlight-code>\n<p><strong>Named Parameter</strong> 를 사용하면 이렇게 작성할 수도 있습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class Fruit {\r\n    String? name;\r\n    int? price;\r\n\r\n    Fruit({String? name, int? price}) // named parameter\r\n        : this.name = name,\r\n          this.price = price;\r\n\r\n    void printFruitName() {\r\n        print(&#39;This is a ${name}! This is ${price} won!&#39;); \r\n    } \r\n}\r\n\r\nvoid main() {\r\n    Fruit fruit = new Fruit(name: &#39;Strawberry&#39;, price: 10000);\r\n\r\n    fruit.printFruitName(); // This is a Strawberry! This is 10000 won!\r\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"상속\" style=\"position:relative;\">상속<a href=\"#%EC%83%81%EC%86%8D\" aria-label=\"상속 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>클래스에서는 상속이 가능합니다.</p>\n<p>상속의 개념을 간단히 설명해보죠.</p>\n<p>부모와 자식이 있습니다. 부모는 부모가 가진 것들만 자식에게 줄 수 있습니다. 반면 자식은 부모의 것도 가지고, 본인만의 것도 가질 수 있습니다. 자식이 부모의 것을 가지는 것이 <strong>상속</strong>, 자식이 부모의 것에 더해 자신만의 것을 가지는 것을 <strong>확장</strong>이라고 합니다.</p>\n<p>상속을 받을 때는 <code class=\"language-text\">extends</code> 키워드를 사용합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class Fruit {\r\n    String? name;\r\n    int? price;\r\n\r\n    Fruit({String? name, int? price}) // named parameter\r\n        : this.name = name,\r\n          this.price = price;\r\n\r\n    void printFruitName() {\r\n        print(&#39;This is a ${name}! This is ${price} won!&#39;); \r\n    } \r\n}\r\n\r\n\r\nclass Juice extends Fruit {\r\n    Juice({super.name, super.price});\r\n\r\n    void printJuiceName() {\r\n        print(&#39;This is juice made of ${this.name}!!&#39;);\r\n    }\r\n}\r\n\r\nvoid main() {\r\n    Juice juice = new Juice(name: &#39;Lemon&#39;, price : 5000);\r\n\r\n    // 부모 class인 Fruit에도 접근 가능\r\n    juice.printFruitName(); // This is a Lemon! This is 5000 won!\r\n    juice.printJuiceName(); // This is juice made of Lemon!!\r\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"dart의-interface\" style=\"position:relative;\">Dart의 Interface<a href=\"#dart%EC%9D%98-interface\" aria-label=\"dart의 interface permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>다트는 클래스를 활용해 인터페이스를 정의할 수 있습니다.</p>\n<p>인터페이스란, 클래스 정의 시 <strong>반드시 정의해야하는 변수 및 함수를 지정</strong>할 때 사용합니다.</p>\n<p>앞서 클래스가 일종의 틀이라고 언급했는데, 인터페이스도 유사하지만 <strong>규격</strong>에 가깝습니다.<br>\n다른 클래스를 작성할 때 기본 틀을 제공하는 것이죠.</p>\n<p>자바 등에서는 interface 키워드를 이용해 정의하지만, 다트는 <code class=\"language-text\">class</code> 키워드를 사용해 인터페이스를 정의하고, <code class=\"language-text\">implements</code> 키워드로 인터페이스를 사용합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class Food {\r\n    String? name;\r\n\r\n    void printFoodName() {} // 함수 정의만 함\r\n}\r\n\r\nclass Fruit implements Food {\r\n    String? name;\r\n\r\n    Fruit(String name) : this.name = name;\r\n\r\n    // 함수 작성\r\n    void printFoodName() {\r\n        print(&#39;Hi! There is ${name} here!&#39;);\r\n    }\r\n}\r\n\r\nvoid main() {\r\n    Fruit fruit = new Fruit(&#39;Melon&#39;);\r\n\r\n    fruit.printFoodName();\r\n}</code>\n        </deckgo-highlight-code>\n<!-- \r\n📍 Dart Language와 Flutter Framework가 각각 무엇인지 이해하고, 둘의 관계를 이해한다.\r\n\r\n📍 Dart Language와 Flutter Framework의 장점을 이해하고, 왜/어떻게 사용되는지 이해한다.\r\n\r\n📍 C Programming을 배웠다고 가정하고, 프로그래밍 언어의 기본적 문법들을 복습한다.\r\n\r\n📍 OOP Language(객체지향언어)인 Dart가 어떤 특징을 가지는지 이해한다.\r\n\r\n📍 Dart만이 가진 독특한 문법들을 숙지한다. -->\n<!-- ◾ [브라우저 JavaScript 개발환경](/tech/let-me-know-js-a-bit-setting-devtool/) 👈 다음 글 보기 -->","internal":{"content":"\r\n## Dart란?\r\n\r\n[다트(Dart)](https://dart.dev/)는 구글이 자바스크립트를 대체하기 위해 2011년도 개발한 **멀티 플랫폼** 프로그래밍 언어입니다.   \r\n\r\n다트의 특징으로는 모바일 앱, 웹 앱 등 여러 플랫폼을 다트를 이용해 만들 수 있습니다.   \r\n\r\n### Dart 특징\r\n\r\n* statically typed \r\n    * dynamic type을 지원\r\n* 객체 지향 언어\r\n* 단일 상속 지원\r\n* mixin 지원\r\n\r\n## Dart 자료형\r\n\r\n다트는 `Java` 혹은 `Javascript`와 유사한 문법을 가지고 있습니다.   \r\n\r\n먼저 자료형부터 살펴보겠습니다.\r\n\r\n* num : 숫자 타입\r\n    * int : 정수 타입\r\n    * double : 실수 타입\r\n* bool : true/false 불리언 타입\r\n* String : 문자열 타입\r\n* List : 중복 허용, 순서가 있는 집합\r\n* Set : 중복 허용하지 않는 순서 없는 집합\r\n* Map : key-value 쌍으로 구성된 집합 (자바스크립트의 Object 타입과 유사)\r\n\r\n변수와 함수 선언 예시는 아래와 같습니다.\r\n\r\n```dart\r\nString name;\r\nnum age;\r\n\r\nList<String> students = ['Nayeon', 'Yeony', 'Kim'];\r\n\r\nMap<String, int> scores = {\r\n    'math': 97,\r\n    'eng': 77\r\n}\r\n\r\nvoin main() {\r\n    print('Hello World!');\r\n}\r\n\r\nString sayHi() {\r\n    return 'Hi!';\r\n}\r\n```\r\n\r\n### dynamic\r\n\r\n다트의 특징으로 **dyanmic type**이 있다고 했는데요.\r\n\r\n변수 선언 시 `dynamic`을 붙이면 해당 변수는 모든 형식을 허용하는 형태가 됩니다. 처음 타입이 String이고 후에 int 타입을 할당해도 에러가 나지 않습니다.\r\n\r\n```dart\r\nvoid main() {\r\n    dynamic changing = 'Hi!!';\r\n    changing = 123;\r\n\r\n    print(changing); // 123\r\n}\r\n```\r\n\r\n### var\r\n`var`는 **타입 추론**을 가능케 하는 키워드입니다. \r\n\r\n타입을 꼭 선언하지 않아도, 변수에 처음으로 할당되는 값에 따라 자동으로 타입을 추론합니다.   \r\n단, 이후 다른 타입의 값이 할당된다 해도 그 변수의 타입은 변경되지 않습니다.\r\n\r\n```dart\r\nvoid main() {\r\n    var age = 10; // age는 int 타입으로 고정\r\n\r\n    age = 20;\r\n    print(age); // 20\r\n\r\n    age = 'I am so young'; // Error! (int 변수에는 String을 할당할 수 없음)\r\n}\r\n```\r\n\r\n### final / const \r\n\r\n자바나 자바스크립트에서 볼 수 있던 키워드를 다트에서도 볼 수 있습니다.   \r\n\r\n모두 **상수**를 의미하지만 차이가 있습니다.\r\n\r\n* const : compile-time constant로 앱 빌드시 값 정해짐. \r\n    * life cycle 상 절대 변하지 않음을 의미. (재빌드하지 않아 성능 개선)\r\n* final : run-time constant로 앱 실행시 값이 정해짐\r\n\r\n\r\n\r\n## Dart의 연산자\r\n\r\n자바스크립트를 주로 사용하는 개발자로서 자바스크립트 연산자와 아주 유사하다고 생각되었습니다.   \r\n자바스크립트와 다르거나 다트에만 있는 독특한 연산자만 정리합니다.\r\n\r\n### ~/ (정수 나눗셈 연산자)\r\n```dart\r\nvoid main() {\r\n    print(101~/2); // 50\r\n}\r\n```\r\n\r\n### is / is! (타입 확인 키워드)\r\n\r\n자바스크립트의 `typeof` 연산자와 유사합니다.\r\n\r\n```dart\r\nvoid main() {\r\n    var name = 'Yeony';\r\n    print(name is int); // false;\r\n    print(name is String); // true;\r\n}\r\n```\r\n\r\n### A?.B (optional chaining)\r\n\r\n`?.`를 적어줌으로써 해당 객체의 속성을 사용할 수 있는지 여부에 따라 반환되는 값이 달라집니다.   \r\n\r\n객체의 속성에 접근할 수 있다면 그대로 반환하고, 사용할 수 없다면 `null`을 반환합니다.\r\n\r\n```dart\r\nvoid main() {\r\n    String? name;\r\n\r\n    print(name.length); // Error!\r\n    print(name?.length); // null\r\n}\r\n```\r\n\r\n### A ?? B (논리 OR)\r\n\r\n자바스크립트의 `||` 연산자와 똑같이 동작합니다.   \r\n\r\n```dart\r\nvoid main() {\r\n    String name;\r\n\r\n    String myName = name ?? 'Yeony';\r\n\r\n    print(myName); // name이 null이므로 'Yeony'\r\n}\r\n```\r\n\r\n### A ??= B (논리)\r\n`??` 연산자와 반대로 동작합니다.\r\n\r\n```dart\r\nvoid main() {\r\n  int age;\r\n\r\n  int myAge = 24;\r\n\r\n  myAge ??= age;\r\n\r\n  print(myAge);\t//age가 null이므로 24\r\n}\r\n```\r\n\r\n## Dart의 Class\r\n\r\nclass는 객체를 정의하는 일종의 틀입니다. 특정한 모양의 객체를 생성하기 위해 변수, 메소드를 지정하는 것이죠.\r\n\r\n```dart\r\nclass Fruit {\r\n    String name = 'Banana';\r\n\r\n    void printFruitName() {\r\n        print('This is a ${name}!'); \r\n    } \r\n}\r\n\r\nvoid main() {\r\n    Fruit fruit = new Fruit();\r\n\r\n    fruit.printFruitName(); // This is a Banana!\r\n\r\n    fruit.name = 'Grapes';\r\n    fruit.printFruitName(); // This is a Grapes!\r\n}\r\n```\r\n\r\n### 생성자\r\n\r\n다트의 class또한 다른 객체지향언어와 같이 생성자(constructor)를 가질 수 있습니다\r\n\r\n\r\n```dart\r\nclass Fruit {\r\n    String? name;\r\n    int? price;\r\n\r\n    Fruit(String name, int price) {\r\n        this.name = name;\r\n        this.price = price;\r\n    }\r\n\r\n    void printFruitName() {\r\n        print('This is a ${name}! This is ${price} won!'); \r\n    } \r\n}\r\n\r\nvoid main() {\r\n    Fruit fruit = new Fruit('Strawberry', 10000);\r\n\r\n    fruit.printFruitName(); // This is a Strawberry! This is 10000 won!\r\n}\r\n```\r\n\r\n**Named Parameter** 를 사용하면 이렇게 작성할 수도 있습니다.\r\n\r\n\r\n```dart\r\nclass Fruit {\r\n    String? name;\r\n    int? price;\r\n\r\n    Fruit({String? name, int? price}) // named parameter\r\n        : this.name = name,\r\n          this.price = price;\r\n\r\n    void printFruitName() {\r\n        print('This is a ${name}! This is ${price} won!'); \r\n    } \r\n}\r\n\r\nvoid main() {\r\n    Fruit fruit = new Fruit(name: 'Strawberry', price: 10000);\r\n\r\n    fruit.printFruitName(); // This is a Strawberry! This is 10000 won!\r\n}\r\n```\r\n\r\n### 상속\r\n\r\n클래스에서는 상속이 가능합니다.\r\n\r\n상속의 개념을 간단히 설명해보죠. \r\n\r\n부모와 자식이 있습니다. 부모는 부모가 가진 것들만 자식에게 줄 수 있습니다. 반면 자식은 부모의 것도 가지고, 본인만의 것도 가질 수 있습니다. 자식이 부모의 것을 가지는 것이 **상속**, 자식이 부모의 것에 더해 자신만의 것을 가지는 것을 **확장**이라고 합니다.\r\n\r\n\r\n상속을 받을 때는 `extends` 키워드를 사용합니다.\r\n\r\n```dart\r\nclass Fruit {\r\n    String? name;\r\n    int? price;\r\n\r\n    Fruit({String? name, int? price}) // named parameter\r\n        : this.name = name,\r\n          this.price = price;\r\n\r\n    void printFruitName() {\r\n        print('This is a ${name}! This is ${price} won!'); \r\n    } \r\n}\r\n\r\n\r\nclass Juice extends Fruit {\r\n    Juice({super.name, super.price});\r\n\r\n    void printJuiceName() {\r\n        print('This is juice made of ${this.name}!!');\r\n    }\r\n}\r\n\r\nvoid main() {\r\n    Juice juice = new Juice(name: 'Lemon', price : 5000);\r\n\r\n    // 부모 class인 Fruit에도 접근 가능\r\n    juice.printFruitName(); // This is a Lemon! This is 5000 won!\r\n    juice.printJuiceName(); // This is juice made of Lemon!!\r\n}\r\n```\r\n\r\n## Dart의 Interface\r\n\r\n다트는 클래스를 활용해 인터페이스를 정의할 수 있습니다. \r\n\r\n인터페이스란, 클래스 정의 시 **반드시 정의해야하는 변수 및 함수를 지정**할 때 사용합니다.\r\n\r\n앞서 클래스가 일종의 틀이라고 언급했는데, 인터페이스도 유사하지만 **규격**에 가깝습니다.   \r\n다른 클래스를 작성할 때 기본 틀을 제공하는 것이죠.\r\n\r\n자바 등에서는 interface 키워드를 이용해 정의하지만, 다트는 `class` 키워드를 사용해 인터페이스를 정의하고, `implements` 키워드로 인터페이스를 사용합니다.\r\n\r\n\r\n```dart\r\nclass Food {\r\n    String? name;\r\n\r\n    void printFoodName() {} // 함수 정의만 함\r\n}\r\n\r\nclass Fruit implements Food {\r\n    String? name;\r\n\r\n    Fruit(String name) : this.name = name;\r\n\r\n    // 함수 작성\r\n    void printFoodName() {\r\n        print('Hi! There is ${name} here!');\r\n    }\r\n}\r\n\r\nvoid main() {\r\n    Fruit fruit = new Fruit('Melon');\r\n\r\n    fruit.printFoodName();\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!-- \r\n📍 Dart Language와 Flutter Framework가 각각 무엇인지 이해하고, 둘의 관계를 이해한다.\r\n\r\n📍 Dart Language와 Flutter Framework의 장점을 이해하고, 왜/어떻게 사용되는지 이해한다.\r\n\r\n📍 C Programming을 배웠다고 가정하고, 프로그래밍 언어의 기본적 문법들을 복습한다.\r\n\r\n📍 OOP Language(객체지향언어)인 Dart가 어떤 특징을 가지는지 이해한다.\r\n\r\n📍 Dart만이 가진 독특한 문법들을 숙지한다. -->\r\n\r\n\r\n\r\n<!-- ◾ [브라우저 JavaScript 개발환경](/tech/let-me-know-js-a-bit-setting-devtool/) 👈 다음 글 보기 -->\r\n\r\n\r\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#dart%EB%9E%80\">Dart란?</a></p>\n<ul>\n<li><a href=\"#dart-%ED%8A%B9%EC%A7%95\">Dart 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dart-%EC%9E%90%EB%A3%8C%ED%98%95\">Dart 자료형</a></p>\n<ul>\n<li><a href=\"#dynamic\">dynamic</a></li>\n<li><a href=\"#var\">var</a></li>\n<li><a href=\"#final--const\">final / const</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dart%EC%9D%98-%EC%97%B0%EC%82%B0%EC%9E%90\">Dart의 연산자</a></p>\n<ul>\n<li><a href=\"#-%EC%A0%95%EC%88%98-%EB%82%98%EB%88%97%EC%85%88-%EC%97%B0%EC%82%B0%EC%9E%90\">~/ (정수 나눗셈 연산자)</a></li>\n<li><a href=\"#is--is-%ED%83%80%EC%9E%85-%ED%99%95%EC%9D%B8-%ED%82%A4%EC%9B%8C%EB%93%9C\">is / is! (타입 확인 키워드)</a></li>\n<li><a href=\"#ab-optional-chaining\">A?.B (optional chaining)</a></li>\n<li><a href=\"#a--b-%EB%85%BC%EB%A6%AC-or\">A ?? B (논리 OR)</a></li>\n<li><a href=\"#a--b-%EB%85%BC%EB%A6%AC\">A ??= B (논리)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dart%EC%9D%98-class\">Dart의 Class</a></p>\n<ul>\n<li><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90\">생성자</a></li>\n<li><a href=\"#%EC%83%81%EC%86%8D\">상속</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dart%EC%9D%98-interface\">Dart의 Interface</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/flutter-dart-and-flutter"}},"staticQueryHashes":["2665612806"]}