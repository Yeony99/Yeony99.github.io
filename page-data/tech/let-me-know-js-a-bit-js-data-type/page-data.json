{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/let-me-know-js-a-bit-js-data-type","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/let-me-know-js-a-bit-js-data-type","tags":["쫌만알자"],"date":"2022-08-24","img":"https://user-images.githubusercontent.com/76241233/177932893-5a504b26-12e4-4ade-b1ce-1951d072ba82.jpg","title":"쫌만알자! (5) - 자바스크립트 자료형"},"html":"<h2 id=\"자료형이란\" style=\"position:relative;\">자료형이란?<a href=\"#%EC%9E%90%EB%A3%8C%ED%98%95%EC%9D%B4%EB%9E%80\" aria-label=\"자료형이란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>자바스크립트는 <a href=\"https://yeonydevlog.tistory.com/40\">동적언어</a>입니다. 이 말은 런타임 시에 타입이 정해진다는 의미입니다. 간단하게만 알아보겠습니다.</p>\n<h3 id=\"컴파일-타임--런-타임\" style=\"position:relative;\">컴파일 타임 &#x26; 런 타임<a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC-%ED%83%80%EC%9E%84--%EB%9F%B0-%ED%83%80%EC%9E%84\" aria-label=\"컴파일 타임  런 타임 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4 id=\"컴파일타임compile-time이란\" style=\"position:relative;\">컴파일타임(Compile time)이란?<a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%ED%83%80%EC%9E%84compile-time%EC%9D%B4%EB%9E%80\" aria-label=\"컴파일타임compile time이란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<blockquote>\n<p>The compile time is the time from when the program is first loaded until the program is parsed. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Compile_time\">참고 : MDN</a></p>\n</blockquote>\n<ul>\n<li>Syntax Error (문법 에러), File Reference Error (파일 참조 에러), 타입 체크 에러 등</li>\n<li>컴파일러가 컴파일 타임 에러를 발생시키고, 보통 문제가 발생한 소스코드 라인을 알려줍니다.</li>\n</ul>\n<h4 id=\"런타임run-time이란\" style=\"position:relative;\">런타임(Run time)이란?<a href=\"#%EB%9F%B0%ED%83%80%EC%9E%84run-time%EC%9D%B4%EB%9E%80\" aria-label=\"런타임run time이란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>컴파일 과정을 마친 프로그램이 <strong>실행되는 특정한 때</strong>를 의미합니다.</li>\n<li>Null 참조 오류, 메모리 부족 오류, n/0 (0으로 나누는 연산) 오류 등</li>\n<li>런타임 에러는 프로그램이 실행 중이지만, 의도치 않게 발생하는 에러입니다.</li>\n</ul>\n<h3 id=\"자바스크립트는-동적-타입\" style=\"position:relative;\">자바스크립트는 동적 타입<a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EB%8F%99%EC%A0%81-%ED%83%80%EC%9E%85\" aria-label=\"자바스크립트는 동적 타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://developer.mozilla.org/ko/\">MDN</a>의 설명을 참고하겠습니다. MDN은 웹 표준 등에 관련된 정보를 문서화한 사이트입니다. 앞으로 쫌만알자 시리즈에 많이 등장할 예정이니 꼭 참고해주세요. <br/><br>\n자바스크립트는 느슨한 타입(loosely typed)의 동적(dynamic) 언어입니다. <strong>자바스크립트의 변수는 어떤 특정 타입과 연결되지 않으며,</strong> 모든 타입의 값으로 할당(및 재할당)이 가능합니다. 다시 말해 자료형의 구분은 있지만, 변수의 형(type)을 미리 정하지 않는다는 말입니다.</p>\n<p>다른 개발 언어의 경우는 자료형을 명시하고 코드를 작성합니다. Java를 예시로 들어볼까요?</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">int num = 0; // integer: 정수 타입\r\nString str = &quot;Hello World!&quot;; // string: 문자열 타입</code>\n        </deckgo-highlight-code>\n<p>이렇게 자료형을 먼저 명시합니다. 반면 자바스크립트의 경우에는 자료형을 적지 않습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var num = 10;\r\nvar str = &#39;Hello World!&#39;;</code>\n        </deckgo-highlight-code>\n<p>변수 할당은 다음 글에서 알아보겠습니다.\r\n여기서는 자바스크립트는 느슨하게 작동되는 동적 언어라는 것만 알고 넘어갑시다.</p>\n<hr/>\n<h3 id=\"javascript의-type\" style=\"position:relative;\">JavaScript의 Type!<a href=\"#javascript%EC%9D%98-type\" aria-label=\"javascript의 type permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>본격적으로 자료형을 알아보죠.</p>\n<p>자바스크립트의 타입은 원시 타입<span style=\"font-size: 0.7rem\">(primitive type)</span>과 객체 타입<span style=\"font-size: 0.7rem\">(object/reference type)</span>으로 나뉩니다.</p>\n<ul>\n<li>원시 타입\n<ul>\n<li><a href=\"#number-%ED%83%80%EC%9E%85\">Number 타입</a></li>\n<li><a href=\"#string-%ED%83%80%EC%9E%85\">String 타입</a></li>\n<li><a href=\"#boolean-%ED%83%80%EC%9E%85\">Boolean 타입</a></li>\n<li><a href=\"#undefined-%ED%83%80%EC%9E%85\">Undefined 타입</a></li>\n<li><a href=\"#null-%ED%83%80%EC%9E%85\">Null 타입</a></li>\n<li><a href=\"#symbol-%ED%83%80%EC%9E%85\">Symbol 타입</a></li>\n<li><a href=\"#bigint-%ED%83%80%EC%9E%85\">BigInt 타입</a></li>\n</ul>\n</li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85\">객체 타입</a></li>\n</ul>\n<p>자바스크립트는 타입을 명시하지 않는 동적언어인데 왜 자료형을 알아야 할까요?<br>\n자료형에 따라 변수가 차지하는 메모리 공간의 크기도 다르고, 엔진이 해석하는 방식도 달라지기 때문입니다.</p>\n<p>각각의 자료형을 살펴봅시다.</p>\n<hr/>\n<h4 id=\"number-타입\" style=\"position:relative;\">Number 타입<a href=\"#number-%ED%83%80%EC%9E%85\" aria-label=\"number 타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>숫자는 Number와 BigInt 두 가지의 내장 숫자 타입이 있습니다. BigInt는 뒤에서 살펴보구요. Number타입부터 알아봅니다.</p>\n<p>다른 프로그래밍 언어(C, Java 등)은 정수(ex. -1, 0, 1)와 실수(ex. 3.14, 0.15)를 구분해 int, float, double 등 다양한 숫자 타입을 제공합니다.</p>\n<p>하지만 자바스크립트는 Number로 정수와 실수 모두를 취급합니다.</p>\n<p>Number타입은 정수이건 실수이건 <strong>모두 실수로 처리</strong>합니다. 이것을 부동소수점 형식이라고 합니다. 정확한 이름을 굳이 외울 필요는 없습니다. 정수만을 따로 표현하기 위한 자료형이 없고 모두 실수로 처리한다는 것만 기억하면 됩니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 모두 숫자 타입\r\nvar integer = 10;\r\nvar double = 10.123456;\r\nvar float = -10.3;</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">console.log(1 === 1.0) // true</code>\n        </deckgo-highlight-code>\n<p>만약 정수와 실수를 구별해 관리했다면 false가 return 됐을겁니다.</p>\n<p>실수와 정수 외에도 숫자 타입은 3가지의 특별한 값도 취급합니다.</p>\n<ul>\n<li>Infinity : 양의 무한대</li>\n<li>-Infinity : 음의 무한대</li>\n<li>NaN : Not a Number, 산술 연산 불가능</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">console.log(Number.POSITIVE_INFINITY); // Infinity\r\nconsole.log(Number.NEGATIVE_INFINITY); // -Infinity\r\nconsole.log(10 * &#39;abcd&#39;); // NaN </code>\n        </deckgo-highlight-code>\n<p>자바스크립트는 대소문자를 구별하므로 <strong>NaN</strong>을 작성할 때에는 꼭 주의하도록 합시다.</p>\n<hr/>\n<h4 id=\"string-타입\" style=\"position:relative;\">String 타입<a href=\"#string-%ED%83%80%EC%9E%85\" aria-label=\"string 타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>문자열 타입입니다. String 타입은 말 그대로 텍스트 데이터를 나타낼 때 사용합니다. 16비트 유니코드 문자(UTF-16)으로 구성된 집합으로, 대부분의 언어를 표현할 수 있습니다.</p>\n<p>자바스크립트에서 문자열을 표현하는 3가지 방법이 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var string;\r\n\r\nstring = &#39;작은 따옴표 문자열&#39;;\r\nstring = &quot;큰 따옴표 문자열&quot;;\r\nstring = `백틱 문자열`;</code>\n        </deckgo-highlight-code>\n<p>가장 보편적으로 사용하는 방식은 <strong>작은 따옴표(' ')</strong> 방식입니다.</p>\n<p>만약 작은 따옴표나 큰 따옴표를 문자열 내에서 직접 보이게 하고 싶으면 이렇게 작성합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">string = &quot;큰 따옴표 속 &#39;작은 따옴표&#39;&quot;;\r\nstring = &#39;작은 따옴표 속 &quot;큰 따옴표&quot;&#39;;</code>\n        </deckgo-highlight-code>\n<p>가장 바깥의 따옴표 속 즉, 문자열 속에 있는 따옴표는 문자로 취급됩니다.</p>\n<p>조금 낯설 수 있는 것이 <strong>백틱(`)</strong> 일텐데요. 백틱은 <strong>템플릿 리터럴</strong>이라고 하는 문자열 표기법에 이용됩니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var name = &#39;Yeony&#39;;\r\n\r\nvar template = `Hi, I&#39;m ${name}!` // Hi, I&#39;m Yeony!</code>\n        </deckgo-highlight-code>\n<p>이렇게 문자열 안에 변수를 집어넣는 템플릿을 만들 수 있습니다. 유용하죠?</p>\n<hr/>\n<h4 id=\"boolean-타입\" style=\"position:relative;\">Boolean 타입<a href=\"#boolean-%ED%83%80%EC%9E%85\" aria-label=\"boolean 타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Boolean 타입은 논리적 참/거짓을 나타내며, <strong>true</strong> 혹은 <strong>false</strong>로 두 가지의 값만 가질 수 있습니다.<br>\nBoolean 타입은 이후 조건문을 배우며 자세히 알아봅시다.</p>\n<hr/>\n<h4 id=\"undefined-타입\" style=\"position:relative;\">Undefined 타입<a href=\"#undefined-%ED%83%80%EC%9E%85\" aria-label=\"undefined 타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>undefined 타입은 undefined가 유일합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var variable;\r\nconsole.log(variable) // undefined</code>\n        </deckgo-highlight-code>\n<p>이렇게 variable에 아무것도 값을 주지 않으면 variable은 어떤 타입과 값을 가질까요?<br>\n정답은 undefined 타입의 undefined 값을 가진다! 입니다.</p>\n<p><strong>var 키워드</strong>로 변수를 선언만 한 경우 자바스크립트 엔진이 암묵적으로 undefined를 할당해버립니다. undefined의 의미를 생각해보면 \"개발자가 변수에 값을 할당해주지 않았다!\" 라는 것입니다</p>\n<p>다시 말해 undefined가 반환된다면 개발자가 <u>초기화하지 않은 변수</u>라고 바라볼 수 있습니다.<br>\n만약 변수에 값이 없다는 것을 명시하고 싶다면 <strong>null</strong>을 할당하도록 합시다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var variable = null;</code>\n        </deckgo-highlight-code>\n<h4 id=\"null-타입\" style=\"position:relative;\">Null 타입<a href=\"#null-%ED%83%80%EC%9E%85\" aria-label=\"null 타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>null 타입의 값 또한 null이 유일합니다.</p>\n<p>앞서 말했다시피 null은 어떤 값이 의도적으로 비어있다는 것을 보여줍니다.</p>\n<h4 id=\"symbol-타입\" style=\"position:relative;\">Symbol 타입<a href=\"#symbol-%ED%83%80%EC%9E%85\" aria-label=\"symbol 타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Symbol 타입은 ES6<span style=\"font-size: 0.7rem;\">(ECMA2015, 15년도에 개정된 JS)</span>에 추가된 타입입니다.</p>\n<p>Symbol은 다른 값과 중복되지 않는 유일무이한 값입니다. 꼭 겹치지 않아야 하는 유일한 Key를 만들어야 할 때 유용하게 사용할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var key = Symbol(&#39;key&#39;); // Symbol 함수를 호출해 할당\r\n\r\nvar obj = {}; // 객체 생성\r\n\r\n// 객체에 접근할 수 있는 유일무이한 key값을 생성\r\nobj[key] = &#39;value&#39;;\r\n\r\nconsole.log(obj[key]); // value\r\nconsole.log(obj) // { Symbol(key): &quot;value&quot; }</code>\n        </deckgo-highlight-code>\n<h4 id=\"bigint-타입\" style=\"position:relative;\">BigInt 타입<a href=\"#bigint-%ED%83%80%EC%9E%85\" aria-label=\"bigint 타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>앞서 Number 타입을 봤는데요. BigInt는 Number와는 다르게 조금 특별한 숫자를 취급합니다.<br>\nNumber가 정수, 실수를 표현할 수 있다면 BigInt는 이름대로 아주 큰 숫자를 다루는 타입입니다.</p>\n<p>여기서 <u>아주 큰 숫자 </u>는 얼마일까요?<br>\n당연하겠지만 Number 타입으로 다루지 못하는 범위의 숫자입니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">console.log(Number.MAX_SAFE_INTEGER) // 9007199254740991</code>\n        </deckgo-highlight-code>\n<p>Number 타입으로 나타낼 수 있는 가장 큰 숫자(안전 한계)를 log로 출력해보았습니다.</p>\n<p>BigInt는 숫자 뒤에 <strong>n</strong>을 붙이면 BigInt로 치환됩니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let num = Number.MAX_SAFE_INTEGER; //  9007199254740991\r\nnum = BigInt(num);\r\n\r\nconsole.log(num); // 9007199254740991n\r\n\r\n\r\nconst x = 2n ** 53n; // 9007199254740992n\r\nconst y = x + 1n; // 9007199254740993n</code>\n        </deckgo-highlight-code>\n<hr/>\n<h4 id=\"객체-타입\" style=\"position:relative;\">객체 타입<a href=\"#%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85\" aria-label=\"객체 타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>객체 타입은 여기서 함께 적기에는 굉장히 분량이 길어집니다.<br>\n자바스크립트는 기본적으로 객체 기반의 언어이기 때문에 <strong>자바스크립트의 대부분이 객체</strong>라 말해도 과언이 아닙니다. 앞서 살펴본 자료형 7가지 타입이 아닌 값은 <strong>모두 객체</strong>입니다.<br>\n이후 객체를 좀더 자세히 알아보도록 하겠습니다.</p>\n<p>다음 글에서는 변수에 대해 알아보겠습니다.</p>\n<p>◾ <a href=\"/tech/let-me-know-js-a-bit-js-node-and-npm\">Node.js와 npm</a> 👈 이전 글 보기</p>\n<!-- ◾ [변수 사용하기](/tech/let-me-know-js-a-bit-js-variable) 👈 다음 글 보기    -->","internal":{"content":"\r\n## 자료형이란?\r\n\r\n자바스크립트는 [동적언어](https://yeonydevlog.tistory.com/40)입니다. 이 말은 런타임 시에 타입이 정해진다는 의미입니다. 간단하게만 알아보겠습니다.\r\n\r\n### 컴파일 타임 & 런 타임\r\n\r\n#### 컴파일타임(Compile time)이란?\r\n> The compile time is the time from when the program is first loaded until the program is parsed. [참고 : MDN](https://developer.mozilla.org/en-US/docs/Glossary/Compile_time)\r\n* Syntax Error (문법 에러), File Reference Error (파일 참조 에러), 타입 체크 에러 등\r\n* 컴파일러가 컴파일 타임 에러를 발생시키고, 보통 문제가 발생한 소스코드 라인을 알려줍니다.\r\n\r\n\r\n#### 런타임(Run time)이란?\r\n* 컴파일 과정을 마친 프로그램이 **실행되는 특정한 때**를 의미합니다.\r\n* Null 참조 오류, 메모리 부족 오류, n/0 (0으로 나누는 연산) 오류 등\r\n* 런타임 에러는 프로그램이 실행 중이지만, 의도치 않게 발생하는 에러입니다.\r\n\r\n\r\n### 자바스크립트는 동적 타입\r\n[MDN](https://developer.mozilla.org/ko/)의 설명을 참고하겠습니다. MDN은 웹 표준 등에 관련된 정보를 문서화한 사이트입니다. 앞으로 쫌만알자 시리즈에 많이 등장할 예정이니 꼭 참고해주세요. <br/>  \r\n자바스크립트는 느슨한 타입(loosely typed)의 동적(dynamic) 언어입니다. **자바스크립트의 변수는 어떤 특정 타입과 연결되지 않으며,** 모든 타입의 값으로 할당(및 재할당)이 가능합니다. 다시 말해 자료형의 구분은 있지만, 변수의 형(type)을 미리 정하지 않는다는 말입니다.   \r\n\r\n다른 개발 언어의 경우는 자료형을 명시하고 코드를 작성합니다. Java를 예시로 들어볼까요?\r\n\r\n```java\r\nint num = 0; // integer: 정수 타입\r\nString str = \"Hello World!\"; // string: 문자열 타입\r\n```\r\n\r\n이렇게 자료형을 먼저 명시합니다. 반면 자바스크립트의 경우에는 자료형을 적지 않습니다.\r\n\r\n```javascript\r\nvar num = 10;\r\nvar str = 'Hello World!';\r\n```\r\n변수 할당은 다음 글에서 알아보겠습니다.\r\n여기서는 자바스크립트는 느슨하게 작동되는 동적 언어라는 것만 알고 넘어갑시다.\r\n\r\n<hr/>\r\n\r\n### JavaScript의 Type!\r\n본격적으로 자료형을 알아보죠.\r\n\r\n자바스크립트의 타입은 원시 타입<span style=\"font-size: 0.7rem\">(primitive type)</span>과 객체 타입<span style=\"font-size: 0.7rem\">(object/reference type)</span>으로 나뉩니다.   \r\n\r\n* 원시 타입\r\n    * [Number 타입](#number-타입)\r\n    * [String 타입](#string-타입)\r\n    * [Boolean 타입](#boolean-타입)\r\n    * [Undefined 타입](#undefined-타입)\r\n    * [Null 타입](#null-타입)\r\n    * [Symbol 타입](#symbol-타입)\r\n    * [BigInt 타입](#bigint-타입)\r\n* [객체 타입](#객체-타입)\r\n\r\n자바스크립트는 타입을 명시하지 않는 동적언어인데 왜 자료형을 알아야 할까요?   \r\n자료형에 따라 변수가 차지하는 메모리 공간의 크기도 다르고, 엔진이 해석하는 방식도 달라지기 때문입니다.\r\n\r\n각각의 자료형을 살펴봅시다.\r\n<hr/>\r\n\r\n#### Number 타입\r\n숫자는 Number와 BigInt 두 가지의 내장 숫자 타입이 있습니다. BigInt는 뒤에서 살펴보구요. Number타입부터 알아봅니다.   \r\n\r\n다른 프로그래밍 언어(C, Java 등)은 정수(ex. -1, 0, 1)와 실수(ex. 3.14, 0.15)를 구분해 int, float, double 등 다양한 숫자 타입을 제공합니다.   \r\n\r\n하지만 자바스크립트는 Number로 정수와 실수 모두를 취급합니다.   \r\n\r\nNumber타입은 정수이건 실수이건 **모두 실수로 처리**합니다. 이것을 부동소수점 형식이라고 합니다. 정확한 이름을 굳이 외울 필요는 없습니다. 정수만을 따로 표현하기 위한 자료형이 없고 모두 실수로 처리한다는 것만 기억하면 됩니다.   \r\n\r\n```javascript\r\n// 모두 숫자 타입\r\nvar integer = 10;\r\nvar double = 10.123456;\r\nvar float = -10.3;\r\n```\r\n\r\n\r\n```javascript\r\nconsole.log(1 === 1.0) // true\r\n```\r\n만약 정수와 실수를 구별해 관리했다면 false가 return 됐을겁니다.\r\n\r\n실수와 정수 외에도 숫자 타입은 3가지의 특별한 값도 취급합니다.   \r\n\r\n* Infinity : 양의 무한대\r\n* -Infinity : 음의 무한대\r\n* NaN : Not a Number, 산술 연산 불가능\r\n\r\n```javascript\r\nconsole.log(Number.POSITIVE_INFINITY); // Infinity\r\nconsole.log(Number.NEGATIVE_INFINITY); // -Infinity\r\nconsole.log(10 * 'abcd'); // NaN \r\n```\r\n\r\n자바스크립트는 대소문자를 구별하므로 **NaN**을 작성할 때에는 꼭 주의하도록 합시다.\r\n\r\n<hr/>\r\n\r\n#### String 타입\r\n\r\n문자열 타입입니다. String 타입은 말 그대로 텍스트 데이터를 나타낼 때 사용합니다. 16비트 유니코드 문자(UTF-16)으로 구성된 집합으로, 대부분의 언어를 표현할 수 있습니다.   \r\n\r\n자바스크립트에서 문자열을 표현하는 3가지 방법이 있습니다.\r\n```javascript\r\nvar string;\r\n\r\nstring = '작은 따옴표 문자열';\r\nstring = \"큰 따옴표 문자열\";\r\nstring = `백틱 문자열`;\r\n```\r\n\r\n가장 보편적으로 사용하는 방식은 **작은 따옴표(' ')** 방식입니다.    \r\n\r\n만약 작은 따옴표나 큰 따옴표를 문자열 내에서 직접 보이게 하고 싶으면 이렇게 작성합니다.\r\n\r\n```javascript\r\nstring = \"큰 따옴표 속 '작은 따옴표'\";\r\nstring = '작은 따옴표 속 \"큰 따옴표\"';\r\n```\r\n\r\n가장 바깥의 따옴표 속 즉, 문자열 속에 있는 따옴표는 문자로 취급됩니다.\r\n\r\n조금 낯설 수 있는 것이 **백틱(`)** 일텐데요. 백틱은 **템플릿 리터럴**이라고 하는 문자열 표기법에 이용됩니다.   \r\n```javascript\r\nvar name = 'Yeony';\r\n\r\nvar template = `Hi, I'm ${name}!` // Hi, I'm Yeony!\r\n```\r\n이렇게 문자열 안에 변수를 집어넣는 템플릿을 만들 수 있습니다. 유용하죠?  \r\n\r\n<hr/>\r\n\r\n\r\n#### Boolean 타입\r\n\r\nBoolean 타입은 논리적 참/거짓을 나타내며, **true** 혹은 **false**로 두 가지의 값만 가질 수 있습니다.   \r\nBoolean 타입은 이후 조건문을 배우며 자세히 알아봅시다.\r\n\r\n<hr/>\r\n\r\n#### Undefined 타입\r\n\r\nundefined 타입은 undefined가 유일합니다.   \r\n\r\n```javascript\r\nvar variable;\r\nconsole.log(variable) // undefined\r\n```\r\n이렇게 variable에 아무것도 값을 주지 않으면 variable은 어떤 타입과 값을 가질까요?   \r\n정답은 undefined 타입의 undefined 값을 가진다! 입니다.   \r\n\r\n**var 키워드**로 변수를 선언만 한 경우 자바스크립트 엔진이 암묵적으로 undefined를 할당해버립니다. undefined의 의미를 생각해보면 \"개발자가 변수에 값을 할당해주지 않았다!\" 라는 것입니다  \r\n\r\n다시 말해 undefined가 반환된다면 개발자가 <u>초기화하지 않은 변수</u>라고 바라볼 수 있습니다.   \r\n만약 변수에 값이 없다는 것을 명시하고 싶다면 **null**을 할당하도록 합시다.\r\n\r\n```javascript\r\nvar variable = null;\r\n```\r\n\r\n#### Null 타입\r\n\r\nnull 타입의 값 또한 null이 유일합니다.    \r\n\r\n앞서 말했다시피 null은 어떤 값이 의도적으로 비어있다는 것을 보여줍니다.\r\n\r\n\r\n#### Symbol 타입\r\n\r\nSymbol 타입은 ES6<span style=\"font-size: 0.7rem;\">(ECMA2015, 15년도에 개정된 JS)</span>에 추가된 타입입니다.   \r\n\r\nSymbol은 다른 값과 중복되지 않는 유일무이한 값입니다. 꼭 겹치지 않아야 하는 유일한 Key를 만들어야 할 때 유용하게 사용할 수 있습니다. \r\n\r\n```javascript\r\nvar key = Symbol('key'); // Symbol 함수를 호출해 할당\r\n\r\nvar obj = {}; // 객체 생성\r\n\r\n// 객체에 접근할 수 있는 유일무이한 key값을 생성\r\nobj[key] = 'value';\r\n\r\nconsole.log(obj[key]); // value\r\nconsole.log(obj) // { Symbol(key): \"value\" }\r\n```\r\n\r\n#### BigInt 타입\r\n\r\n앞서 Number 타입을 봤는데요. BigInt는 Number와는 다르게 조금 특별한 숫자를 취급합니다.   \r\nNumber가 정수, 실수를 표현할 수 있다면 BigInt는 이름대로 아주 큰 숫자를 다루는 타입입니다.   \r\n\r\n여기서 <u>아주 큰 숫자 </u>는 얼마일까요?   \r\n당연하겠지만 Number 타입으로 다루지 못하는 범위의 숫자입니다.   \r\n\r\n```javascript\r\nconsole.log(Number.MAX_SAFE_INTEGER) // 9007199254740991\r\n```\r\n\r\nNumber 타입으로 나타낼 수 있는 가장 큰 숫자(안전 한계)를 log로 출력해보았습니다.   \r\n\r\nBigInt는 숫자 뒤에 **n**을 붙이면 BigInt로 치환됩니다.\r\n\r\n```javascript\r\nlet num = Number.MAX_SAFE_INTEGER; //  9007199254740991\r\nnum = BigInt(num);\r\n\r\nconsole.log(num); // 9007199254740991n\r\n\r\n\r\nconst x = 2n ** 53n; // 9007199254740992n\r\nconst y = x + 1n; // 9007199254740993n\r\n```\r\n\r\n<hr/>\r\n\r\n#### 객체 타입\r\n\r\n객체 타입은 여기서 함께 적기에는 굉장히 분량이 길어집니다.    \r\n자바스크립트는 기본적으로 객체 기반의 언어이기 때문에 **자바스크립트의 대부분이 객체**라 말해도 과언이 아닙니다. 앞서 살펴본 자료형 7가지 타입이 아닌 값은 **모두 객체**입니다.   \r\n이후 객체를 좀더 자세히 알아보도록 하겠습니다.   \r\n\r\n\r\n다음 글에서는 변수에 대해 알아보겠습니다.\r\n \r\n◾ [Node.js와 npm](/tech/let-me-know-js-a-bit-js-node-and-npm) 👈 이전 글 보기   \r\n<!-- ◾ [변수 사용하기](/tech/let-me-know-js-a-bit-js-variable) 👈 다음 글 보기    -->"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%9E%90%EB%A3%8C%ED%98%95%EC%9D%B4%EB%9E%80\">자료형이란?</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC-%ED%83%80%EC%9E%84--%EB%9F%B0-%ED%83%80%EC%9E%84\">컴파일 타임 &#x26; 런 타임</a></p>\n<ul>\n<li><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%ED%83%80%EC%9E%84compile-time%EC%9D%B4%EB%9E%80\">컴파일타임(Compile time)이란?</a></li>\n<li><a href=\"#%EB%9F%B0%ED%83%80%EC%9E%84run-time%EC%9D%B4%EB%9E%80\">런타임(Run time)이란?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EB%8F%99%EC%A0%81-%ED%83%80%EC%9E%85\">자바스크립트는 동적 타입</a></p>\n</li>\n<li>\n<p><a href=\"#javascript%EC%9D%98-type\">JavaScript의 Type!</a></p>\n<ul>\n<li><a href=\"#number-%ED%83%80%EC%9E%85\">Number 타입</a></li>\n<li><a href=\"#string-%ED%83%80%EC%9E%85\">String 타입</a></li>\n<li><a href=\"#boolean-%ED%83%80%EC%9E%85\">Boolean 타입</a></li>\n<li><a href=\"#undefined-%ED%83%80%EC%9E%85\">Undefined 타입</a></li>\n<li><a href=\"#null-%ED%83%80%EC%9E%85\">Null 타입</a></li>\n<li><a href=\"#symbol-%ED%83%80%EC%9E%85\">Symbol 타입</a></li>\n<li><a href=\"#bigint-%ED%83%80%EC%9E%85\">BigInt 타입</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85\">객체 타입</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/let-me-know-js-a-bit-js-data-type"}},"staticQueryHashes":["2665612806"]}