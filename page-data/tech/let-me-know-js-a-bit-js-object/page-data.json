{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/let-me-know-js-a-bit-js-object","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/let-me-know-js-a-bit-js-object","tags":["쫌만알자"],"date":"2022-10-26","img":"https://user-images.githubusercontent.com/76241233/177932893-5a504b26-12e4-4ade-b1ce-1951d072ba82.jpg","title":"쫌만알자! (14) - 객체란 무엇일까?"},"html":"<p>자바스크립트는 객체 없이 존재하지 않는다! 라는 말이 있을 정도로 자바스크립트를 구성하는 대부분이 객체(object)입니다.</p>\n<p>자바스크립트는 원시 타입의 값을 제외한 모든 것이 객체입니다.</p>\n<p>원시 타입이 기억나지 않는다면 <a href=\"/tech/let-me-know-js-a-bit-js-data-type\">자바스크립트 자료형</a> 글을 다시 읽어봐주세요.</p>\n<hr>\n<h2 id=\"객체-구성\" style=\"position:relative;\">객체 구성<a href=\"#%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%84%B1\" aria-label=\"객체 구성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>객체는 프로퍼티의 집합이며, 프로퍼티는 <strong>key - value</strong> 쌍으로 이루어져 있습니다.</p>\n<p>프로퍼티에는 <strong>무엇이든</strong> 할당 가능합니다. 자바스크립트에서 사용할 수 있는 값이라면요. 문장, 숫자, 함수까지 프로퍼티에 작성할 수 있습니다. 다만 함수를 객체의 프로퍼티로 넣는 경우는 <strong>메소드</strong>라고 부릅니다.</p>\n<ul>\n<li>프로퍼티 : 객체 상태의 값</li>\n<li>메소드 : 프로퍼티를 참조하고 컨트롤할 수 있다.</li>\n</ul>\n<hr>\n<h2 id=\"객체-생성-방법\" style=\"position:relative;\">객체 생성 방법<a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1-%EB%B0%A9%EB%B2%95\" aria-label=\"객체 생성 방법 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>객체 생성 방법에는 여러가지가 있습니다.</p>\n<p>가장 간단한 방법인 객체 리터럴부터 알아보겠습니다.</p>\n<h3 id=\"객체-리터럴\" style=\"position:relative;\">객체 리터럴<a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"객체 리터럴 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>객체 리터럴은 중괄호({}) 안에 프로퍼티를 정의하는 방식입니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let obj = {\r\n  name: &#39;Yeony&#39;,\r\n  age: 24,\r\n  sayHi: function() {\r\n    console.log(`Hi, I am ${this.name}!`);\r\n  }\r\n};</code>\n        </deckgo-highlight-code>\n<p>코드블록을 설명할 때 코드블록은 <code class=\"language-text\">{}</code> 로 감싸져 있는 <strong>하나의 실행 단위</strong>를 의미한다고 했는데요. 객체 리터럴을 정의할 때 사용하는 중괄호는 코드 블록이 아닙니다.</p>\n<h3 id=\"생성자-함수constructor-이용\" style=\"position:relative;\">생성자 함수(Constructor) 이용<a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98constructor-%EC%9D%B4%EC%9A%A9\" aria-label=\"생성자 함수constructor 이용 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>함수는 뒤에서 좀더 알아볼 예정이지만, 여기서 간단하게 언급하고 가겠습니다.</p>\n<p>생성자 함수는 인스턴스를 만들고 초기화하는 특수한 함수입니다.</p>\n<p>생성자 함수가 호출되면</p>\n<ol>\n<li>새로운 빈 객체가 생성됩니다.</li>\n<li><code class=\"language-text\">this</code> 키워드는 새로 생성된 객체를 참조하기 시작하고, (this가) 현재 인스턴스가 됩니다.</li>\n<li>새 객체가 생성자의 반환 값으로 반환됩니다.</li>\n</ol>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 생성자\r\nfunction User() {\r\n    this.name = &#39;Yeony&#39;;\r\n}\r\n\r\nvar user = new User();</code>\n        </deckgo-highlight-code>\n<h3 id=\"object-객체-생성자-함수-사용하기\" style=\"position:relative;\">Object() 객체 생성자 함수 사용하기<a href=\"#object-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"object 객체 생성자 함수 사용하기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바스크립트의 내장 함수인 <code class=\"language-text\">Object()</code> 생성자 함수입니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let scores = new Object();\r\n\r\nscores.korean = 100;\r\nscores.math = 70;\r\nscores.english = 88;\r\nscores.getAverage = function() {\r\n  console.log(`${(this.korean + this.math + this.english)/3}`)\r\n}</code>\n        </deckgo-highlight-code>\n<p>이런 형태로 만들고 호출할 수 있습니다.</p>\n<p>생성자 함수들은 이후 함수와 함께 알아보도록 합시다. 여기서는 <strong>객체 리터럴 형태</strong>로만 작성해봅니다.</p>\n<hr>\n<h2 id=\"객체-살펴보기\" style=\"position:relative;\">객체 살펴보기<a href=\"#%EA%B0%9D%EC%B2%B4-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"객체 살펴보기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>객체는 프로퍼티의 집합입니다. 프로퍼티란 뭘까요?</p>\n<h3 id=\"프로퍼티\" style=\"position:relative;\">프로퍼티<a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"프로퍼티 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>프로퍼티(property)란, 속성이라는 뜻입니다. 객체 내부의 속성이라는 것이죠.</p>\n<p>이런 프로퍼티를 객체 안에 나열할 때에는 쉼표(,)로 구분합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let obj = {\r\n  name: &#39;Yeony&#39;,\r\n  age: 24\r\n};</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">obj</code> 객체에서 key는 <code class=\"language-text\">name</code>과 <code class=\"language-text\">age</code>입니다. 그리고 이 key로 <strong>접근할 수 있는 것</strong>이 <code class=\"language-text\">'Yeony'</code>와 <code class=\"language-text\">24</code>입니다.</p>\n<ul>\n<li>프로퍼티 key : string(문자열) 혹은 Symbol 값</li>\n<li>프로퍼티 value : JS에서 사용할 수 있는 모든 값</li>\n</ul>\n<p>key에는 <strong>빈 문자열</strong>도 사용 가능합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let obj = {\r\n  &quot;&quot;: &#39;Hi&#39;\r\n}\r\n\r\nconsole.log(obj) // {&quot;&quot;: &#39;hi&#39;}</code>\n        </deckgo-highlight-code>\n<p><a href=\"/tech/let-me-know-js-a-bit-js-variable-naming\">변수 명명 규칙</a> 에서 살펴봤듯, 자바스크립트에서는 식별자 네이밍 규칙이 있습니다.</p>\n<p>객체의 프로퍼티 key도 이를 지키지 않으면 작성할 수 없습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let obj = {\r\n  unvalid-key : &#39;err&#39; \r\n}\r\n\r\n// Uncaught SyntaxError: Unexpected token &#39;-&#39;</code>\n        </deckgo-highlight-code>\n<p>하지만, 자바스크립트의 프로퍼티 key는 문자열이 사용 가능합니다.<br>\n따라서 아래와 같이 작성할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let obj = {\r\n  &#39;valid-key&#39; : &#39;success&#39; \r\n}</code>\n        </deckgo-highlight-code>\n<br/>\n<h4 id=\"프로퍼티-접근\" style=\"position:relative;\">프로퍼티 접근<a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%A0%91%EA%B7%BC\" aria-label=\"프로퍼티 접근 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>프로퍼티에 접근할 수 있는 방식은 2가지가 있습니다.</p>\n<ul>\n<li>마침표로 접근</li>\n<li>대괄호로 접근</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let obj = {\r\n  name: &#39;Yeony&#39;,\r\n  &#39;2022&#39;: &#39;working&#39;,\r\n  &#39;2021&#39;: &#39;studied&#39;,\r\n  &#39;last-name&#39;: &#39;Kim&#39;\r\n}</code>\n        </deckgo-highlight-code>\n<p>위와 같은 객체를 생성한 후 <code class=\"language-text\">name</code>에 접근하려면 이렇게 할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">obj.name // &#39;Yeony&#39;</code>\n        </deckgo-highlight-code>\n<p>하지만 다른 프로퍼티들은 마침표로 접근하게 되면 에러가 나죠.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">obj.2022 // Uncaught SyntaxError: Unexpected number</code>\n        </deckgo-highlight-code>\n<p>이런 에러가 나는 이유는, 식별자 네이밍 규칙에 위배되기 때문입니다. 변수를 선언할 때는 숫자로 시작하거나, 숫자만으로 작성할 수 없기 때문이죠.</p>\n<p>따라서 식별자 명명 규격에서 벗어나는 프로퍼티 키에 접근하기 위해서는 <strong>대괄호를 이용</strong>해 접근합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">obj[2022] // &#39;working&#39;\r\nobj[&#39;2022&#39;] // &#39;working&#39;\r\nobj[&#39;last-name&#39;] // &#39;Kim&#39;</code>\n        </deckgo-highlight-code>\n<p>대괄호로 접근할 때에 대괄호 속에 들어가는 키는 무조건 <strong>문자열</strong>이어야 합니다. (숫자의 경우는 생략 가능)</p>\n<p><code class=\"language-text\">name</code>을 대괄호로 접근하면 어떻게 될까요?</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">obj[name]; // ReferenceError: name is not defined</code>\n        </deckgo-highlight-code>\n<p>여기서 <code class=\"language-text\">name</code>은 string이 아니라 하나의 변수처럼 받아들여진 겁니다. 따라서 프로퍼티 키인 <code class=\"language-text\">name</code>에 접근하려면 아래와 같이 작성합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">obj[&#39;name&#39;]\r\n\r\nlet name = &#39;name&#39; // 변수 선언 및 할당\r\nobj[name] </code>\n        </deckgo-highlight-code>\n<p>변수를 통해 객체의 프로퍼티 값에 접근하는 방법을 알아두면 유용하게 사용할 수 있습니다.</p>\n<br/>\n<h4 id=\"프로퍼티-업데이트\" style=\"position:relative;\">프로퍼티 업데이트<a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"프로퍼티 업데이트 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>이미 존재하고 있는 프로퍼티에 값을 재할당 할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let obj = {\r\n  name: &#39;Yeony&#39;,\r\n  &#39;2022&#39;: &#39;working&#39;,\r\n  &#39;2021&#39;: &#39;studied&#39;,\r\n  &#39;last-name&#39;: &#39;Kim&#39;\r\n}\r\n\r\nobj.name = &#39;Nayeon&#39;;\r\n\r\nconsole.log(obj.name); // &#39;Nayeon&#39;</code>\n        </deckgo-highlight-code>\n<br/>\n<h4 id=\"프로퍼티-생성\" style=\"position:relative;\">프로퍼티 생성<a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%83%9D%EC%84%B1\" aria-label=\"프로퍼티 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>프로퍼티는 꼭 객체 리터럴 생성 시 명시한 것만 읽거나 수정할 수 있는 것은 아닙니다. 프로퍼티를 <strong>동적으로 생성</strong>하는 것도 가능합니다.</p>\n<p>존재하지 않는 프로퍼티에 값을 할당하면 됩니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let obj = {\r\n  name: &#39;Yeony&#39;,\r\n  &#39;2022&#39;: &#39;working&#39;,\r\n  &#39;2021&#39;: &#39;studied&#39;,\r\n  &#39;last-name&#39;: &#39;Kim&#39;\r\n}\r\n\r\nobj.location = &#39;Seoul&#39;;\r\n\r\nconsole.log(obj) \r\n// {2021: &#39;studied&#39;, 2022: &#39;working&#39;, name: &#39;Yeony&#39;, last-name: &#39;Kim&#39;, location: &#39;Seoul&#39;}</code>\n        </deckgo-highlight-code>\n<p>ES6에서 추가된 기능도 사용해 볼까요?</p>\n<p>스프레드 연산자(...)와 프로퍼티 축약 표현을 통해 아래와 같이 작성할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let obj = {\r\n  name: &#39;Yeony&#39;,\r\n  &#39;2022&#39;: &#39;working&#39;,\r\n  &#39;2021&#39;: &#39;studied&#39;,\r\n  &#39;last-name&#39;: &#39;Kim&#39;\r\n}\r\n\r\nlet a = 10, b = 20;\r\n\r\n// 스프레드 연산자로 obj 객체 복사\r\n// 프로퍼티 축약표현으로 a, b 프로퍼티 추가\r\nobj = {...obj, a, b}\r\n\r\nconsole.log(obj); // {2021: &#39;studied&#39;, 2022: &#39;working&#39;, name: &#39;Yeony&#39;, last-name: &#39;Kim&#39;, a: 10, b: 20}</code>\n        </deckgo-highlight-code>\n<br/>\n<h4 id=\"프로퍼티-삭제\" style=\"position:relative;\">프로퍼티 삭제<a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%82%AD%EC%A0%9C\" aria-label=\"프로퍼티 삭제 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><a href=\"/tech/let-me-know-js-a-bit-js-reserved-words\">자바스크립트 예약어 모음</a> 에서 <strong>delete</strong> 연산자를 언급한 적이 있는데요.</p>\n<p>delete 연산자는 객체의 프로퍼티를 삭제합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">delete obj[&#39;2022&#39;]\r\ndelete obj.location\r\n\r\nconsole.log(obj) // {2021: &#39;studied&#39;, name: &#39;Yeony&#39;, last-name: &#39;Kim&#39;}</code>\n        </deckgo-highlight-code>\n<br/>\n<h3 id=\"메소드-method\" style=\"position:relative;\">메소드 (Method)<a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-method\" aria-label=\"메소드 method permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>함수도 객체의 프로퍼티가 될 수 있습니다. 아직 함수를 알아보진 않았지만 간략히 보고 넘어갑시다.</p>\n<p>프로퍼티 값이 함수일 경우에 우리는 <strong>메소드</strong>라고 부릅니다. 일반 함수와 구분하기 위함입니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let obj = {\r\n  name : &#39;Yeony&#39;,\r\n  sayHi: function () {\r\n    return `Hi, I am ${this.name}`;\r\n  }\r\n}\r\n\r\nconsole.log(obj.sayHi()); // Hi, I am Yeony</code>\n        </deckgo-highlight-code>\n<p>메소드에서 사용한 <code class=\"language-text\">this</code> 키워드는 객체 자기 자신(obj)을 가리킵니다. <code class=\"language-text\">this</code> 키워드는 자바스크립트에서 아주 복잡하게 움직입니다. 이 후 좀더 자세히 살펴보도록 합시다.</p>\n<p>◾ <a href=\"/tech/let-me-know-js-a-bit-js-type-coercion\">자바스크립트의 타입 변환</a> 👈 이전 글 보기</p>","internal":{"content":"\r\n자바스크립트는 객체 없이 존재하지 않는다! 라는 말이 있을 정도로 자바스크립트를 구성하는 대부분이 객체(object)입니다. \r\n\r\n자바스크립트는 원시 타입의 값을 제외한 모든 것이 객체입니다.\r\n\r\n원시 타입이 기억나지 않는다면 [자바스크립트 자료형](/tech/let-me-know-js-a-bit-js-data-type) 글을 다시 읽어봐주세요.\r\n\r\n---\r\n\r\n## 객체 구성\r\n\r\n객체는 프로퍼티의 집합이며, 프로퍼티는 **key - value** 쌍으로 이루어져 있습니다. \r\n\r\n프로퍼티에는 **무엇이든** 할당 가능합니다. 자바스크립트에서 사용할 수 있는 값이라면요. 문장, 숫자, 함수까지 프로퍼티에 작성할 수 있습니다. 다만 함수를 객체의 프로퍼티로 넣는 경우는 **메소드**라고 부릅니다.\r\n\r\n* 프로퍼티 : 객체 상태의 값\r\n* 메소드 : 프로퍼티를 참조하고 컨트롤할 수 있다.\r\n\r\n---\r\n\r\n## 객체 생성 방법\r\n\r\n객체 생성 방법에는 여러가지가 있습니다. \r\n\r\n가장 간단한 방법인 객체 리터럴부터 알아보겠습니다.\r\n\r\n### 객체 리터럴\r\n\r\n객체 리터럴은 중괄호({}) 안에 프로퍼티를 정의하는 방식입니다.\r\n\r\n```javascript\r\nlet obj = {\r\n  name: 'Yeony',\r\n  age: 24,\r\n  sayHi: function() {\r\n    console.log(`Hi, I am ${this.name}!`);\r\n  }\r\n};\r\n```\r\n\r\n코드블록을 설명할 때 코드블록은 `{}` 로 감싸져 있는 **하나의 실행 단위**를 의미한다고 했는데요. 객체 리터럴을 정의할 때 사용하는 중괄호는 코드 블록이 아닙니다.\r\n\r\n\r\n### 생성자 함수(Constructor) 이용\r\n\r\n함수는 뒤에서 좀더 알아볼 예정이지만, 여기서 간단하게 언급하고 가겠습니다.\r\n\r\n생성자 함수는 인스턴스를 만들고 초기화하는 특수한 함수입니다. \r\n\r\n생성자 함수가 호출되면 \r\n1. 새로운 빈 객체가 생성됩니다.\r\n2. `this` 키워드는 새로 생성된 객체를 참조하기 시작하고, (this가) 현재 인스턴스가 됩니다.\r\n3. 새 객체가 생성자의 반환 값으로 반환됩니다.\r\n\r\n```javascript\r\n// 생성자\r\nfunction User() {\r\n    this.name = 'Yeony';\r\n}\r\n\r\nvar user = new User();\r\n```\r\n\r\n\r\n### Object() 객체 생성자 함수 사용하기\r\n\r\n자바스크립트의 내장 함수인 `Object()` 생성자 함수입니다.\r\n\r\n```javascript\r\nlet scores = new Object();\r\n\r\nscores.korean = 100;\r\nscores.math = 70;\r\nscores.english = 88;\r\nscores.getAverage = function() {\r\n  console.log(`${(this.korean + this.math + this.english)/3}`)\r\n}\r\n```\r\n\r\n이런 형태로 만들고 호출할 수 있습니다.\r\n\r\n생성자 함수들은 이후 함수와 함께 알아보도록 합시다. 여기서는 **객체 리터럴 형태**로만 작성해봅니다.\r\n\r\n---\r\n\r\n## 객체 살펴보기\r\n\r\n객체는 프로퍼티의 집합입니다. 프로퍼티란 뭘까요?\r\n\r\n### 프로퍼티\r\n\r\n프로퍼티(property)란, 속성이라는 뜻입니다. 객체 내부의 속성이라는 것이죠.\r\n\r\n이런 프로퍼티를 객체 안에 나열할 때에는 쉼표(,)로 구분합니다.\r\n\r\n```javascript\r\nlet obj = {\r\n  name: 'Yeony',\r\n  age: 24\r\n};\r\n```\r\n\r\n`obj` 객체에서 key는 `name`과 `age`입니다. 그리고 이 key로 **접근할 수 있는 것**이 `'Yeony'`와 `24`입니다.\r\n\r\n* 프로퍼티 key : string(문자열) 혹은 Symbol 값\r\n* 프로퍼티 value : JS에서 사용할 수 있는 모든 값\r\n\r\nkey에는 **빈 문자열**도 사용 가능합니다.\r\n\r\n```javascript\r\nlet obj = {\r\n  \"\": 'Hi'\r\n}\r\n\r\nconsole.log(obj) // {\"\": 'hi'}\r\n```\r\n\r\n[변수 명명 규칙](/tech/let-me-know-js-a-bit-js-variable-naming) 에서 살펴봤듯, 자바스크립트에서는 식별자 네이밍 규칙이 있습니다. \r\n\r\n객체의 프로퍼티 key도 이를 지키지 않으면 작성할 수 없습니다.\r\n\r\n```javascript\r\nlet obj = {\r\n  unvalid-key : 'err' \r\n}\r\n\r\n// Uncaught SyntaxError: Unexpected token '-'\r\n```\r\n\r\n하지만, 자바스크립트의 프로퍼티 key는 문자열이 사용 가능합니다.   \r\n따라서 아래와 같이 작성할 수 있습니다.\r\n\r\n```javascript\r\nlet obj = {\r\n  'valid-key' : 'success' \r\n}\r\n```\r\n\r\n<br/>\r\n\r\n#### 프로퍼티 접근\r\n\r\n프로퍼티에 접근할 수 있는 방식은 2가지가 있습니다.\r\n\r\n* 마침표로 접근\r\n* 대괄호로 접근\r\n\r\n```javascript\r\nlet obj = {\r\n  name: 'Yeony',\r\n  '2022': 'working',\r\n  '2021': 'studied',\r\n  'last-name': 'Kim'\r\n}\r\n```\r\n\r\n위와 같은 객체를 생성한 후 `name`에 접근하려면 이렇게 할 수 있습니다.\r\n\r\n```javascript\r\nobj.name // 'Yeony'\r\n```\r\n\r\n하지만 다른 프로퍼티들은 마침표로 접근하게 되면 에러가 나죠.\r\n\r\n```javascript\r\nobj.2022 // Uncaught SyntaxError: Unexpected number\r\n```\r\n\r\n이런 에러가 나는 이유는, 식별자 네이밍 규칙에 위배되기 때문입니다. 변수를 선언할 때는 숫자로 시작하거나, 숫자만으로 작성할 수 없기 때문이죠.\r\n\r\n따라서 식별자 명명 규격에서 벗어나는 프로퍼티 키에 접근하기 위해서는 **대괄호를 이용**해 접근합니다.\r\n\r\n```javascript\r\nobj[2022] // 'working'\r\nobj['2022'] // 'working'\r\nobj['last-name'] // 'Kim'\r\n```\r\n대괄호로 접근할 때에 대괄호 속에 들어가는 키는 무조건 **문자열**이어야 합니다. (숫자의 경우는 생략 가능)\r\n\r\n`name`을 대괄호로 접근하면 어떻게 될까요?\r\n\r\n```javascript\r\nobj[name]; // ReferenceError: name is not defined\r\n```\r\n\r\n여기서 `name`은 string이 아니라 하나의 변수처럼 받아들여진 겁니다. 따라서 프로퍼티 키인 `name`에 접근하려면 아래와 같이 작성합니다.\r\n\r\n```javascript\r\nobj['name']\r\n\r\nlet name = 'name' // 변수 선언 및 할당\r\nobj[name] \r\n```\r\n\r\n변수를 통해 객체의 프로퍼티 값에 접근하는 방법을 알아두면 유용하게 사용할 수 있습니다.\r\n\r\n<br/>\r\n\r\n#### 프로퍼티 업데이트\r\n\r\n이미 존재하고 있는 프로퍼티에 값을 재할당 할 수 있습니다.\r\n\r\n```javascript\r\nlet obj = {\r\n  name: 'Yeony',\r\n  '2022': 'working',\r\n  '2021': 'studied',\r\n  'last-name': 'Kim'\r\n}\r\n\r\nobj.name = 'Nayeon';\r\n\r\nconsole.log(obj.name); // 'Nayeon'\r\n```\r\n\r\n<br/>\r\n\r\n#### 프로퍼티 생성\r\n\r\n프로퍼티는 꼭 객체 리터럴 생성 시 명시한 것만 읽거나 수정할 수 있는 것은 아닙니다. 프로퍼티를 **동적으로 생성**하는 것도 가능합니다.\r\n\r\n존재하지 않는 프로퍼티에 값을 할당하면 됩니다.\r\n\r\n```javascript\r\nlet obj = {\r\n  name: 'Yeony',\r\n  '2022': 'working',\r\n  '2021': 'studied',\r\n  'last-name': 'Kim'\r\n}\r\n\r\nobj.location = 'Seoul';\r\n\r\nconsole.log(obj) \r\n// {2021: 'studied', 2022: 'working', name: 'Yeony', last-name: 'Kim', location: 'Seoul'}\r\n```\r\n\r\nES6에서 추가된 기능도 사용해 볼까요?\r\n\r\n스프레드 연산자(...)와 프로퍼티 축약 표현을 통해 아래와 같이 작성할 수 있습니다.\r\n\r\n```javascript\r\nlet obj = {\r\n  name: 'Yeony',\r\n  '2022': 'working',\r\n  '2021': 'studied',\r\n  'last-name': 'Kim'\r\n}\r\n\r\nlet a = 10, b = 20;\r\n\r\n// 스프레드 연산자로 obj 객체 복사\r\n// 프로퍼티 축약표현으로 a, b 프로퍼티 추가\r\nobj = {...obj, a, b}\r\n\r\nconsole.log(obj); // {2021: 'studied', 2022: 'working', name: 'Yeony', last-name: 'Kim', a: 10, b: 20}\r\n```\r\n\r\n<br/>\r\n\r\n#### 프로퍼티 삭제\r\n\r\n[자바스크립트 예약어 모음](/tech/let-me-know-js-a-bit-js-reserved-words) 에서 **delete** 연산자를 언급한 적이 있는데요.\r\n\r\ndelete 연산자는 객체의 프로퍼티를 삭제합니다. \r\n\r\n```javascript\r\ndelete obj['2022']\r\ndelete obj.location\r\n\r\nconsole.log(obj) // {2021: 'studied', name: 'Yeony', last-name: 'Kim'}\r\n```\r\n\r\n<br/>\r\n\r\n### 메소드 (Method)\r\n\r\n함수도 객체의 프로퍼티가 될 수 있습니다. 아직 함수를 알아보진 않았지만 간략히 보고 넘어갑시다.\r\n\r\n프로퍼티 값이 함수일 경우에 우리는 **메소드**라고 부릅니다. 일반 함수와 구분하기 위함입니다.\r\n\r\n```javascript\r\nlet obj = {\r\n  name : 'Yeony',\r\n  sayHi: function () {\r\n    return `Hi, I am ${this.name}`;\r\n  }\r\n}\r\n\r\nconsole.log(obj.sayHi()); // Hi, I am Yeony\r\n```\r\n\r\n메소드에서 사용한 `this` 키워드는 객체 자기 자신(obj)을 가리킵니다. `this` 키워드는 자바스크립트에서 아주 복잡하게 움직입니다. 이 후 좀더 자세히 살펴보도록 합시다.\r\n\r\n\r\n◾ [자바스크립트의 타입 변환](/tech/let-me-know-js-a-bit-js-type-coercion) 👈 이전 글 보기\r\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%84%B1\">객체 구성</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1-%EB%B0%A9%EB%B2%95\">객체 생성 방법</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4\">객체 리터럴</a></li>\n<li><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98constructor-%EC%9D%B4%EC%9A%A9\">생성자 함수(Constructor) 이용</a></li>\n<li><a href=\"#object-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">Object() 객체 생성자 함수 사용하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\">객체 살펴보기</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">프로퍼티</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%A0%91%EA%B7%BC\">프로퍼티 접근</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\">프로퍼티 업데이트</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%83%9D%EC%84%B1\">프로퍼티 생성</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%82%AD%EC%A0%9C\">프로퍼티 삭제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-method\">메소드 (Method)</a></p>\n</li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/let-me-know-js-a-bit-js-object"}},"staticQueryHashes":["2665612806"]}