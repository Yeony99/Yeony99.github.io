{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/how-to-upload-files-to-aws-s3-from-nextjs","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/how-to-upload-files-to-aws-s3-from-nextjs","tags":["BE","Nextjs"],"date":"2023-07-21","img":null,"title":"Nextjs에서 AWS S3로 파일 이미지 업로드하기"},"excerpt":"S3에 이미지 업로드 하는 과정에서 발생한 여러 삽질과 해결방법 등을 미래의 나를 위한 가이드로 남긴다. 깃허브 예제 코드 확인하기 AWS S3 Bucket 생성 Bucket 생성 시 S3 접근을 하기 위해 Block Public Access…","html":"<p>S3에 이미지 업로드 하는 과정에서 발생한 여러 삽질과 해결방법 등을 미래의 나를 위한 가이드로 남긴다.</p>\n<p><a href=\"https://github.com/Yeony99/aws-s3-file-upload\" target=\"_blank\">깃허브 예제 코드 확인하기</a></p>\n<h2 id=\"aws\" style=\"position:relative;\">AWS<a href=\"#aws\" aria-label=\"aws permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"s3-bucket-생성\" style=\"position:relative;\">S3 Bucket 생성<a href=\"#s3-bucket-%EC%83%9D%EC%84%B1\" aria-label=\"s3 bucket 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Bucket 생성 시 S3 접근을 하기 위해 Block Public Access를 해제한다.<br>\n사이트의 유저들도 파일 업로드를 해야 하기 때문이다.</p>\n<p><img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/d2aa44cd-0b3c-46a5-a2ac-e6c8a3b8566c\" alt=\"Public Access\"></p>\n<p>생성 된 후 <strong>Permissions</strong> 탭에서 Bucket Policy를 수정한다.<br>\n별도의 인증 없이 리소스에 접근할 수 있게 할 것이기 때문에 기본적인 policy만 아래와 같이 작성한다.</p>\n<p><code class=\"language-text\">YOUR_BUCKET_NAME</code> 부분을 수정해 사용하면 된다.</p>\n<p><img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/ed4aaa9e-2489-4dfb-a14b-1aaf8764c80a\" alt=\"Policy 작성\"></p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">{\r\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\r\n    &quot;Statement&quot;: [\r\n        {\r\n            &quot;Sid&quot;: &quot;PublicListGet&quot;,\r\n            &quot;Effect&quot;: &quot;Allow&quot;,\r\n            &quot;Principal&quot;: &quot;*&quot;,\r\n            &quot;Action&quot;: [\r\n                &quot;s3:List*&quot;,\r\n                &quot;s3:Get*&quot;\r\n            ],\r\n            &quot;Resource&quot;: [\r\n                &quot;arn:aws:s3:::YOUR_BUCKET_NAME&quot;,\r\n                &quot;arn:aws:s3:::YOUR_BUCKET_NAME/*&quot;\r\n            ]\r\n        }\r\n    ]\r\n}</code>\n        </deckgo-highlight-code>\n<p>CORS 를 위해 Cross-orign resource sharing 부분의 프로퍼티를 수정한다.<br>\n아래 설정은 모든 접근을 허용하도록 간단히 작성했다.</p>\n<p><img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/5a4926db-35aa-493d-b451-68d0349fc436\" alt=\"CORS 설정 작성\"></p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">[\r\n    {\r\n        &quot;AllowedHeaders&quot;: [\r\n            &quot;*&quot;\r\n        ],\r\n        &quot;AllowedMethods&quot;: [\r\n            &quot;PUT&quot;,\r\n            &quot;POST&quot;,\r\n            &quot;GET&quot;\r\n        ],\r\n        &quot;AllowedOrigins&quot;: [\r\n            &quot;*&quot;\r\n        ],\r\n        &quot;ExposeHeaders&quot;: [\r\n            &quot;ETag&quot;\r\n        ]\r\n    }\r\n]</code>\n        </deckgo-highlight-code>\n<p>Bucket이 퍼블릭으로 바뀐 것을 확인할 수 있다.</p>\n<p><img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/ce5d3df2-22fb-46ba-8c53-ab3ac814e23d\" alt=\"퍼블릭 접근 확인\"></p>\n<h3 id=\"iam-설정\" style=\"position:relative;\">IAM 설정<a href=\"#iam-%EC%84%A4%EC%A0%95\" aria-label=\"iam 설정 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><del>Life is 아름다운 갤럭시</del></p>\n<p>AWS에 연결하기 위해 권한을 만들어줘야 한다. IAM 메뉴를 검색해서 group을 만든다.<br>\n이미 S3에 Access 권한이 있는 경우에는 생성하지 않아도 된다.</p>\n<p><img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/0690d987-c410-467d-8aff-b2b4a0a322c4\" alt=\"IAM\"></p>\n<p>Group 생성에서 S3 권한을 주도록 하자.<br>\nS3의 모든 권한을 가질 수 있도록 <code class=\"language-text\">AmazonS3FullAccess</code> policy를 선택 후 그룹을 생성한다.</p>\n<p><img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/6badeaf0-d1c5-4d88-ab38-3446527dc75f\" alt=\"User Group 생성\"></p>\n<p>만든 그룹을 선택 후 User를 생성한다.</p>\n<p><img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/059c3080-6369-42a4-9906-20679b625c3d\" alt=\"User 생성\"></p>\n<h3 id=\"access-key-생성\" style=\"position:relative;\">Access Key 생성<a href=\"#access-key-%EC%83%9D%EC%84%B1\" aria-label=\"access key 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>User가 성공적으로 생성되었으면 Access Key를 생성한다.</p>\n<p>Users > 생성한 유저로 이동해 Security credentials 탭에서 <strong>Access Key</strong> 를 확인한다.</p>\n<p><img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/58791f89-aee9-4119-b51c-4f7a6cd4a427\" alt=\"Create Access Key\"></p>\n<p><img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/e1bf01f7-6a04-4e2d-9abe-2285b02fd5ce\" alt=\"Access Key 설정\"></p>\n<p>Access Key ID와 secret access key를 확인한다.<br>\n다시 확인할 수 없으니 꼭 csv 파일로 다운받거나 로컬에 복사해놓는다.<br>\n<img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/8eb233e4-20f5-462e-bf2c-2276cd53d3b8\" alt=\"Key 확인\"></p>\n<br/>\n<h2 id=\"nextjs-프로젝트-세팅\" style=\"position:relative;\">Next.js 프로젝트 세팅<a href=\"#nextjs-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%B8%ED%8C%85\" aria-label=\"nextjs 프로젝트 세팅 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"프로젝트-생성\" style=\"position:relative;\">프로젝트 생성<a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"프로젝트 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"cmd\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npx create-next-app@latest</code>\n        </deckgo-highlight-code>\n<p>나는 <code class=\"language-text\">axios</code>를 주로 사용하기 때문에 axios도 추가로 설치했다.</p>\n<deckgo-highlight-code language=\"cmd\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">yarn add axios</code>\n        </deckgo-highlight-code>\n<p>혹은</p>\n<deckgo-highlight-code language=\"cmd\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm install axios</code>\n        </deckgo-highlight-code>\n<p>AWS를 사용하기 위해 sdk도 추가한다.<br>\nTypescript를 사용하는 경우 <code class=\"language-text\">@types/aws-sdk</code> 도 설치한다.</p>\n<deckgo-highlight-code language=\"cmd\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">yarn add aws-sdk\r\nyarn add @types/aws-sdk</code>\n        </deckgo-highlight-code>\n<h3 id=\"env-추가\" style=\"position:relative;\">.env 추가<a href=\"#env-%EC%B6%94%EA%B0%80\" aria-label=\"env 추가 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>AWS 정보는 유출되면 끔찍한 일이 벌어질 수 있다... AWS Key 확인에서도 주의사항이 적혀있듯이 plain text로 작성하면 안된다.<br>\n따라서 프로젝트 루트에 <code class=\"language-text\">.env</code> 파일을 추가해 민감한 정보들을 숨겨주도록 한다.</p>\n<deckgo-highlight-code language=\"cmd\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">yarn add dotenv</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"env\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">AWS_ACCESS_KEY_ID=\r\nAWS_SECRET_ACCESS_KEY=\r\nAWS_REGION=\r\nBUCKET_NAME=</code>\n        </deckgo-highlight-code>\n<p>참고로 깃허브 예제에 올려놓은 <code class=\"language-text\">.env.example</code> 은 동작하지 않는다. 수정 후 <code class=\"language-text\">.env.local</code> 이나 <code class=\"language-text\">.env</code> 등으로 수정해 사용해야 한다.</p>\n<h3 id=\"api-작성\" style=\"position:relative;\">API 작성<a href=\"#api-%EC%9E%91%EC%84%B1\" aria-label=\"api 작성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>예제에서는 Next13을 사용한다 (app directory).</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">src\r\n-- app\r\n---- page.tsx\r\n---- api\r\n------ route.ts</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">src/app/api/route.ts</code> 부터 작성했다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// src/app/api/route.ts\r\n\r\nimport S3 from &quot;aws-sdk/clients/s3&quot;;\r\nimport { NextRequest, NextResponse } from &quot;next/server&quot;;\r\n\r\nconst s3 = new S3({\r\n  apiVersion: &quot;2006-03-01&quot;,\r\n  region: process.env.AWS_REGION,\r\n  credentials: {\r\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\r\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\r\n  },\r\n  signatureVersion: &quot;v4&quot;,\r\n});\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false,\r\n  },\r\n};\r\n\r\nexport async function GET(req: NextRequest) {\r\n\r\n  const post = await s3.createPresignedPost({\r\n      Bucket: process.env.BUCKET_NAME,\r\n      Fields: {\r\n          key: &#39;files/&#39; + req.nextUrl.searchParams.get(&quot;file&quot;),\r\n          &#39;Content-Type&#39;: req.nextUrl.searchParams.get(&quot;fileType&quot;),\r\n      },\r\n      Expires: 60,\r\n      Conditions: [\r\n          [&#39;content-length-range&#39;, 0, 1048576], // up to 1 MB\r\n      ],\r\n  })\r\n\r\n  return NextResponse.json(post)\r\n};</code>\n        </deckgo-highlight-code>\n<p>userId나 datetime 등으로 S3의 Bucket 내 계층을 동적으로 추가하고 싶다면, <code class=\"language-text\">Fields</code>의 <code class=\"language-text\">key</code> 부분에 자유롭게 입력하면 된다.</p>\n<deckgo-highlight-code language=\"tsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">Fields: {\r\n    // files/ 계층 생성 -&gt; 하위로 파일 저장\r\n    key: &#39;files/&#39; + req.nextUrl.searchParams.get(&quot;file&quot;),\r\n    &#39;Content-Type&#39;: req.nextUrl.searchParams.get(&quot;fileType&quot;),\r\n},</code>\n        </deckgo-highlight-code>\n<p>또한 Conditions 를 설정해 업로드 가능한 최대 파일 크기를 명시할 수도 있다.</p>\n<h3 id=\"front-작성\" style=\"position:relative;\">Front 작성<a href=\"#front-%EC%9E%91%EC%84%B1\" aria-label=\"front 작성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">src/app/pages.tsx</code> 를 작성한다.</p>\n<p>먼저 파일을 담을 수 있도록 input을 작성한다.</p>\n<deckgo-highlight-code language=\"tsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// src/app/pages.tsx\r\n&quot;use client&quot;;\r\n\r\nexport default function Home() {\r\n    const [file, setFile] = useState&lt;File | null&gt;(null);\r\n\r\n    const onChangeFile = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\r\n        setFile(e.target.files?.[0] ?? null);\r\n    };\r\n\r\n    return (\r\n        &lt;main&gt;\r\n            &lt;h1&gt;AWS S3 파일 업로드&lt;/h1&gt;\r\n            &lt;div&gt;\r\n                &lt;input onChange={onChangeFile} type=&quot;file&quot;&gt;\r\n                &lt;button&gt;저장!&lt;/button&gt;\r\n            &lt;/div&gt;\r\n        &lt;/main&gt;       \r\n    );\r\n}</code>\n        </deckgo-highlight-code>\n<p>저장 버튼에 onClick 이벤트로 걸 uploadFile 함수를 작성한다.</p>\n<deckgo-highlight-code language=\"tsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// ...\r\n\r\nconst uploadFile = async (file: File | null) =&gt; {\r\n    try {\r\n        // 파일이 없으면 return\r\n        if (!file) {\r\n            console.log(&#39;No file!&#39;)\r\n            return;\r\n        }\r\n\r\n        // UTF-8 로 인코딩\r\n        const filename = encodeURIComponent(file.name);\r\n        const fileType = encodeURIComponent(file.type);\r\n\r\n        // s3 API 호출\r\n        const res = await axios.get(`/api`, {\r\n            params: {\r\n                file: filename,\r\n                fileType,\r\n            },\r\n        });\r\n\r\n        // response로 url 과 fields 받음\r\n        const { url, fields } = await res.data;\r\n\r\n        // form data 객체 생성\r\n        const formData = new FormData();\r\n\r\n        // form data에 데이터 append\r\n\r\n        // FormData에 들어가는 데이터\r\n        /**\r\n         * key (파일명)\r\n         * Content-Type\r\n         * bucket\r\n         * X-Amz-Algorithm (해시 처리 알고리즘)\r\n         * X-Amz-Credential (공개키 + 날짜 + Region 등)\r\n         * X-Amz-Date\r\n         * Policy (token)\r\n         * X-Amz-Signature\r\n         * file\r\n        **/\r\n        Object.entries({ ...fields, file }).forEach(([key, value]) =&gt; {\r\n            formData.append(key, value as string);\r\n        });\r\n\r\n\r\n        // Bucket의 url에 FormData 정보 담아 POST\r\n        const upload = await axios\r\n        .post(url, formData)\r\n        .then((res) =&gt; res)\r\n        .catch((err) =&gt; err);\r\n\r\n        if (upload.status === 204) {\r\n            console.log(&quot;Uploaded successfully!&quot;);\r\n        } else {\r\n            alert(&quot;파일 용량 초과&quot;);\r\n            console.error(&quot;Upload failed.&quot;);\r\n        }\r\n    } catch (error) {}\r\n};\r\n\r\nreturn (\r\n// ...\r\n    &lt;button onClick={() =&gt; uploadFile(file)}&gt;저장!&lt;/button&gt;\r\n// ...\r\n)\r\n</code>\n        </deckgo-highlight-code>\n<p>헷갈리면 안되는 부분!</p>\n<p>작성한 API 코드는 순전히 s3로 넘길 데이터를 만들어서 return 받는 것 뿐이지 s3로 업로드 된 것이 아니다.<br>\n따라서 GET API 호출 후 전달 받은 url (s3 버킷 주소)와 fields(s3업로드 용으로 가공된 파일 데이터)로 POST API를 한번 더 호출해야 한다.</p>\n<p>S3에 들어가보면 작성한대로 <code class=\"language-text\">files/</code> 계층 아래 <code class=\"language-text\">test.txt</code> 파일이 저장된 것을 확인할 수 있다.</p>\n<p><img src=\"https://github.com/Yeony99/Yeony99/assets/76241233/b1eb8b86-884b-4df4-a457-22f888c887b5\" alt=\"image\"></p>\n<p>파일 다운로드는 보통 DB에 file 명을 저장해놓고 처리하기 때문에 깃허브 소스에만 올려두었다.<br>\n소스 확인은 <a href=\"https://github.com/Yeony99/aws-s3-file-upload\">여기</a>로</p>\n<h2 id=\"reference\" style=\"position:relative;\">Reference<a href=\"#reference\" aria-label=\"reference permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"https://github.com/vercel/examples/tree/main/solutions/aws-s3-image-upload\">vercel github examples</a>\r\n<a href=\"https://betterprogramming.pub/how-to-upload-files-to-amazon-s3-from-nextjs-app-b7ef1909976b\">How to Upload Files to AWS S3 From NextJS App</a></p>","internal":{"content":"\r\nS3에 이미지 업로드 하는 과정에서 발생한 여러 삽질과 해결방법 등을 미래의 나를 위한 가이드로 남긴다.\r\n\r\n<a href=\"https://github.com/Yeony99/aws-s3-file-upload\" target=\"_blank\">깃허브 예제 코드 확인하기</a>\r\n\r\n## AWS\r\n\r\n### S3 Bucket 생성\r\n\r\nBucket 생성 시 S3 접근을 하기 위해 Block Public Access를 해제한다.   \r\n사이트의 유저들도 파일 업로드를 해야 하기 때문이다.\r\n\r\n![Public Access](https://github.com/Yeony99/Yeony99/assets/76241233/d2aa44cd-0b3c-46a5-a2ac-e6c8a3b8566c)\r\n\r\n생성 된 후 **Permissions** 탭에서 Bucket Policy를 수정한다.   \r\n별도의 인증 없이 리소스에 접근할 수 있게 할 것이기 때문에 기본적인 policy만 아래와 같이 작성한다.\r\n\r\n`YOUR_BUCKET_NAME` 부분을 수정해 사용하면 된다.\r\n\r\n![Policy 작성](https://github.com/Yeony99/Yeony99/assets/76241233/ed4aaa9e-2489-4dfb-a14b-1aaf8764c80a)\r\n\r\n\r\n```json\r\n{\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n        {\r\n            \"Sid\": \"PublicListGet\",\r\n            \"Effect\": \"Allow\",\r\n            \"Principal\": \"*\",\r\n            \"Action\": [\r\n                \"s3:List*\",\r\n                \"s3:Get*\"\r\n            ],\r\n            \"Resource\": [\r\n                \"arn:aws:s3:::YOUR_BUCKET_NAME\",\r\n                \"arn:aws:s3:::YOUR_BUCKET_NAME/*\"\r\n            ]\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nCORS 를 위해 Cross-orign resource sharing 부분의 프로퍼티를 수정한다.   \r\n아래 설정은 모든 접근을 허용하도록 간단히 작성했다. \r\n\r\n![CORS 설정 작성](https://github.com/Yeony99/Yeony99/assets/76241233/5a4926db-35aa-493d-b451-68d0349fc436)\r\n\r\n\r\n```json\r\n[\r\n    {\r\n        \"AllowedHeaders\": [\r\n            \"*\"\r\n        ],\r\n        \"AllowedMethods\": [\r\n            \"PUT\",\r\n            \"POST\",\r\n            \"GET\"\r\n        ],\r\n        \"AllowedOrigins\": [\r\n            \"*\"\r\n        ],\r\n        \"ExposeHeaders\": [\r\n            \"ETag\"\r\n        ]\r\n    }\r\n]\r\n```\r\n\r\n\r\nBucket이 퍼블릭으로 바뀐 것을 확인할 수 있다.\r\n\r\n![퍼블릭 접근 확인](https://github.com/Yeony99/Yeony99/assets/76241233/ce5d3df2-22fb-46ba-8c53-ab3ac814e23d)\r\n\r\n\r\n### IAM 설정\r\n\r\n~~Life is 아름다운 갤럭시~~\r\n\r\nAWS에 연결하기 위해 권한을 만들어줘야 한다. IAM 메뉴를 검색해서 group을 만든다.   \r\n이미 S3에 Access 권한이 있는 경우에는 생성하지 않아도 된다.\r\n\r\n\r\n![IAM](https://github.com/Yeony99/Yeony99/assets/76241233/0690d987-c410-467d-8aff-b2b4a0a322c4)\r\n\r\nGroup 생성에서 S3 권한을 주도록 하자.   \r\nS3의 모든 권한을 가질 수 있도록 `AmazonS3FullAccess` policy를 선택 후 그룹을 생성한다.\r\n\r\n![User Group 생성](https://github.com/Yeony99/Yeony99/assets/76241233/6badeaf0-d1c5-4d88-ab38-3446527dc75f)\r\n\r\n만든 그룹을 선택 후 User를 생성한다.\r\n\r\n![User 생성](https://github.com/Yeony99/Yeony99/assets/76241233/059c3080-6369-42a4-9906-20679b625c3d)\r\n\r\n\r\n### Access Key 생성\r\nUser가 성공적으로 생성되었으면 Access Key를 생성한다.\r\n\r\nUsers > 생성한 유저로 이동해 Security credentials 탭에서 **Access Key** 를 확인한다.\r\n\r\n![Create Access Key](https://github.com/Yeony99/Yeony99/assets/76241233/58791f89-aee9-4119-b51c-4f7a6cd4a427)\r\n\r\n\r\n![Access Key 설정](https://github.com/Yeony99/Yeony99/assets/76241233/e1bf01f7-6a04-4e2d-9abe-2285b02fd5ce)\r\n\r\nAccess Key ID와 secret access key를 확인한다.   \r\n다시 확인할 수 없으니 꼭 csv 파일로 다운받거나 로컬에 복사해놓는다.   \r\n![Key 확인](https://github.com/Yeony99/Yeony99/assets/76241233/8eb233e4-20f5-462e-bf2c-2276cd53d3b8)\r\n\r\n\r\n<br/>\r\n\r\n## Next.js 프로젝트 세팅\r\n\r\n### 프로젝트 생성\r\n\r\n```cmd\r\nnpx create-next-app@latest\r\n```\r\n\r\n나는 `axios`를 주로 사용하기 때문에 axios도 추가로 설치했다.\r\n\r\n```cmd\r\nyarn add axios\r\n```\r\n혹은\r\n```cmd\r\nnpm install axios\r\n```\r\n\r\nAWS를 사용하기 위해 sdk도 추가한다.   \r\nTypescript를 사용하는 경우 `@types/aws-sdk` 도 설치한다.\r\n\r\n```cmd\r\nyarn add aws-sdk\r\nyarn add @types/aws-sdk\r\n```\r\n\r\n### .env 추가\r\n\r\nAWS 정보는 유출되면 끔찍한 일이 벌어질 수 있다... AWS Key 확인에서도 주의사항이 적혀있듯이 plain text로 작성하면 안된다.   \r\n따라서 프로젝트 루트에 `.env` 파일을 추가해 민감한 정보들을 숨겨주도록 한다.\r\n\r\n```cmd\r\nyarn add dotenv\r\n```\r\n\r\n```env\r\nAWS_ACCESS_KEY_ID=\r\nAWS_SECRET_ACCESS_KEY=\r\nAWS_REGION=\r\nBUCKET_NAME=\r\n```\r\n\r\n참고로 깃허브 예제에 올려놓은 `.env.example` 은 동작하지 않는다. 수정 후 `.env.local` 이나 `.env` 등으로 수정해 사용해야 한다.\r\n\r\n### API 작성\r\n\r\n예제에서는 Next13을 사용한다 (app directory).\r\n\r\n```\r\nsrc\r\n-- app\r\n---- page.tsx\r\n---- api\r\n------ route.ts\r\n```\r\n\r\n`src/app/api/route.ts` 부터 작성했다.\r\n\r\n```ts\r\n// src/app/api/route.ts\r\n\r\nimport S3 from \"aws-sdk/clients/s3\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\n\r\nconst s3 = new S3({\r\n  apiVersion: \"2006-03-01\",\r\n  region: process.env.AWS_REGION,\r\n  credentials: {\r\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\r\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\r\n  },\r\n  signatureVersion: \"v4\",\r\n});\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false,\r\n  },\r\n};\r\n\r\nexport async function GET(req: NextRequest) {\r\n\r\n  const post = await s3.createPresignedPost({\r\n      Bucket: process.env.BUCKET_NAME,\r\n      Fields: {\r\n          key: 'files/' + req.nextUrl.searchParams.get(\"file\"),\r\n          'Content-Type': req.nextUrl.searchParams.get(\"fileType\"),\r\n      },\r\n      Expires: 60,\r\n      Conditions: [\r\n          ['content-length-range', 0, 1048576], // up to 1 MB\r\n      ],\r\n  })\r\n\r\n  return NextResponse.json(post)\r\n};\r\n```\r\n\r\nuserId나 datetime 등으로 S3의 Bucket 내 계층을 동적으로 추가하고 싶다면, `Fields`의 `key` 부분에 자유롭게 입력하면 된다.\r\n\r\n```tsx\r\nFields: {\r\n    // files/ 계층 생성 -> 하위로 파일 저장\r\n    key: 'files/' + req.nextUrl.searchParams.get(\"file\"),\r\n    'Content-Type': req.nextUrl.searchParams.get(\"fileType\"),\r\n},\r\n```\r\n\r\n또한 Conditions 를 설정해 업로드 가능한 최대 파일 크기를 명시할 수도 있다.\r\n\r\n\r\n### Front 작성\r\n\r\n`src/app/pages.tsx` 를 작성한다.\r\n\r\n\r\n먼저 파일을 담을 수 있도록 input을 작성한다.\r\n\r\n```tsx\r\n// src/app/pages.tsx\r\n\"use client\";\r\n\r\nexport default function Home() {\r\n    const [file, setFile] = useState<File | null>(null);\r\n\r\n    const onChangeFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFile(e.target.files?.[0] ?? null);\r\n    };\r\n\r\n    return (\r\n        <main>\r\n            <h1>AWS S3 파일 업로드</h1>\r\n            <div>\r\n                <input onChange={onChangeFile} type=\"file\">\r\n                <button>저장!</button>\r\n            </div>\r\n        </main>       \r\n    );\r\n}\r\n```\r\n\r\n저장 버튼에 onClick 이벤트로 걸 uploadFile 함수를 작성한다.\r\n\r\n```tsx\r\n// ...\r\n\r\nconst uploadFile = async (file: File | null) => {\r\n    try {\r\n        // 파일이 없으면 return\r\n        if (!file) {\r\n            console.log('No file!')\r\n            return;\r\n        }\r\n\r\n        // UTF-8 로 인코딩\r\n        const filename = encodeURIComponent(file.name);\r\n        const fileType = encodeURIComponent(file.type);\r\n\r\n        // s3 API 호출\r\n        const res = await axios.get(`/api`, {\r\n            params: {\r\n                file: filename,\r\n                fileType,\r\n            },\r\n        });\r\n\r\n        // response로 url 과 fields 받음\r\n        const { url, fields } = await res.data;\r\n\r\n        // form data 객체 생성\r\n        const formData = new FormData();\r\n\r\n        // form data에 데이터 append\r\n\r\n        // FormData에 들어가는 데이터\r\n        /**\r\n         * key (파일명)\r\n         * Content-Type\r\n         * bucket\r\n         * X-Amz-Algorithm (해시 처리 알고리즘)\r\n         * X-Amz-Credential (공개키 + 날짜 + Region 등)\r\n         * X-Amz-Date\r\n         * Policy (token)\r\n         * X-Amz-Signature\r\n         * file\r\n        **/\r\n        Object.entries({ ...fields, file }).forEach(([key, value]) => {\r\n            formData.append(key, value as string);\r\n        });\r\n\r\n\r\n        // Bucket의 url에 FormData 정보 담아 POST\r\n        const upload = await axios\r\n        .post(url, formData)\r\n        .then((res) => res)\r\n        .catch((err) => err);\r\n\r\n        if (upload.status === 204) {\r\n            console.log(\"Uploaded successfully!\");\r\n        } else {\r\n            alert(\"파일 용량 초과\");\r\n            console.error(\"Upload failed.\");\r\n        }\r\n    } catch (error) {}\r\n};\r\n\r\nreturn (\r\n// ...\r\n    <button onClick={() => uploadFile(file)}>저장!</button>\r\n// ...\r\n)\r\n\r\n```\r\n\r\n헷갈리면 안되는 부분!\r\n\r\n작성한 API 코드는 순전히 s3로 넘길 데이터를 만들어서 return 받는 것 뿐이지 s3로 업로드 된 것이 아니다.   \r\n따라서 GET API 호출 후 전달 받은 url (s3 버킷 주소)와 fields(s3업로드 용으로 가공된 파일 데이터)로 POST API를 한번 더 호출해야 한다.   \r\n\r\n\r\nS3에 들어가보면 작성한대로 `files/` 계층 아래 `test.txt` 파일이 저장된 것을 확인할 수 있다.\r\n\r\n![image](https://github.com/Yeony99/Yeony99/assets/76241233/b1eb8b86-884b-4df4-a457-22f888c887b5)\r\n\r\n\r\n파일 다운로드는 보통 DB에 file 명을 저장해놓고 처리하기 때문에 깃허브 소스에만 올려두었다.   \r\n소스 확인은 [여기](https://github.com/Yeony99/aws-s3-file-upload)로 \r\n\r\n\r\n## Reference\r\n\r\n[vercel github examples](https://github.com/vercel/examples/tree/main/solutions/aws-s3-image-upload)\r\n[How to Upload Files to AWS S3 From NextJS App](https://betterprogramming.pub/how-to-upload-files-to-amazon-s3-from-nextjs-app-b7ef1909976b)"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#aws\">AWS</a></p>\n<ul>\n<li><a href=\"#s3-bucket-%EC%83%9D%EC%84%B1\">S3 Bucket 생성</a></li>\n<li><a href=\"#iam-%EC%84%A4%EC%A0%95\">IAM 설정</a></li>\n<li><a href=\"#access-key-%EC%83%9D%EC%84%B1\">Access Key 생성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#nextjs-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%B8%ED%8C%85\">Next.js 프로젝트 세팅</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\">프로젝트 생성</a></li>\n<li><a href=\"#env-%EC%B6%94%EA%B0%80\">.env 추가</a></li>\n<li><a href=\"#api-%EC%9E%91%EC%84%B1\">API 작성</a></li>\n<li><a href=\"#front-%EC%9E%91%EC%84%B1\">Front 작성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/how-to-upload-files-to-aws-s3-from-nextjs"}},"staticQueryHashes":["2665612806"]}