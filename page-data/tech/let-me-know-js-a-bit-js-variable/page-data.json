{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/let-me-know-js-a-bit-js-variable","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/let-me-know-js-a-bit-js-variable","tags":["쫌만알자"],"date":"2022-08-31","img":"https://user-images.githubusercontent.com/76241233/177932893-5a504b26-12e4-4ade-b1ce-1951d072ba82.jpg","title":"쫌만알자! (6) - 변수 사용하기"},"html":"<h2 id=\"변수란\" style=\"position:relative;\">변수란?<a href=\"#%EB%B3%80%EC%88%98%EB%9E%80\" aria-label=\"변수란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>사람이 사람과 대화를 한다 생각해봅시다.</p>\n<p>A가 말을 하면 B가 듣고 대답을 하겠죠? 프로그램도 똑같습니다.<br>\n값을 입력<code class=\"language-text\">input</code>하면 결과가 출력<code class=\"language-text\">output</code>되는 과정이 프로그램의 전부죠.</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">10 + 100</code>\n        </deckgo-highlight-code>\n<p>위 식을 보면 자연스럽게 결과가 110 이란 걸 생각할 수 있죠? 어떻게 110이라고 생각하게 되었나요?<br>\n너무 무의식 중이라 잘 모르고 지나쳤을 수 있습니다.<br>\n우리는 숫자(10, 100)을 기억하고, 부호(+)의 의미를 알고 있습니다. 뿐만 아니라 <code class=\"language-text\">10 + 100</code>도 해석할 수 있죠.<br>\n따라서 10과 100을 더한 값이 110이라는 해석 결과를 내놓을 수 있습니다.</p>\n<p>자바스크립트 엔진도 마찬가지입니다.</p>\n<p>메모리 어딘가에 값을 저장(기억)하고 CPU가 이 값을 읽어들여 연산을 수행합니다.\r\n연산을 수행하고 난 값도 어딘가에 저장을 합니다. 그런데 어딘가가 도대체 어디일까요? 저장하는 메모리 주소는 임의의 주소이기 때문에 우리는 그 곳을 알 수가 없습니다.<br>\n그럼 애써 계산을 완료했어도 그 값을 재사용할 수 없죠.</p>\n<p>따라서 그 값을 다시 찾기 위해 <strong>변수</strong>를 사용합니다.</p>\n<p>변수의 정의는 다음과 같습니다.\r\n<strong>하나의 값을 저장할 수 있는 메모리 공간</strong>입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76241233/185878214-954c86c6-bdb5-4116-9791-2e498dec970d.png\" alt=\"값 생성과 변수에 할당하기\" title=\"값 생성과 변수에 할당하기\"></p>\n<p>저 계산한 값에 이름을 붙인 것이 변수입니다.</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var sum = 10 + 100;\r\n\r\nconsole.log(sum); // 110</code>\n        </deckgo-highlight-code>\n<br/>\n<hr>\n<h2 id=\"변수-선언하기\" style=\"position:relative;\">변수 선언하기<a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\" aria-label=\"변수 선언하기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>변수를 사용하려면 변수를 선언하는 과정이 선행되어야 합니다.</p>\n<h3 id=\"변수-선언-키워드\" style=\"position:relative;\">변수 선언 키워드<a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"변수 선언 키워드 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>var</li>\n<li>let</li>\n<li>const</li>\n</ul>\n<p>변수를 선언할 때 앞에 붙일 수 있는 키워드는 총 3가지입니다.<br>\n앞선 글에서 var 키워드는 자주 보여 익숙하죠?</p>\n<p>이 세 키워드 중 var를 제외하면 ES6 문법부터 도입되었습니다. 이전 문법(ES5)까지는 var 외에는 다른 키워드가 없었습니다.</p>\n<p>우선 var 키워드로 변수를 선언하는 법부터 알아보겠습니다.</p>\n<hr>\n<h3 id=\"변수-선언과-할당-예시\" style=\"position:relative;\">변수 선언과 할당 예시<a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EA%B3%BC-%ED%95%A0%EB%8B%B9-%EC%98%88%EC%8B%9C\" aria-label=\"변수 선언과 할당 예시 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">count</code>라는 변수를 선언해볼까요?</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var count;</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">var</code>로 변수를 <strong>선언</strong>하면 컴퓨터가 <code class=\"language-text\">count</code>라는 이름으로 메모리를 확보한 상태입니다.<br>\n여기서 타입은 무엇일까요?</p>\n<p>바로 <strong>undefined</strong>입니다. 앞서 var 키워드로 선언을 하게 되면 암묵적으로 undefined를 할당해버린다고 언급하였는데요.</p>\n<p><strong>선언</strong>과 <strong>할당</strong>은 뭐가 다른지 한 번 살펴봅시다.</p>\n<ul>\n<li>선언 : 변수 이름을 엔진에 등록</li>\n<li>할당(초기화) : 값을 지정하기 위해 메모리 공간을 확보 (암묵적으로 undefined 할당)</li>\n</ul>\n<p>만약 자바스크립트 엔진이 <code class=\"language-text\">undefined</code>를 할당하지 않고 변수를 참조하게 되면 어떻게 될까요? 네! 당연히 이상한 결과가 나오겠죠? 이전에 다른 프로그램이 사용했던 값이 겹쳐지는 이슈가 있을 수도 있습니다.</p>\n<p>자바스크립트 엔진이 변수를 초기화하며 그런 이슈를 피할 수 있는 것이죠.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var count; // 선언 - undefined로 암묵적 할당\r\n\r\ncount = 0; // 값의 명시적 할당</code>\n        </deckgo-highlight-code>\n<p>값을 할당(저장, 대입)할 때에는 할당 연산자 <code class=\"language-text\">=</code>를 사용합니다.</p>\n<hr>\n<h3 id=\"호이스팅\" style=\"position:relative;\">호이스팅<a href=\"#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"호이스팅 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>선언과 할당이 되는 순서를 console에 찍어보며 알아봅시다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">console.log(&#39;1&#39;, test) // undefined\r\nvar test; // 선언\r\nconsole.log(&#39;2&#39;, test) // undefined\r\ntest = 10; // 명시적 할당\r\nconsole.log(&#39;3&#39;, test) // undefined</code>\n        </deckgo-highlight-code>\n<p>코드에서 뭔가 이상한 점을 발견하셨나요?<br>\n<code class=\"language-text\">var test;</code>로 변수를 선언하기 전에 console.log()로 확인한 <code class=\"language-text\">test</code>의 결과가 <code class=\"language-text\">undefined</code>로 출력이 됐죠?</p>\n<p>이런 현상을 호이스팅이라고 하는데요. 호이스팅이란 <strong>변수 선언문이 코드의 최상단으로 끌어올려진 것처럼 동작</strong>하는 자바스크립트의 한 특징입니다.</p>\n<p>즉 선언은 2번째 줄에서 했지만 실제로는 1번째 console.log()보다 앞선 것처럼 작동한 것이죠.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var test; // 선언\r\nconsole.log(&#39;1&#39;, test)\r\nconsole.log(&#39;2&#39;, test)\r\ntest = 10; // 명시적 할당\r\nconsole.log(&#39;3&#39;, test) </code>\n        </deckgo-highlight-code>\n<br/>\r\n<hr/>\n<h3 id=\"재할당\" style=\"position:relative;\">재할당<a href=\"#%EC%9E%AC%ED%95%A0%EB%8B%B9\" aria-label=\"재할당 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>변수를 선언하고 할당을 한 후 값을 변경할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">var name = &quot;Nayeon&quot;;\r\n\r\nname = &quot;Yeony&quot;; // 재할당</code>\n        </deckgo-highlight-code>\n<br/>\n<h4 id=\"const-상수\" style=\"position:relative;\">const 상수<a href=\"#const-%EC%83%81%EC%88%98\" aria-label=\"const 상수 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>만약 재할당이 불가능하다면 그것은 변수가 아니라 변하지 않는 값, <strong>상수</strong>라고 일컫습니다.</p>\n<p>상수는 ES6 문법부터 도입되었는데요. 앞서 <a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%ED%82%A4%EC%9B%8C%EB%93%9C\">변수 선언 키워드</a>\r\n자바스크립트의 상수는 <code class=\"language-text\">const</code> 키워드로 선언 및 할당할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const birthYear = 1999;\r\n\r\nbirthYear = 2022; // error!</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">const</code>는 상수이기 때문에 재할당이 불가능합니다.<br>\n만약 재할당 하려하면 에러가 발생합니다.</p>\n<p>한 가지 유의할 점이 더 있습니다. var나 let 같은 키워드는 재할당이 가능하지만, <strong>const는 재할당이 불가능</strong>하기 때문에 선언과 동시에 반드시 값을 할당해야합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const test; // initializer Error!</code>\n        </deckgo-highlight-code>\n<h4 id=\"let-변수\" style=\"position:relative;\">let 변수<a href=\"#let-%EB%B3%80%EC%88%98\" aria-label=\"let 변수 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">let</code>은 <code class=\"language-text\">var</code>와 같이 변수 앞에 적는 키워드입니다.</p>\n<p>그럼 무슨 차이가 있을까요?</p>\n<p>바로 <a href=\"#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">호이스팅</a> 에서 차이가 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">console.log(name); // Reference Error!\r\nlet name = &#39;Yeony&#39;;</code>\n        </deckgo-highlight-code>\n<p>분명 호이스팅을 이해하며, 변수가 <em>끌어올려져</em> undefined가 출력되는 것을 보았습니다.<br>\n하지만 <code class=\"language-text\">let</code> 키워드는 참조에러(Reference Error)가 발생하네요. 왜일까요?</p>\n<p><code class=\"language-text\">let</code> 또한 호이스팅이 되지만 <code class=\"language-text\">let</code>이나 <code class=\"language-text\">const</code>가 선언된 위치에 코드 실행이 진행될 때까지 <strong>접근이 불가능</strong>한 상태입니다.<br>\n<code class=\"language-text\">var</code> 키워드는 접근이 되는 것이구요. (보다 자세한 내용은 추후 스코프(scope)를 설명할 때 보태겠습니다.)</p>\n<p>따라서 모던 자바스크립트에서는 var 사용을 지양하고 let 사용을 권합니다.<br>\n하지만 var로 작성된 코드는 무수히 많기 때문에, 이 차이점을 꼭 유념하고 넘어가야합니다.</p>\n<p>다음 글에서는 변수, 상수의 이름짓기(Naming) 규칙을 알아보겠습니다.</p>\n<p>◾ <a href=\"/tech/let-me-know-js-a-bit-js-data-type\">자바스크립트 자료형</a>  👈 이전 글 보기</p>\n<!-- ◾ [브라우저 JavaScript 개발환경](/tech/let-me-know-js-a-bit-setting-devtool/) 👈 다음 글 보기    -->","internal":{"content":"\r\n## 변수란?\r\n\r\n사람이 사람과 대화를 한다 생각해봅시다.\r\n\r\nA가 말을 하면 B가 듣고 대답을 하겠죠? 프로그램도 똑같습니다.   \r\n값을 입력`input`하면 결과가 출력`output`되는 과정이 프로그램의 전부죠.\r\n\r\n```\r\n10 + 100\r\n```\r\n위 식을 보면 자연스럽게 결과가 110 이란 걸 생각할 수 있죠? 어떻게 110이라고 생각하게 되었나요?   \r\n너무 무의식 중이라 잘 모르고 지나쳤을 수 있습니다.   \r\n우리는 숫자(10, 100)을 기억하고, 부호(+)의 의미를 알고 있습니다. 뿐만 아니라 `10 + 100`도 해석할 수 있죠.   \r\n따라서 10과 100을 더한 값이 110이라는 해석 결과를 내놓을 수 있습니다.\r\n\r\n자바스크립트 엔진도 마찬가지입니다.   \r\n\r\n메모리 어딘가에 값을 저장(기억)하고 CPU가 이 값을 읽어들여 연산을 수행합니다. \r\n연산을 수행하고 난 값도 어딘가에 저장을 합니다. 그런데 어딘가가 도대체 어디일까요? 저장하는 메모리 주소는 임의의 주소이기 때문에 우리는 그 곳을 알 수가 없습니다.   \r\n그럼 애써 계산을 완료했어도 그 값을 재사용할 수 없죠.\r\n\r\n따라서 그 값을 다시 찾기 위해 **변수**를 사용합니다.   \r\n\r\n변수의 정의는 다음과 같습니다.\r\n**하나의 값을 저장할 수 있는 메모리 공간**입니다. \r\n\r\n![값 생성과 변수에 할당하기](https://user-images.githubusercontent.com/76241233/185878214-954c86c6-bdb5-4116-9791-2e498dec970d.png \"값 생성과 변수에 할당하기\")\r\n\r\n저 계산한 값에 이름을 붙인 것이 변수입니다.\r\n\r\n```\r\nvar sum = 10 + 100;\r\n\r\nconsole.log(sum); // 110\r\n```\r\n\r\n<br/>\r\n\r\n---\r\n\r\n## 변수 선언하기\r\n\r\n변수를 사용하려면 변수를 선언하는 과정이 선행되어야 합니다.    \r\n\r\n### 변수 선언 키워드\r\n\r\n* var\r\n* let\r\n* const\r\n\r\n변수를 선언할 때 앞에 붙일 수 있는 키워드는 총 3가지입니다.   \r\n앞선 글에서 var 키워드는 자주 보여 익숙하죠?\r\n\r\n이 세 키워드 중 var를 제외하면 ES6 문법부터 도입되었습니다. 이전 문법(ES5)까지는 var 외에는 다른 키워드가 없었습니다.   \r\n\r\n우선 var 키워드로 변수를 선언하는 법부터 알아보겠습니다.\r\n\r\n---\r\n\r\n### 변수 선언과 할당 예시\r\n\r\n`count`라는 변수를 선언해볼까요?\r\n\r\n```javascript\r\nvar count;\r\n```\r\n\r\n`var`로 변수를 **선언**하면 컴퓨터가 `count`라는 이름으로 메모리를 확보한 상태입니다.   \r\n여기서 타입은 무엇일까요?    \r\n\r\n바로 **undefined**입니다. 앞서 var 키워드로 선언을 하게 되면 암묵적으로 undefined를 할당해버린다고 언급하였는데요.   \r\n\r\n\r\n**선언**과 **할당**은 뭐가 다른지 한 번 살펴봅시다.   \r\n\r\n\r\n* 선언 : 변수 이름을 엔진에 등록\r\n* 할당(초기화) : 값을 지정하기 위해 메모리 공간을 확보 (암묵적으로 undefined 할당)\r\n\r\n\r\n만약 자바스크립트 엔진이 `undefined`를 할당하지 않고 변수를 참조하게 되면 어떻게 될까요? 네! 당연히 이상한 결과가 나오겠죠? 이전에 다른 프로그램이 사용했던 값이 겹쳐지는 이슈가 있을 수도 있습니다.    \r\n\r\n자바스크립트 엔진이 변수를 초기화하며 그런 이슈를 피할 수 있는 것이죠.\r\n\r\n\r\n```javascript\r\nvar count; // 선언 - undefined로 암묵적 할당\r\n\r\ncount = 0; // 값의 명시적 할당\r\n```\r\n\r\n값을 할당(저장, 대입)할 때에는 할당 연산자 `=`를 사용합니다.\r\n\r\n---\r\n\r\n### 호이스팅\r\n\r\n선언과 할당이 되는 순서를 console에 찍어보며 알아봅시다.\r\n\r\n```javascript\r\nconsole.log('1', test) // undefined\r\nvar test; // 선언\r\nconsole.log('2', test) // undefined\r\ntest = 10; // 명시적 할당\r\nconsole.log('3', test) // undefined\r\n```\r\n\r\n코드에서 뭔가 이상한 점을 발견하셨나요?    \r\n`var test;`로 변수를 선언하기 전에 console.log()로 확인한 `test`의 결과가 `undefined`로 출력이 됐죠?\r\n\r\n이런 현상을 호이스팅이라고 하는데요. 호이스팅이란 **변수 선언문이 코드의 최상단으로 끌어올려진 것처럼 동작**하는 자바스크립트의 한 특징입니다. \r\n\r\n즉 선언은 2번째 줄에서 했지만 실제로는 1번째 console.log()보다 앞선 것처럼 작동한 것이죠.   \r\n\r\n```javascript\r\nvar test; // 선언\r\nconsole.log('1', test)\r\nconsole.log('2', test)\r\ntest = 10; // 명시적 할당\r\nconsole.log('3', test) \r\n```\r\n<br/>\r\n<hr/>\r\n\r\n### 재할당\r\n\r\n변수를 선언하고 할당을 한 후 값을 변경할 수 있습니다.\r\n\r\n```javascript\r\nvar name = \"Nayeon\";\r\n\r\nname = \"Yeony\"; // 재할당\r\n```\r\n\r\n<br/>\r\n\r\n#### const 상수\r\n\r\n만약 재할당이 불가능하다면 그것은 변수가 아니라 변하지 않는 값, **상수**라고 일컫습니다.   \r\n\r\n상수는 ES6 문법부터 도입되었는데요. 앞서 [변수 선언 키워드](#변수-선언-키워드)\r\n자바스크립트의 상수는 `const` 키워드로 선언 및 할당할 수 있습니다.\r\n\r\n\r\n```javascript\r\nconst birthYear = 1999;\r\n\r\nbirthYear = 2022; // error!\r\n```\r\n\r\n`const`는 상수이기 때문에 재할당이 불가능합니다.   \r\n만약 재할당 하려하면 에러가 발생합니다.    \r\n\r\n한 가지 유의할 점이 더 있습니다. var나 let 같은 키워드는 재할당이 가능하지만, **const는 재할당이 불가능**하기 때문에 선언과 동시에 반드시 값을 할당해야합니다.   \r\n\r\n\r\n```javascript\r\nconst test; // initializer Error!\r\n```\r\n\r\n#### let 변수\r\n\r\n`let`은 `var`와 같이 변수 앞에 적는 키워드입니다.   \r\n\r\n그럼 무슨 차이가 있을까요?\r\n\r\n바로 [호이스팅](#호이스팅) 에서 차이가 있습니다.   \r\n\r\n```javascript\r\nconsole.log(name); // Reference Error!\r\nlet name = 'Yeony';\r\n```\r\n\r\n분명 호이스팅을 이해하며, 변수가 *끌어올려져* undefined가 출력되는 것을 보았습니다.    \r\n하지만 `let` 키워드는 참조에러(Reference Error)가 발생하네요. 왜일까요?\r\n\r\n\r\n`let` 또한 호이스팅이 되지만 `let`이나 `const`가 선언된 위치에 코드 실행이 진행될 때까지 **접근이 불가능**한 상태입니다.   \r\n`var` 키워드는 접근이 되는 것이구요. (보다 자세한 내용은 추후 스코프(scope)를 설명할 때 보태겠습니다.)\r\n\r\n\r\n따라서 모던 자바스크립트에서는 var 사용을 지양하고 let 사용을 권합니다.   \r\n하지만 var로 작성된 코드는 무수히 많기 때문에, 이 차이점을 꼭 유념하고 넘어가야합니다.   \r\n\r\n\r\n다음 글에서는 변수, 상수의 이름짓기(Naming) 규칙을 알아보겠습니다.\r\n\r\n \r\n◾ [자바스크립트 자료형](/tech/let-me-know-js-a-bit-js-data-type)  👈 이전 글 보기   \r\n<!-- ◾ [브라우저 JavaScript 개발환경](/tech/let-me-know-js-a-bit-setting-devtool/) 👈 다음 글 보기    -->"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%B3%80%EC%88%98%EB%9E%80\">변수란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\">변수 선언하기</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%ED%82%A4%EC%9B%8C%EB%93%9C\">변수 선언 키워드</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EA%B3%BC-%ED%95%A0%EB%8B%B9-%EC%98%88%EC%8B%9C\">변수 선언과 할당 예시</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">호이스팅</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%AC%ED%95%A0%EB%8B%B9\">재할당</a></p>\n<ul>\n<li><a href=\"#const-%EC%83%81%EC%88%98\">const 상수</a></li>\n<li><a href=\"#let-%EB%B3%80%EC%88%98\">let 변수</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/let-me-know-js-a-bit-js-variable"}},"staticQueryHashes":["2665612806"]}