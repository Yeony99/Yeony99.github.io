{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/tech/react-native-with-monorepo",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/react-native-with-monorepo","tags":["React/RN"],"date":"2022-10-10","img":null,"title":"리액트 네이티브 모노레포 프로젝트 구축하기"},"excerpt":"들어가며 React와 React Native를 공부하며 웹과 앱 간에 소스를 공유할 수 있으면 좋겠다는 생각이 들었습니다.\nflutter web도 고려사항에 있었지만, 고민 끝에 React와 RN…","html":"<h2 id=\"들어가며\" style=\"position:relative;\">들어가며<a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>React와 React Native를 공부하며 웹과 앱 간에 소스를 공유할 수 있으면 좋겠다는 생각이 들었습니다.\nflutter web도 고려사항에 있었지만, 고민 끝에 React와 RN으로 노선을 정했습니다.</p>\n<ul>\n<li>언어의 숙련도</li>\n<li>플랫폼에 관계없는 동일한 사용자 경험 제공 (UX/UI 통일)</li>\n<li>소스 중복 최소화</li>\n</ul>\n<p>이 두 가지를 고려했습니다.</p>\n<p>요구사항이 추가될 수 있기 때문에, 언젠가 네이티브 코드 연동이 필요하지 않을까 싶어 expo는 고려하지 않았습니다.</p>\n<h3 id=\"프로젝트\" style=\"position:relative;\">프로젝트<a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"프로젝트 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://github.com/Yeony99/react-native-monorepo\">Yeony99 - react-native-monorepo</a> 프로젝트를 본 글의 예시로 올려놓았습니다.</p>\n<p><code class=\"language-text\">node_modules</code> 설치한 후 루트의 <code class=\"language-text\">package.json</code>의 scripts를 참고해 실행해볼 수 있습니다.</p>\n<br/>\n<hr>\n<h2 id=\"yarn-workspace-모노레포-설정하기\" style=\"position:relative;\">Yarn workspace 모노레포 설정하기<a href=\"#yarn-workspace-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"yarn workspace 모노레포 설정하기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>모바일과 웹 소스를 각각의 레포지토리로 만드는 멀티 레포도 괜찮을 것 같지만, 장기적으로 생각했을 때 하나의 레포지토리로 여러 패키지를 관리하는 것이 부담이 덜할 것이라 판단했습니다.</p>\n<p>웹과 앱에서 동일한 사용자 경험을 주고 싶기도 했구요. <br/></p>\n<h3 id=\"yarn-workspace\" style=\"position:relative;\">yarn workspace<a href=\"#yarn-workspace\" aria-label=\"yarn workspace permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>yarn에서는 root 경로의 package.json 파일이 하위 폴더의 package.json에 정의된 dependencies를 <code class=\"language-text\">yarn install</code>로 한번에 설치할 수 있게 하는 <a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">workspace</a> 설정이 가능합니다.</p>\n<p>구성할 프로젝트 구조는 아래와 같습니다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&lt;root&gt;/\n└─ packages/\n    ├── app/\n    │   ├── src/\n    │   └── package.json\n    # Android/iOS app configuration files and native code\n    ├── mobile/\n    │   ├── android/\n    │   ├── ios/\n    │   ├── app.json\n    │   ├── babel.config.js\n    │   ├── index.js\n    │   ├── metro.config.js\n    │   └── package.json\n    # Windows app configuration files and native code\n    └── web/\n        ├── public/\n        ├── src/\n        ├── carco.config.js\n        └── package.json\n└─ package.json</code>\n        </deckgo-highlight-code>\n<br/>\n<h3 id=\"yarn-설치\" style=\"position:relative;\">yarn 설치<a href=\"#yarn-%EC%84%A4%EC%B9%98\" aria-label=\"yarn 설치 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>node가 설치되어 있다면 npm으로 설치합니다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">$ npm install -g yarn</code>\n        </deckgo-highlight-code>\n<p>node가 설치되어 있지 않다면 node부터 설치합니다.</p>\n<p>그 외에도 homebrew, chocolatey 등을 이용해 설치할 수 있습니다.</p>\n<p>설치 완료 후 확인합니다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">$ yarn --version</code>\n        </deckgo-highlight-code>\n<br/>\n<h3 id=\"프로젝트-생성\" style=\"position:relative;\">프로젝트 생성<a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"프로젝트 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>원하는 프로젝트명으로 폴더를 하나 생성합니다. 저는 <code class=\"language-text\">react-native-monorepo</code>로 설정하였습니다. 여기가 프로젝트의 루트 디렉토리입니다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">$ yarn init -y</code>\n        </deckgo-highlight-code>\n<p>위 명령어로 package.json을 생성해줍니다. 생성된 package.json을 수정해봅시다.</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 루트 package.json\n{\n  &quot;name&quot;: &quot;react-native-monorepo&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  // 추가\n  &quot;workspaces&quot;: {\n    &quot;packages&quot;: [&quot;packages/*&quot;],\n    &quot;nohoist&quot;: [&quot;**/react&quot;, &quot;**/react-dom&quot;]\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>workspaces 속 packages에는 yarn workspace에서 관리할 패키지 경로를 입력합니다.<br>\n<code class=\"language-text\">nohoist</code>는 루트 프로젝트 디렉토리가 아닌, 각 패키지 디렉토리에 설치되어야 한다고 yarn에 알려줍니다.</p>\n<p>그 후 packages 디렉토리를 생성합니다.</p>\n<p>pacakges 폴더로 <code class=\"language-text\">cd packages</code> 한 뒤 각각의 프로젝트를 생성해봅시다.</p>\n<h3 id=\"app-패키지-생성\" style=\"position:relative;\">app 패키지 생성<a href=\"#app-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%83%9D%EC%84%B1\" aria-label=\"app 패키지 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>공유될 React Native 코드를 담을 <code class=\"language-text\">app</code> 디렉토리를 생성해봅시다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">$ mkdir packages/app &amp;&amp; cd packages/app</code>\n        </deckgo-highlight-code>\n<p>app 디렉토리의 루트에서 <strong>package.json</strong>을 추가하고 아래와 같이 작성합니다.</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// app의 package.json\n{\n  &quot;name&quot;: &quot;@react-native-monorepo/app&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;private&quot;: true,\n  &quot;main&quot;: &quot;src&quot;,\n  &quot;peerDependencies&quot;: {\n    &quot;react&quot;: &quot;*&quot;,\n    &quot;react-native&quot;: &quot;*&quot;\n  }\n}</code>\n        </deckgo-highlight-code>\n<br/>\n<div style=\"background-color: #eee; border-radius: 1rem; font-size: 0.9rem; padding: 1rem\">\n  <h6>❗ peerDependencies 란?</h6>\n  실제로 app 패키지 내부에서 import하지는 않지만, 패키지에 의존하는 각각의 앱들이 라이브러리 버전을 제공합니다.<br/>\n  app 패키지의 `peerDependencies`는 이후 생성할 mobile, web 앱으로부터 각각의 버전을 받게 됩니다.\n</div>\n<p><code class=\"language-text\">src/index.js</code>에 앱을 만들어봅시다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// react-native-monorepo/packages/app/src/index.js\n\nimport React from &quot;react&quot;\nimport { Platform, StyleSheet, Text, View } from &quot;react-native&quot;\n\nexport function App() {\n  return (\n    &lt;View&gt;\n      &lt;Text style={styles.text}&gt;Hello from React Native! &lt;/Text&gt;\n      &lt;View style={styles.platformRow}&gt;\n        &lt;Text style={styles.text}&gt;Platform: &lt;/Text&gt;\n        &lt;View style={styles.platformBackground}&gt;\n          &lt;Text style={styles.platformValue}&gt;{Platform.OS}&lt;/Text&gt;\n        &lt;/View&gt;\n      &lt;/View&gt;\n    &lt;/View&gt;\n  )\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 28,\n    fontWeight: &quot;600&quot;,\n  },\n  platformRow: {\n    marginTop: 12,\n    flexDirection: &quot;row&quot;,\n    alignItems: &quot;center&quot;,\n  },\n  platformValue: {\n    fontSize: 28,\n    fontWeight: &quot;500&quot;,\n  },\n  platformBackground: {\n    backgroundColor: &quot;#ececec&quot;,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: &quot;#d4d4d4&quot;,\n    paddingHorizontal: 6,\n    borderRadius: 6,\n    alignItems: &quot;center&quot;,\n  },\n})\n\nexport default App</code>\n        </deckgo-highlight-code>\n<p>yarn workspace 덕분에 <code class=\"language-text\">@react-native-monorepo/app</code>을 다른 작업 공간에서도 사용할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">@react-native-monorepo/app</code>으로 dependencies에 표시</li>\n<li><code class=\"language-text\">import App from \"@react-native-monorepo/app\";</code></li>\n</ul>\n<h3 id=\"mobile-코드-생성\" style=\"position:relative;\">mobile 코드 생성<a href=\"#mobile-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1\" aria-label=\"mobile 코드 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>React Native를 사용할 수 있게 되었으니 <code class=\"language-text\">packages/mobile</code>에 Android 와 iOS 네이티브 코드를 작성할 수 있도록 프로젝트를 생성해봅시다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"># window\n$ cd packages &amp;&amp; npx react-native init MyApp &amp;&amp; move MyApp mobile\n\n# macOS\n$ cd packages &amp;&amp; npx react-native init MyApp &amp;&amp; mv MyApp mobile</code>\n        </deckgo-highlight-code>\n<p>package.json에 패키지 이름을 바꾸고, <code class=\"language-text\">@react-native-monorepo/app</code> 종속성을 추가합니다.</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// packages/mobile/package.json\n{\n  // 이름 수정\n  &quot;name&quot;: &quot;@react-native-monorepo/mobile&quot;,\n  &quot;version&quot;: &quot;0.0.1&quot;,\n  &quot;private&quot;: true,\n  &quot;scripts&quot;: {\n    &quot;android&quot;: &quot;react-native run-android&quot;,\n    &quot;ios&quot;: &quot;react-native run-ios&quot;,\n    &quot;start&quot;: &quot;react-native start&quot;,\n    &quot;test&quot;: &quot;jest&quot;,\n    &quot;lint&quot;: &quot;eslint .&quot;\n  },\n  &quot;dependencies&quot;: {\n    // 종속성 추가\n    &quot;@react-native-monorepo/app&quot;: &quot;*&quot;,\n    &quot;react&quot;: &quot;18.1.0&quot;,\n    &quot;react-native&quot;: &quot;0.70.2&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;@babel/core&quot;: &quot;^7.12.9&quot;,\n    &quot;@babel/runtime&quot;: &quot;^7.12.5&quot;,\n    &quot;@react-native-community/eslint-config&quot;: &quot;^2.0.0&quot;,\n    &quot;babel-jest&quot;: &quot;^26.6.3&quot;,\n    &quot;eslint&quot;: &quot;^7.32.0&quot;,\n    &quot;jest&quot;: &quot;^26.6.3&quot;,\n    &quot;metro-react-native-babel-preset&quot;: &quot;0.72.3&quot;,\n    &quot;react-test-renderer&quot;: &quot;18.1.0&quot;\n  },\n  &quot;jest&quot;: {\n    &quot;preset&quot;: &quot;react-native&quot;\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>React Native에서 제공하는 앱 템플릿 대신, <code class=\"language-text\">@react-native-monorepo/app</code>을 사용하도록 <code class=\"language-text\">packages/mobile/index.js</code>을 수정합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import { AppRegistry } from &quot;react-native&quot;\nimport App from &quot;@react-native-monorepo/app&quot;\nimport { name as appName } from &quot;./app.json&quot;\n\nAppRegistry.registerComponent(appName, () =&gt; App)</code>\n        </deckgo-highlight-code>\n<p>그리고 네이티브 코드를 실행해보기 전 nohoist에 react-native를 명시해야 제대로 실행됩니다.</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// react-native-monorepo/package.json\n{\n  &quot;name&quot;: &quot;react-native-monorepo&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;private&quot;: &quot;true&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;workspaces&quot;: {\n    &quot;packages&quot;: [&quot;packages/*&quot;],\n    &quot;nohoist&quot;: [\n      &quot;**/react&quot;,\n      &quot;**/react-dom&quot;,\n      &quot;**/react-native&quot;,\n      &quot;**/react-native/**&quot;\n    ]\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>또한 workspace는 <code class=\"language-text\">\"private\": true</code>일 때만 작동하므로 private 옵션을 추가합니다.</p>\n<p>nohoist는 수정할 때마다 <code class=\"language-text\">yarn reset &amp;&amp; yarn</code>명령어로 프로젝트 루트에서 실행해야 종속성을 다시 설치합니다.</p>\n<p>아직 문제는 있습니다. 다른 디렉토리에 있는 걸 사용하려면 monorepo tool이 필요합니다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"># react-native-monorepo/packages/mobile\n$ yarn add -D react-native-monorepo-tools</code>\n        </deckgo-highlight-code>\n<p>metro 구성을 업데이트 합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// react-native-monorepo/packages/mobile/metro.config.js\nconst exclusionList = require(&quot;metro-config/src/defaults/exclusionList&quot;)\nconst {\n  getMetroTools,\n  getMetroAndroidAssetsResolutionFix,\n} = require(&quot;react-native-monorepo-tools&quot;)\n\nconst monorepoMetroTools = getMetroTools()\n\nconst androidAssetsResolutionFix = getMetroAndroidAssetsResolutionFix()\n\nmodule.exports = {\n  transformer: {\n    publicPath: androidAssetsResolutionFix.publicPath,\n    getTransformOptions: async () =&gt; ({\n      transform: {\n        experimentalImportSupport: false,\n        inlineRequires: true,\n      },\n    }),\n  },\n  server: {\n    // ...and to the server middleware.\n    enhanceMiddleware: middleware =&gt; {\n      return androidAssetsResolutionFix.applyMiddleware(middleware)\n    },\n  },\n  // Add additional Yarn workspace package roots to the module map.\n  // This allows importing importing from all the project&#39;s packages.\n  watchFolders: monorepoMetroTools.watchFolders,\n  resolver: {\n    // Ensure we resolve nohoist libraries from this directory.\n    blockList: exclusionList(monorepoMetroTools.blockList),\n    extraNodeModules: monorepoMetroTools.extraNodeModules,\n  },\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"루트에-스크립트-추가\" style=\"position:relative;\">루트에 스크립트 추가<a href=\"#%EB%A3%A8%ED%8A%B8%EC%97%90-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%B6%94%EA%B0%80\" aria-label=\"루트에 스크립트 추가 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>루트에서 각각의 프로젝트를 실행할 수 있도록 스크립트를 작성해보겠습니다.</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// react-native-monorepo/package.json\n&quot;scripts&quot;: {\n  &quot;android:metro&quot;: &quot;yarn workspace @react-native-monorepo/mobile start&quot;,\n  &quot;android:start&quot;: &quot;yarn workspace @react-native-monorepo/mobile android&quot;,\n  &quot;android:studio&quot;: &quot;yarn workspace @react-native-monorepo/mobile studio&quot;,\n  &quot;ios:metro&quot;: &quot;yarn workspace @react-native-monorepo/mobile start&quot;,\n  &quot;ios:start&quot;: &quot;yarn workspace @react-native-monorepo/mobile ios&quot;,\n  &quot;ios:xcode&quot;: &quot;yarn workspace @react-native-monorepo/mobile xcode&quot;\n},</code>\n        </deckgo-highlight-code>\n<h4 id=\"ios-실행\" style=\"position:relative;\">ios 실행<a href=\"#ios-%EC%8B%A4%ED%96%89\" aria-label=\"ios 실행 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"># packages/mobile/ios\n$ pod install</code>\n        </deckgo-highlight-code>\n<p>만약 m1 유저라면</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install</code>\n        </deckgo-highlight-code>\n<p>위 명령어를 실행해 pod을 설치합니다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"># 루트\n$ yarn ios:start</code>\n        </deckgo-highlight-code>\n<h4 id=\"android-실행\" style=\"position:relative;\">android 실행<a href=\"#android-%EC%8B%A4%ED%96%89\" aria-label=\"android 실행 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"># 루트에서\n$ yarn android:start</code>\n        </deckgo-highlight-code>\n<h3 id=\"web-코드-생성\" style=\"position:relative;\">web 코드 생성<a href=\"#web-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1\" aria-label=\"web 코드 생성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>웹에서 react-native를 사용하기 위해 react-native-web을 적극적으로 사용합니다.</p>\n<p>여기서는 CRA로 리액트 앱을 생성합니다.</p>\n<p>먼저 루트의 package.json에 nohoist를 수정합니다.</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&quot;nohoist&quot;: [\n  &quot;**/react&quot;,\n  &quot;**/react-dom&quot;,\n  &quot;**/react-native&quot;,\n  &quot;**/react-native/**&quot;,\n  &quot;**/react-native-web&quot;\n]</code>\n        </deckgo-highlight-code>\n<p>그리고 packages 디렉토리에서 CRA로 프로젝트를 생성합니다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">$ npx create-react-app my-app &amp;&amp; mv my-app web</code>\n        </deckgo-highlight-code>\n<p>패키지 이름을 변경합니다.</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// react-native-monorepo/packages/web/package.json\n&quot;name&quot;: &quot;@react-native-monorepo/web&quot;,</code>\n        </deckgo-highlight-code>\n<p>react-native-web을 설치합니다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">$ cd web &amp;&amp; yarn add react-native-web</code>\n        </deckgo-highlight-code>\n<p>웹 프로젝트 내에서 React Native 앱을 사용하기 위해 <code class=\"language-text\">src/index.js</code>를 수정합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import React from &quot;react&quot;\nimport ReactDOM from &quot;react-dom&quot;\nimport &quot;./index.css&quot;\nimport { App } from &quot;@react-native-monorepo/app&quot; // 수정\n\nReactDOM.render(\n  &lt;React.StrictMode&gt;\n    &lt;App /&gt;\n  &lt;/React.StrictMode&gt;,\n  document.getElementById(&quot;root&quot;)\n)</code>\n        </deckgo-highlight-code>\n<p>CRA는 yarn workspace를 지원하지 않습니다. 따라서 외부 패키지를 가져올 수 있도록 craco를 설치합니다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">$ yarn add -D @craco/craco react-native-monorepo-tools</code>\n        </deckgo-highlight-code>\n<p>그리고 <code class=\"language-text\">packages/web</code>에 <code class=\"language-text\">craco.config.js</code> 파일을 생성합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">/* eslint-disable @typescript-eslint/no-var-requires */\nconst path = require(&quot;path&quot;)\nconst { getLoader, loaderByName } = require(&quot;@craco/craco&quot;)\n\nconst absolutePath = path.join(__dirname, &quot;../core&quot;)\n\nmodule.exports = {\n  webpack: {\n    alias: {},\n    plugins: [],\n    configure: webpackConfig =&gt; {\n      const { isFound, match } = getLoader(\n        webpackConfig,\n        loaderByName(&quot;babel-loader&quot;)\n      )\n      if (isFound) {\n        const include = Array.isArray(match.loader.include)\n          ? match.loader.include\n          : [match.loader.include]\n        match.loader.include = include.concat[absolutePath]\n      }\n      return webpackConfig\n    },\n  },\n}</code>\n        </deckgo-highlight-code>\n<p>그리고 <code class=\"language-text\">web/package.json</code>에서 script를 craco로 시작할 수 있도록 변경합니다.</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">{\n  &quot;name&quot;: &quot;@react-native-monorepo/web&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;private&quot;: true,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;craco start&quot;, // 수정\n    &quot;build&quot;: &quot;craco build&quot;, // 수정\n    &quot;test&quot;: &quot;react-scripts test&quot;,\n    &quot;eject&quot;: &quot;react-scripts eject&quot;\n  },</code>\n        </deckgo-highlight-code>\n<p>마지막으로 프로젝트 루트에 있는 package.json의 scripts를 수정해줍니다.</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\"> &quot;scripts&quot;: {\n    &quot;android:metro&quot;: &quot;yarn workspace @react-native-monorepo/mobile start&quot;,\n    &quot;android:start&quot;: &quot;yarn workspace @react-native-monorepo/mobile android&quot;,\n    &quot;android:studio&quot;: &quot;yarn workspace @react-native-monorepo/mobile studio&quot;,\n    &quot;ios:metro&quot;: &quot;yarn workspace @react-native-monorepo/mobile start&quot;,\n    &quot;ios:start&quot;: &quot;yarn workspace @react-native-monorepo/mobile ios&quot;,\n    &quot;ios:xcode&quot;: &quot;yarn workspace @react-native-monorepo/mobile xcode&quot;,\n    &quot;web:start&quot;: &quot;yarn workspace @@react-native-monorepo/web start&quot;, // 추가\n    &quot;web:build&quot;: &quot;yarn workspace @@react-native-monorepo/web build&quot; // 추가\n  }</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">yarn web:start</code>를 통해 실행할 수 있습니다.</p>\n<br/>\n<hr>\n<h2 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"https://github.com/mmazzarolo/react-native-universal-monorepo\">mmazzarolo/react-native-universal-monorepo</a><br>\n<a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">yarn workspaces</a><br>\n<a href=\"https://necolas.github.io/react-native-web/\">react native web</a></p>","internal":{"content":"\n## 들어가며\n\nReact와 React Native를 공부하며 웹과 앱 간에 소스를 공유할 수 있으면 좋겠다는 생각이 들었습니다.\nflutter web도 고려사항에 있었지만, 고민 끝에 React와 RN으로 노선을 정했습니다.\n\n- 언어의 숙련도\n- 플랫폼에 관계없는 동일한 사용자 경험 제공 (UX/UI 통일)\n- 소스 중복 최소화\n\n이 두 가지를 고려했습니다.\n\n요구사항이 추가될 수 있기 때문에, 언젠가 네이티브 코드 연동이 필요하지 않을까 싶어 expo는 고려하지 않았습니다.\n\n### 프로젝트\n\n[Yeony99 - react-native-monorepo](https://github.com/Yeony99/react-native-monorepo) 프로젝트를 본 글의 예시로 올려놓았습니다.\n\n`node_modules` 설치한 후 루트의 `package.json`의 scripts를 참고해 실행해볼 수 있습니다.\n\n<br/>\n\n---\n\n## Yarn workspace 모노레포 설정하기\n\n모바일과 웹 소스를 각각의 레포지토리로 만드는 멀티 레포도 괜찮을 것 같지만, 장기적으로 생각했을 때 하나의 레포지토리로 여러 패키지를 관리하는 것이 부담이 덜할 것이라 판단했습니다.\n\n웹과 앱에서 동일한 사용자 경험을 주고 싶기도 했구요. <br/>\n\n### yarn workspace\n\nyarn에서는 root 경로의 package.json 파일이 하위 폴더의 package.json에 정의된 dependencies를 `yarn install`로 한번에 설치할 수 있게 하는 [workspace](https://classic.yarnpkg.com/lang/en/docs/workspaces/) 설정이 가능합니다.\n\n구성할 프로젝트 구조는 아래와 같습니다.\n\n```bash\n<root>/\n└─ packages/\n    ├── app/\n    │   ├── src/\n    │   └── package.json\n    # Android/iOS app configuration files and native code\n    ├── mobile/\n    │   ├── android/\n    │   ├── ios/\n    │   ├── app.json\n    │   ├── babel.config.js\n    │   ├── index.js\n    │   ├── metro.config.js\n    │   └── package.json\n    # Windows app configuration files and native code\n    └── web/\n        ├── public/\n        ├── src/\n        ├── carco.config.js\n        └── package.json\n└─ package.json\n```\n\n<br/>\n\n### yarn 설치\n\nnode가 설치되어 있다면 npm으로 설치합니다.\n\n```bash\n$ npm install -g yarn\n```\n\nnode가 설치되어 있지 않다면 node부터 설치합니다.\n\n그 외에도 homebrew, chocolatey 등을 이용해 설치할 수 있습니다.\n\n설치 완료 후 확인합니다.\n\n```bash\n$ yarn --version\n```\n\n<br/>\n\n### 프로젝트 생성\n\n원하는 프로젝트명으로 폴더를 하나 생성합니다. 저는 `react-native-monorepo`로 설정하였습니다. 여기가 프로젝트의 루트 디렉토리입니다.\n\n```bash\n$ yarn init -y\n```\n\n위 명령어로 package.json을 생성해줍니다. 생성된 package.json을 수정해봅시다.\n\n```json\n// 루트 package.json\n{\n  \"name\": \"react-native-monorepo\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  // 추가\n  \"workspaces\": {\n    \"packages\": [\"packages/*\"],\n    \"nohoist\": [\"**/react\", \"**/react-dom\"]\n  }\n}\n```\n\nworkspaces 속 packages에는 yarn workspace에서 관리할 패키지 경로를 입력합니다.  \n`nohoist`는 루트 프로젝트 디렉토리가 아닌, 각 패키지 디렉토리에 설치되어야 한다고 yarn에 알려줍니다.\n\n그 후 packages 디렉토리를 생성합니다.\n\npacakges 폴더로 `cd packages` 한 뒤 각각의 프로젝트를 생성해봅시다.\n\n### app 패키지 생성\n\n공유될 React Native 코드를 담을 `app` 디렉토리를 생성해봅시다.\n\n```bash\n$ mkdir packages/app && cd packages/app\n```\n\napp 디렉토리의 루트에서 **package.json**을 추가하고 아래와 같이 작성합니다.\n\n```json\n// app의 package.json\n{\n  \"name\": \"@react-native-monorepo/app\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"main\": \"src\",\n  \"peerDependencies\": {\n    \"react\": \"*\",\n    \"react-native\": \"*\"\n  }\n}\n```\n\n<br/>\n\n<div style=\"background-color: #eee; border-radius: 1rem; font-size: 0.9rem; padding: 1rem\">\n  <h6>❗ peerDependencies 란?</h6>\n  실제로 app 패키지 내부에서 import하지는 않지만, 패키지에 의존하는 각각의 앱들이 라이브러리 버전을 제공합니다.<br/>\n  app 패키지의 `peerDependencies`는 이후 생성할 mobile, web 앱으로부터 각각의 버전을 받게 됩니다.\n</div>\n\n`src/index.js`에 앱을 만들어봅시다.\n\n```jsx\n// react-native-monorepo/packages/app/src/index.js\n\nimport React from \"react\"\nimport { Platform, StyleSheet, Text, View } from \"react-native\"\n\nexport function App() {\n  return (\n    <View>\n      <Text style={styles.text}>Hello from React Native! </Text>\n      <View style={styles.platformRow}>\n        <Text style={styles.text}>Platform: </Text>\n        <View style={styles.platformBackground}>\n          <Text style={styles.platformValue}>{Platform.OS}</Text>\n        </View>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 28,\n    fontWeight: \"600\",\n  },\n  platformRow: {\n    marginTop: 12,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  platformValue: {\n    fontSize: 28,\n    fontWeight: \"500\",\n  },\n  platformBackground: {\n    backgroundColor: \"#ececec\",\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: \"#d4d4d4\",\n    paddingHorizontal: 6,\n    borderRadius: 6,\n    alignItems: \"center\",\n  },\n})\n\nexport default App\n```\n\nyarn workspace 덕분에 `@react-native-monorepo/app`을 다른 작업 공간에서도 사용할 수 있습니다.\n\n- `@react-native-monorepo/app`으로 dependencies에 표시\n- `import App from \"@react-native-monorepo/app\";`\n\n### mobile 코드 생성\n\nReact Native를 사용할 수 있게 되었으니 `packages/mobile`에 Android 와 iOS 네이티브 코드를 작성할 수 있도록 프로젝트를 생성해봅시다.\n\n```bash\n# window\n$ cd packages && npx react-native init MyApp && move MyApp mobile\n\n# macOS\n$ cd packages && npx react-native init MyApp && mv MyApp mobile\n```\n\npackage.json에 패키지 이름을 바꾸고, `@react-native-monorepo/app` 종속성을 추가합니다.\n\n```json\n// packages/mobile/package.json\n{\n  // 이름 수정\n  \"name\": \"@react-native-monorepo/mobile\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"android\": \"react-native run-android\",\n    \"ios\": \"react-native run-ios\",\n    \"start\": \"react-native start\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint .\"\n  },\n  \"dependencies\": {\n    // 종속성 추가\n    \"@react-native-monorepo/app\": \"*\",\n    \"react\": \"18.1.0\",\n    \"react-native\": \"0.70.2\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.12.9\",\n    \"@babel/runtime\": \"^7.12.5\",\n    \"@react-native-community/eslint-config\": \"^2.0.0\",\n    \"babel-jest\": \"^26.6.3\",\n    \"eslint\": \"^7.32.0\",\n    \"jest\": \"^26.6.3\",\n    \"metro-react-native-babel-preset\": \"0.72.3\",\n    \"react-test-renderer\": \"18.1.0\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  }\n}\n```\n\nReact Native에서 제공하는 앱 템플릿 대신, `@react-native-monorepo/app`을 사용하도록 `packages/mobile/index.js`을 수정합니다.\n\n```jsx\nimport { AppRegistry } from \"react-native\"\nimport App from \"@react-native-monorepo/app\"\nimport { name as appName } from \"./app.json\"\n\nAppRegistry.registerComponent(appName, () => App)\n```\n\n그리고 네이티브 코드를 실행해보기 전 nohoist에 react-native를 명시해야 제대로 실행됩니다.\n\n```json\n// react-native-monorepo/package.json\n{\n  \"name\": \"react-native-monorepo\",\n  \"version\": \"1.0.0\",\n  \"private\": \"true\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"workspaces\": {\n    \"packages\": [\"packages/*\"],\n    \"nohoist\": [\n      \"**/react\",\n      \"**/react-dom\",\n      \"**/react-native\",\n      \"**/react-native/**\"\n    ]\n  }\n}\n```\n\n또한 workspace는 `\"private\": true`일 때만 작동하므로 private 옵션을 추가합니다.\n\nnohoist는 수정할 때마다 `yarn reset && yarn`명령어로 프로젝트 루트에서 실행해야 종속성을 다시 설치합니다.\n\n아직 문제는 있습니다. 다른 디렉토리에 있는 걸 사용하려면 monorepo tool이 필요합니다.\n\n```bash\n# react-native-monorepo/packages/mobile\n$ yarn add -D react-native-monorepo-tools\n```\n\nmetro 구성을 업데이트 합니다.\n\n```javascript\n// react-native-monorepo/packages/mobile/metro.config.js\nconst exclusionList = require(\"metro-config/src/defaults/exclusionList\")\nconst {\n  getMetroTools,\n  getMetroAndroidAssetsResolutionFix,\n} = require(\"react-native-monorepo-tools\")\n\nconst monorepoMetroTools = getMetroTools()\n\nconst androidAssetsResolutionFix = getMetroAndroidAssetsResolutionFix()\n\nmodule.exports = {\n  transformer: {\n    publicPath: androidAssetsResolutionFix.publicPath,\n    getTransformOptions: async () => ({\n      transform: {\n        experimentalImportSupport: false,\n        inlineRequires: true,\n      },\n    }),\n  },\n  server: {\n    // ...and to the server middleware.\n    enhanceMiddleware: middleware => {\n      return androidAssetsResolutionFix.applyMiddleware(middleware)\n    },\n  },\n  // Add additional Yarn workspace package roots to the module map.\n  // This allows importing importing from all the project's packages.\n  watchFolders: monorepoMetroTools.watchFolders,\n  resolver: {\n    // Ensure we resolve nohoist libraries from this directory.\n    blockList: exclusionList(monorepoMetroTools.blockList),\n    extraNodeModules: monorepoMetroTools.extraNodeModules,\n  },\n}\n```\n\n### 루트에 스크립트 추가\n\n루트에서 각각의 프로젝트를 실행할 수 있도록 스크립트를 작성해보겠습니다.\n\n```json\n// react-native-monorepo/package.json\n\"scripts\": {\n  \"android:metro\": \"yarn workspace @react-native-monorepo/mobile start\",\n  \"android:start\": \"yarn workspace @react-native-monorepo/mobile android\",\n  \"android:studio\": \"yarn workspace @react-native-monorepo/mobile studio\",\n  \"ios:metro\": \"yarn workspace @react-native-monorepo/mobile start\",\n  \"ios:start\": \"yarn workspace @react-native-monorepo/mobile ios\",\n  \"ios:xcode\": \"yarn workspace @react-native-monorepo/mobile xcode\"\n},\n```\n\n#### ios 실행\n\n```bash\n# packages/mobile/ios\n$ pod install\n```\n\n만약 m1 유저라면\n\n```bash\n$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install\n```\n\n위 명령어를 실행해 pod을 설치합니다.\n\n```bash\n# 루트\n$ yarn ios:start\n```\n\n#### android 실행\n\n```bash\n# 루트에서\n$ yarn android:start\n```\n\n### web 코드 생성\n\n웹에서 react-native를 사용하기 위해 react-native-web을 적극적으로 사용합니다.\n\n여기서는 CRA로 리액트 앱을 생성합니다.\n\n먼저 루트의 package.json에 nohoist를 수정합니다.\n\n```json\n\"nohoist\": [\n  \"**/react\",\n  \"**/react-dom\",\n  \"**/react-native\",\n  \"**/react-native/**\",\n  \"**/react-native-web\"\n]\n```\n\n그리고 packages 디렉토리에서 CRA로 프로젝트를 생성합니다.\n\n```bash\n$ npx create-react-app my-app && mv my-app web\n```\n\n패키지 이름을 변경합니다.\n\n```json\n// react-native-monorepo/packages/web/package.json\n\"name\": \"@react-native-monorepo/web\",\n```\n\nreact-native-web을 설치합니다.\n\n```bash\n$ cd web && yarn add react-native-web\n```\n\n웹 프로젝트 내에서 React Native 앱을 사용하기 위해 `src/index.js`를 수정합니다.\n\n```jsx\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport { App } from \"@react-native-monorepo/app\" // 수정\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n```\n\nCRA는 yarn workspace를 지원하지 않습니다. 따라서 외부 패키지를 가져올 수 있도록 craco를 설치합니다.\n\n```bash\n$ yarn add -D @craco/craco react-native-monorepo-tools\n```\n\n그리고 `packages/web`에 `craco.config.js` 파일을 생성합니다.\n\n```javascript\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst path = require(\"path\")\nconst { getLoader, loaderByName } = require(\"@craco/craco\")\n\nconst absolutePath = path.join(__dirname, \"../core\")\n\nmodule.exports = {\n  webpack: {\n    alias: {},\n    plugins: [],\n    configure: webpackConfig => {\n      const { isFound, match } = getLoader(\n        webpackConfig,\n        loaderByName(\"babel-loader\")\n      )\n      if (isFound) {\n        const include = Array.isArray(match.loader.include)\n          ? match.loader.include\n          : [match.loader.include]\n        match.loader.include = include.concat[absolutePath]\n      }\n      return webpackConfig\n    },\n  },\n}\n```\n\n그리고 `web/package.json`에서 script를 craco로 시작할 수 있도록 변경합니다.\n\n```json\n{\n  \"name\": \"@react-native-monorepo/web\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"craco start\", // 수정\n    \"build\": \"craco build\", // 수정\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n```\n\n마지막으로 프로젝트 루트에 있는 package.json의 scripts를 수정해줍니다.\n\n```json\n \"scripts\": {\n    \"android:metro\": \"yarn workspace @react-native-monorepo/mobile start\",\n    \"android:start\": \"yarn workspace @react-native-monorepo/mobile android\",\n    \"android:studio\": \"yarn workspace @react-native-monorepo/mobile studio\",\n    \"ios:metro\": \"yarn workspace @react-native-monorepo/mobile start\",\n    \"ios:start\": \"yarn workspace @react-native-monorepo/mobile ios\",\n    \"ios:xcode\": \"yarn workspace @react-native-monorepo/mobile xcode\",\n    \"web:start\": \"yarn workspace @@react-native-monorepo/web start\", // 추가\n    \"web:build\": \"yarn workspace @@react-native-monorepo/web build\" // 추가\n  }\n```\n\n`yarn web:start`를 통해 실행할 수 있습니다.\n\n<br/>\n\n---\n\n## 참고\n\n[mmazzarolo/react-native-universal-monorepo](https://github.com/mmazzarolo/react-native-universal-monorepo)  \n[yarn workspaces](https://classic.yarnpkg.com/lang/en/docs/workspaces/)  \n[react native web](https://necolas.github.io/react-native-web/)\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">들어가며</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\">프로젝트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#yarn-workspace-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">Yarn workspace 모노레포 설정하기</a></p>\n<ul>\n<li>\n<p><a href=\"#yarn-workspace\">yarn workspace</a></p>\n</li>\n<li>\n<p><a href=\"#yarn-%EC%84%A4%EC%B9%98\">yarn 설치</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\">프로젝트 생성</a></p>\n</li>\n<li>\n<p><a href=\"#app-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%83%9D%EC%84%B1\">app 패키지 생성</a></p>\n</li>\n<li>\n<p><a href=\"#mobile-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1\">mobile 코드 생성</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A3%A8%ED%8A%B8%EC%97%90-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%B6%94%EA%B0%80\">루트에 스크립트 추가</a></p>\n<ul>\n<li><a href=\"#ios-%EC%8B%A4%ED%96%89\">ios 실행</a></li>\n<li><a href=\"#android-%EC%8B%A4%ED%96%89\">android 실행</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#web-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1\">web 코드 생성</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/react-native-with-monorepo"}},
    "staticQueryHashes": ["2665612806"]}