{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/flutter-what-is-widget","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/flutter-what-is-widget","tags":["스터디 Flutter"],"date":"2022-09-10","img":"https://user-images.githubusercontent.com/76241233/189472910-3ae9b4a8-6fd6-484c-8e00-d07dab309b45.jpeg","title":"[Flutter] Widget 다루기"},"html":"<h2 id=\"모든-것이-widget인-flutter\" style=\"position:relative;\">모든 것이 Widget인 Flutter<a href=\"#%EB%AA%A8%EB%93%A0-%EA%B2%83%EC%9D%B4-widget%EC%9D%B8-flutter\" aria-label=\"모든 것이 widget인 flutter permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><strong>widget</strong>이라고만 하면 인터페이스 요소 하나로 받아들일 수 있습니다.</p>\n<p>ppt로 발표자료를 만들어 보신 적이 있다면 이해하기 쉽습니다.<br>\n큰제목은 48포인트 글자 크기가 설정된 텍스트 상자에, 여러 이미지나 도형은 그룹화를 해 동일한 간격을 두고 배치하기도 합니다.<br>\n메뉴라든가, 텍스트 상자 등 ppt를 만들 때 네모 상자를 그려 만드는 것들을 위젯이라고 볼 수 있죠.</p>\n<p>플러터도 똑같습니다. 플러터에선 <strong>모든 것이 위젯</strong>이라 생각하면 됩니다.\r\nppt예시를 위에서 들었는데요. 플러터의 위젯도 비슷합니다.</p>\n<p>플러터에서는 <code class=\"language-text\">Text</code>, <code class=\"language-text\">Container</code>, 가로 세로 정렬을 하는 <code class=\"language-text\">Row</code>, <code class=\"language-text\">Column</code> 등이 모두 <strong>위젯</strong>입니다.</p>\n<hr>\n<br/>\n<h2 id=\"widget의-구분\" style=\"position:relative;\">Widget의 구분<a href=\"#widget%EC%9D%98-%EA%B5%AC%EB%B6%84\" aria-label=\"widget의 구분 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>플러터의 Widget은 2가지로 구분됩니다.</p>\n<ul>\n<li>State-full Widget</li>\n<li>Stateless Widget</li>\n</ul>\n<p>별도의 해석이 없더라도 <strong>상태</strong>의 여부에 따라 위젯이 구분됨을 알 수 있습니다.</p>\n<h3 id=\"상태state란\" style=\"position:relative;\">상태(state)란?<a href=\"#%EC%83%81%ED%83%9Cstate%EB%9E%80\" aria-label=\"상태state란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>그러면 위젯의 상태란 무엇일까요?</p>\n<p><a href=\"https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html\">공식 docs</a>에 따르면 <strong>State</strong>란,</p>\n<ol>\n<li>위젯이 빌드될 때 동기적으로 읽을 수 있는 정보</li>\n<li>위젯의 생명주기가 끝나기 전까지 변경될 수 있는 정보</li>\n</ol>\n<p>이렇게 두 가지를 의미합니다. 결국은 어플리케이션에서 보여지는 모든 <strong>동적인 데이터</strong>를 뜻하죠.</p>\n<p>예시를 들어보겠습니다.</p>\n<ul>\n<li>어플 시작 화면의 어플 이름 표시 텍스트</li>\n<li>로그인된 회원의 닉네임 표시 텍스트</li>\n</ul>\n<p>어떤 게 동적인 데이터일까요? 후자라고 생각하셨죠?<br>\n로그인된 사용자의 닉네임은 사용자에 따라서, 혹은 로그인 여부에 따라 보여지는 텍스트가 다를테니까요.</p>\n<h4 id=\"app-state--widget-state\" style=\"position:relative;\">App State / Widget State<a href=\"#app-state--widget-state\" aria-label=\"app state  widget state permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>이런 데이터는 전역(global)/지역(local)로 나뉘어 관리할 수 있습니다.</p>\n<ul>\n<li>App state : 앱 전체에 걸쳐 사용되며, 여러 위젯에 반복되어 사용될 수 있는 상태 데이터</li>\n<li>Widget state : 특정 위젯 내에서만 사용되며, 공유나 반환할 필요가 없는 상태 데이터</li>\n</ul>\n<p>이런 데이터 처리를 플러터에서는 <code class=\"language-text\">State-full Widget</code>과 <code class=\"language-text\">Stateless Widget</code>으로 구분해 작성하는 것입니다.</p>\n<hr>\n<br/>\n<h3 id=\"state-full-widget\" style=\"position:relative;\">State-full Widget<a href=\"#state-full-widget\" aria-label=\"state full widget permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>State-full 위젯은 상태 변화를 감지하고, 변화가 있으면 다시 빌드하는 위젯입니다.</p>\n<p>플러터 프로젝트를 처음 시작하면 볼 수 있는 Flutter Demo Home Page 코드를 보겠습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// main.dart 파일\r\n\r\n// 머티리얼 스타일 import\r\nimport &#39;package:flutter/material.dart&#39;;\r\n\r\n// 앱 실행부\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\n// StatelessWidget\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: &#39;Flutter Demo&#39;,\r\n      theme: ThemeData(\r\n        primarySwatch: Colors.blue,\r\n      ),\r\n      home: MyHomePage(title: &#39;Flutter Demo Home Page&#39;),\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// StatefulWidget -- 1)\r\nclass MyHomePage extends StatefulWidget {\r\n  MyHomePage({Key key, this.title}) : super(key: key);\r\n\r\n  final String title;\r\n\r\n  @override\r\n  _MyHomePageState createState() =&gt; _MyHomePageState();\r\n}\r\n\r\n\r\n// State 객체 -- 2)\r\nclass _MyHomePageState extends State&lt;MyHomePage&gt; {\r\n\r\n  // 변수 선언 및 초기화\r\n  int _counter = 0;\r\n\r\n  // 카운터 증가함수\r\n  void _incrementCounter() {\r\n    setState(() {\r\n      _counter++;\r\n    });\r\n  }\r\n\r\n\r\n  // 위젯 구현부\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n        //...\r\n    );\r\n  }\r\n}\r\n</code>\n        </deckgo-highlight-code>\n<p>위 코드에서 <code class=\"language-text\">MyHomePage</code> class가 <code class=\"language-text\">StatefulWidget</code>을 상속(extends)받은 것을 볼 수 있습니다.<br>\n그리고 <code class=\"language-text\">_counter</code> 변수를 이용해 <strong>State가 변화</strong>할 때마다 다시 빌드합니다.</p>\n<h4 id=\"statefulwidget의-구성\" style=\"position:relative;\">StatefulWidget의 구성<a href=\"#statefulwidget%EC%9D%98-%EA%B5%AC%EC%84%B1\" aria-label=\"statefulwidget의 구성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>StatefulWidget은 2가지 클래스로 구성되어 있습니다.</p>\n<ul>\n<li>변하는 부분</li>\n<li>변하지 않는 부분</li>\n</ul>\n<p>위 예시코드에서 1번과 2번으로 표시해 둔 곳이 그렇습니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// StatefulWidget -- 1)\r\nclass MyHomePage extends StatefulWidget {\r\n  //...\r\n  @override\r\n  _MyHomePageState createState() =&gt; _MyHomePageState();\r\n}\r\n\r\n// State 객체 -- 2)\r\nclass _MyHomePageState extends State&lt;MyHomePage&gt; {\r\n  //...\r\n}</code>\n        </deckgo-highlight-code>\n<p>플러터는 본래 React에서 영감을 받은 프레임워크인데요. React의 특징을 간단하게 말하면 <strong>변화하는 부분만 교체한다</strong>입니다.</p>\n<p>다시 말해 플러터에서 <code class=\"language-text\">StatefulWidget</code>을 사용할 때, 변하는 부분과 변하지 않는 부분을 나누어 2개의 <code class=\"language-text\">class</code>를 작성하게 되는 것이죠.</p>\n<h3 id=\"stateless-widget\" style=\"position:relative;\">Stateless Widget<a href=\"#stateless-widget\" aria-label=\"stateless widget permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>반대로 상태 Stateless Widget은 상태 변화에 반응하지 않고, 위젯의 라이프사이클 동안 정적인 상태를 유지합니다.</p>\n<p>말 그대로 State가 없는 위젯이지만, 그렇다고 Data가 없는 것은 아닙니다. 정확히는 <strong>변경될 데이터가 없다</strong>고 이해할 수 있습니다.</p>\n<p>StatelessWidget은 이렇게 작성합니다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class MyApp extends StatelessWidget {\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: &#39;Flutter Demo&#39;, // 정적 데이터\r\n      theme: ThemeData(\r\n        primarySwatch: Colors.blue, // 정적 데이터\r\n      ),\r\n      home: MyHomePage(title: &#39;Flutter Demo Home Page&#39;), // 정적 데이터\r\n    );\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<p>변할 State가 없으니 변하지 않는 부분만 작성하면 됩니다.</p>\n<hr>\n<br/>\n<h2 id=\"기본-widget-정리\" style=\"position:relative;\">기본 Widget 정리<a href=\"#%EA%B8%B0%EB%B3%B8-widget-%EC%A0%95%EB%A6%AC\" aria-label=\"기본 widget 정리 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>플러터에서는 모든 게 위젯입니다.</p>\n<p>다만 자주 쓰이고 기본적인 위젯만 알아보도록 합시다.</p>\n<p>참고 : <a href=\"https://docs.flutter.dev/development/ui/widgets/basics\">Basic Widget</a></p>\n<h3 id=\"container\" style=\"position:relative;\">Container<a href=\"#container\" aria-label=\"container permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Container</code> 위젯은 다른 자식 위젯들을 감쌀 수 있는(wrap) 위젯입니다.</p>\n<p>Container위젯을 사용할 때 다음과 같은 옵션들을 정의할 수 있습니다.</p>\n<ul>\n<li>alignment : 정렬</li>\n<li>constraints : 최대최소 너비, 높이 등을 제약</li>\n<li>padding : 내용과 테두리 사이의 간격 지정</li>\n<li>color : 컨테이너의 색상 지정</li>\n<li>transform : 변화되는 모션 지정(화면 전환 효과)</li>\n<li>child: 자식 위젯</li>\n</ul>\n<p><a href=\"https://api.flutter.dev/flutter/widgets/Container-class.html\">Container Widget</a></p>\n<h3 id=\"row--column\" style=\"position:relative;\">Row &#x26; Column<a href=\"#row--column\" aria-label=\"row  column permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Row</code> 위젯은 <strong>children</strong> 프로퍼티에 지정된 자식 위젯들을 가로로 배열하는 위젯입니다.</p>\n<p>플러터 공식문서에서는 자식 위젯이 여럿 있을 때 사용하는 것을 권장합니다.</p>\n<ul>\n<li>children : List<Widget></li>\n<li>derection : 주축(Axis)으로 사용할 방향</li>\n</ul>\n<p><a href=\"https://api.flutter.dev/flutter/widgets/Row-class.html\">Row Widget</a></p>\n<p><code class=\"language-text\">Row</code>와 <code class=\"language-text\">Column</code>이 상대되는 개념인 것을 이미 아셨으리라고 봅니다.</p>\n<p><code class=\"language-text\">Column</code> 위젯은 자식 위젯들을 수직으로 배열하는 위젯입니다.</p>\n<p><a href=\"https://api.flutter.dev/flutter/widgets/Column-class.html\">Column Widget</a></p>\n<h3 id=\"text\" style=\"position:relative;\">Text<a href=\"#text\" aria-label=\"text permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Text</code> 위젯은 말 그대로 문자를 표시하는 위젯입니다.</p>\n<p>단일한 스타일의 텍스트 문자열을 보여주고, 레이아웃에 따라 여러 줄로 표시될 수도 있습니다.</p>\n<ul>\n<li>style : Text의 스타일 명시. 생략 시 DefaultTextStyle로 자동 지정</li>\n<li>textAlign : 정렬</li>\n<li>overflow: 레이아웃보다 문자열의 길이가 더 길 때 어떻게 처리할 지 명시</li>\n</ul>\n<p><a href=\"https://api.flutter.dev/flutter/widgets/Text-class.html\">Text Widget</a></p>\n<!--\r\n📍 Flutter의 핵심 Architecture를 이루는 Widget이 무엇이고, 어떤 구조로 앱을 구성하는지 이해한다.\r\n\r\n📍 Flutter에서 Layout을 어떻게 만들어 나가는지 이해한다.\r\n\r\n📍 Flutter의 기본적인 Layout Widget들의 사용법을 숙지하고 실습해본다. -->\n<p>◾ <a href=\"/tech/flutter-dart-and-flutter\">[Flutter] Dart 기본 문법</a> 👈 이전 글 보기<br>\n◾ <a href=\"/tech/flutter-layout-widget\">[Flutter] Layout Widget 정리</a> 👈 다음 글 보기</p>","internal":{"content":"\r\n## 모든 것이 Widget인 Flutter\r\n\r\n**widget**이라고만 하면 인터페이스 요소 하나로 받아들일 수 있습니다.\r\n\r\nppt로 발표자료를 만들어 보신 적이 있다면 이해하기 쉽습니다.  \r\n큰제목은 48포인트 글자 크기가 설정된 텍스트 상자에, 여러 이미지나 도형은 그룹화를 해 동일한 간격을 두고 배치하기도 합니다.  \r\n메뉴라든가, 텍스트 상자 등 ppt를 만들 때 네모 상자를 그려 만드는 것들을 위젯이라고 볼 수 있죠.\r\n\r\n플러터도 똑같습니다. 플러터에선 **모든 것이 위젯**이라 생각하면 됩니다.\r\nppt예시를 위에서 들었는데요. 플러터의 위젯도 비슷합니다.\r\n\r\n플러터에서는 `Text`, `Container`, 가로 세로 정렬을 하는 `Row`, `Column` 등이 모두 **위젯**입니다.\r\n\r\n---\r\n\r\n<br/>\r\n\r\n## Widget의 구분\r\n\r\n플러터의 Widget은 2가지로 구분됩니다.\r\n\r\n- State-full Widget\r\n- Stateless Widget\r\n\r\n별도의 해석이 없더라도 **상태**의 여부에 따라 위젯이 구분됨을 알 수 있습니다.\r\n\r\n### 상태(state)란?\r\n\r\n그러면 위젯의 상태란 무엇일까요?\r\n\r\n[공식 docs](https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html)에 따르면 **State**란,\r\n\r\n1. 위젯이 빌드될 때 동기적으로 읽을 수 있는 정보\r\n2. 위젯의 생명주기가 끝나기 전까지 변경될 수 있는 정보\r\n\r\n이렇게 두 가지를 의미합니다. 결국은 어플리케이션에서 보여지는 모든 **동적인 데이터**를 뜻하죠.\r\n\r\n예시를 들어보겠습니다.\r\n\r\n- 어플 시작 화면의 어플 이름 표시 텍스트\r\n- 로그인된 회원의 닉네임 표시 텍스트\r\n\r\n어떤 게 동적인 데이터일까요? 후자라고 생각하셨죠?  \r\n로그인된 사용자의 닉네임은 사용자에 따라서, 혹은 로그인 여부에 따라 보여지는 텍스트가 다를테니까요.\r\n\r\n#### App State / Widget State\r\n\r\n이런 데이터는 전역(global)/지역(local)로 나뉘어 관리할 수 있습니다.\r\n\r\n- App state : 앱 전체에 걸쳐 사용되며, 여러 위젯에 반복되어 사용될 수 있는 상태 데이터\r\n- Widget state : 특정 위젯 내에서만 사용되며, 공유나 반환할 필요가 없는 상태 데이터\r\n\r\n이런 데이터 처리를 플러터에서는 `State-full Widget`과 `Stateless Widget`으로 구분해 작성하는 것입니다.\r\n\r\n---\r\n\r\n<br/>\r\n\r\n### State-full Widget\r\n\r\nState-full 위젯은 상태 변화를 감지하고, 변화가 있으면 다시 빌드하는 위젯입니다.\r\n\r\n플러터 프로젝트를 처음 시작하면 볼 수 있는 Flutter Demo Home Page 코드를 보겠습니다.\r\n\r\n```dart\r\n// main.dart 파일\r\n\r\n// 머티리얼 스타일 import\r\nimport 'package:flutter/material.dart';\r\n\r\n// 앱 실행부\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\n// StatelessWidget\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: 'Flutter Demo',\r\n      theme: ThemeData(\r\n        primarySwatch: Colors.blue,\r\n      ),\r\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// StatefulWidget -- 1)\r\nclass MyHomePage extends StatefulWidget {\r\n  MyHomePage({Key key, this.title}) : super(key: key);\r\n\r\n  final String title;\r\n\r\n  @override\r\n  _MyHomePageState createState() => _MyHomePageState();\r\n}\r\n\r\n\r\n// State 객체 -- 2)\r\nclass _MyHomePageState extends State<MyHomePage> {\r\n\r\n  // 변수 선언 및 초기화\r\n  int _counter = 0;\r\n\r\n  // 카운터 증가함수\r\n  void _incrementCounter() {\r\n    setState(() {\r\n      _counter++;\r\n    });\r\n  }\r\n\r\n\r\n  // 위젯 구현부\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n        //...\r\n    );\r\n  }\r\n}\r\n\r\n```\r\n\r\n위 코드에서 `MyHomePage` class가 `StatefulWidget`을 상속(extends)받은 것을 볼 수 있습니다.  \r\n그리고 `_counter` 변수를 이용해 **State가 변화**할 때마다 다시 빌드합니다.\r\n\r\n#### StatefulWidget의 구성\r\n\r\nStatefulWidget은 2가지 클래스로 구성되어 있습니다.\r\n\r\n- 변하는 부분\r\n- 변하지 않는 부분\r\n\r\n위 예시코드에서 1번과 2번으로 표시해 둔 곳이 그렇습니다.\r\n\r\n```dart\r\n// StatefulWidget -- 1)\r\nclass MyHomePage extends StatefulWidget {\r\n  //...\r\n  @override\r\n  _MyHomePageState createState() => _MyHomePageState();\r\n}\r\n\r\n// State 객체 -- 2)\r\nclass _MyHomePageState extends State<MyHomePage> {\r\n  //...\r\n}\r\n```\r\n\r\n플러터는 본래 React에서 영감을 받은 프레임워크인데요. React의 특징을 간단하게 말하면 **변화하는 부분만 교체한다**입니다.\r\n\r\n다시 말해 플러터에서 `StatefulWidget`을 사용할 때, 변하는 부분과 변하지 않는 부분을 나누어 2개의 `class`를 작성하게 되는 것이죠.\r\n\r\n### Stateless Widget\r\n\r\n반대로 상태 Stateless Widget은 상태 변화에 반응하지 않고, 위젯의 라이프사이클 동안 정적인 상태를 유지합니다.\r\n\r\n말 그대로 State가 없는 위젯이지만, 그렇다고 Data가 없는 것은 아닙니다. 정확히는 **변경될 데이터가 없다**고 이해할 수 있습니다.\r\n\r\nStatelessWidget은 이렇게 작성합니다.\r\n\r\n```dart\r\nclass MyApp extends StatelessWidget {\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: 'Flutter Demo', // 정적 데이터\r\n      theme: ThemeData(\r\n        primarySwatch: Colors.blue, // 정적 데이터\r\n      ),\r\n      home: MyHomePage(title: 'Flutter Demo Home Page'), // 정적 데이터\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n변할 State가 없으니 변하지 않는 부분만 작성하면 됩니다.\r\n\r\n---\r\n\r\n<br/>\r\n\r\n## 기본 Widget 정리\r\n\r\n플러터에서는 모든 게 위젯입니다.\r\n\r\n다만 자주 쓰이고 기본적인 위젯만 알아보도록 합시다.\r\n\r\n참고 : [Basic Widget](https://docs.flutter.dev/development/ui/widgets/basics)\r\n\r\n### Container\r\n\r\n`Container` 위젯은 다른 자식 위젯들을 감쌀 수 있는(wrap) 위젯입니다.\r\n\r\nContainer위젯을 사용할 때 다음과 같은 옵션들을 정의할 수 있습니다.\r\n\r\n- alignment : 정렬\r\n- constraints : 최대최소 너비, 높이 등을 제약\r\n- padding : 내용과 테두리 사이의 간격 지정\r\n- color : 컨테이너의 색상 지정\r\n- transform : 변화되는 모션 지정(화면 전환 효과)\r\n- child: 자식 위젯\r\n\r\n[Container Widget](https://api.flutter.dev/flutter/widgets/Container-class.html)\r\n\r\n### Row & Column\r\n\r\n`Row` 위젯은 **children** 프로퍼티에 지정된 자식 위젯들을 가로로 배열하는 위젯입니다.\r\n\r\n플러터 공식문서에서는 자식 위젯이 여럿 있을 때 사용하는 것을 권장합니다.\r\n\r\n- children : List<Widget>\r\n- derection : 주축(Axis)으로 사용할 방향\r\n\r\n[Row Widget](https://api.flutter.dev/flutter/widgets/Row-class.html)\r\n\r\n`Row`와 `Column`이 상대되는 개념인 것을 이미 아셨으리라고 봅니다.\r\n\r\n`Column` 위젯은 자식 위젯들을 수직으로 배열하는 위젯입니다.\r\n\r\n[Column Widget](https://api.flutter.dev/flutter/widgets/Column-class.html)\r\n\r\n### Text\r\n\r\n`Text` 위젯은 말 그대로 문자를 표시하는 위젯입니다.\r\n\r\n단일한 스타일의 텍스트 문자열을 보여주고, 레이아웃에 따라 여러 줄로 표시될 수도 있습니다.\r\n\r\n- style : Text의 스타일 명시. 생략 시 DefaultTextStyle로 자동 지정\r\n- textAlign : 정렬\r\n- overflow: 레이아웃보다 문자열의 길이가 더 길 때 어떻게 처리할 지 명시\r\n\r\n[Text Widget](https://api.flutter.dev/flutter/widgets/Text-class.html)\r\n\r\n<!--\r\n📍 Flutter의 핵심 Architecture를 이루는 Widget이 무엇이고, 어떤 구조로 앱을 구성하는지 이해한다.\r\n\r\n📍 Flutter에서 Layout을 어떻게 만들어 나가는지 이해한다.\r\n\r\n📍 Flutter의 기본적인 Layout Widget들의 사용법을 숙지하고 실습해본다. -->\r\n\r\n◾ [[Flutter] Dart 기본 문법](/tech/flutter-dart-and-flutter) 👈 이전 글 보기  \r\n◾ [[Flutter] Layout Widget 정리](/tech/flutter-layout-widget) 👈 다음 글 보기\r\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%AA%A8%EB%93%A0-%EA%B2%83%EC%9D%B4-widget%EC%9D%B8-flutter\">모든 것이 Widget인 Flutter</a></p>\n</li>\n<li>\n<p><a href=\"#widget%EC%9D%98-%EA%B5%AC%EB%B6%84\">Widget의 구분</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%83%81%ED%83%9Cstate%EB%9E%80\">상태(state)란?</a></p>\n<ul>\n<li><a href=\"#app-state--widget-state\">App State / Widget State</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#state-full-widget\">State-full Widget</a></p>\n<ul>\n<li><a href=\"#statefulwidget%EC%9D%98-%EA%B5%AC%EC%84%B1\">StatefulWidget의 구성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#stateless-widget\">Stateless Widget</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%B3%B8-widget-%EC%A0%95%EB%A6%AC\">기본 Widget 정리</a></p>\n<ul>\n<li><a href=\"#container\">Container</a></li>\n<li><a href=\"#row--column\">Row &#x26; Column</a></li>\n<li><a href=\"#text\">Text</a></li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/flutter-what-is-widget"}},"staticQueryHashes":["2665612806"]}