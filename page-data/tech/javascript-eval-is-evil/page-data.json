{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/javascript-eval-is-evil","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/javascript-eval-is-evil","tags":["JS"],"date":"2023-01-02","img":null,"title":"자바스크립트 Eval"},"excerpt":"Eval is Evil? 위와 같은 자릿수 더하기 문제를 풀어보다 eval을 사용했다.\r\nreduce를 주로 쓰긴 하지만, join이 떠오른 김에  문자열까지 만든 후 한 번에 계산하면 안되나? 싶어서 이렇게 작성하게 됐다. eval…","html":"<h2 id=\"eval-is-evil\" style=\"position:relative;\">Eval is Evil?<a href=\"#eval-is-evil\" aria-label=\"eval is evil permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 정수 n이 매개변수로 주어질 때 n의 각 자리 숫자의 합을 return하도록 solution 함수를 완성해주세요\r\nfunction solution(n) {\r\n  return eval(`${Array.from((n).toString()).join(&#39;+&#39;)}`)\r\n}</code>\n        </deckgo-highlight-code>\n<p>위와 같은 자릿수 더하기 문제를 풀어보다 eval을 사용했다.\r\nreduce를 주로 쓰긴 하지만, join이 떠오른 김에 <code class=\"language-text\">+</code> 문자열까지 만든 후 한 번에 계산하면 안되나? 싶어서 이렇게 작성하게 됐다.</p>\n<p>eval을 좀더 살펴보려고 MDN 문서를 훑는 중에 <strong>eval()을 절대 사용하지 말 것!</strong> 이란 경고를 볼 수 있었다.</p>\n<p>좀 더 찾아보니 Eval is Evil!! 이라는 말장난까지 있어서 그 이유를 살펴보기로 한다.</p>\n<h3 id=\"eval의-기능\" style=\"position:relative;\">eval의 기능<a href=\"#eval%EC%9D%98-%EA%B8%B0%EB%8A%A5\" aria-label=\"eval의 기능 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>eval의 자세한 기능이 궁금하다면 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\">MDN - eval()</a> 문서를 참고하는 것이 좋다.</p>\n<p>간략하게 eval의 기능을 설명하자면, 문자를 코드로 실행시키는 함수다.</p>\n<p>다시 말해 코드를 동적으로 작성하고 실행시킬 수 있는 함수가 되겠다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">console.log(eval(&#39;2 + 2&#39;)) // 4\r\n\r\nlet foo = 10;\r\n\r\nconsole.log(eval(&#39;foo&#39;) + 1) // 11</code>\n        </deckgo-highlight-code>\n<h3 id=\"왜-사용할까\" style=\"position:relative;\">왜 사용할까?<a href=\"#%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\" aria-label=\"왜 사용할까 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>수년 전의 stackoverflow 글들을 보다보니 코드를 동적으로 생성해야 할 때 가장 많이 쓴 듯 하다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">eval(&#39;document.&#39; + potato + &#39;.style.color = &quot;red&quot;&#39;);</code>\n        </deckgo-highlight-code>\n<p>이런 식으로 사용한 듯.</p>\n<h3 id=\"왜-사용하면-안될까\" style=\"position:relative;\">왜 사용하면 안될까?<a href=\"#%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%A0%EA%B9%8C\" aria-label=\"왜 사용하면 안될까 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol>\n<li>eval 속에 악의적인 코드를 넣는 공격이 가능해진다.</li>\n<li>디버깅이 어렵다. (코드 줄 번호 등이 없기 때문)</li>\n<li>느리다.</li>\n</ol>\n<p>일단 1번만으로도 사용은 안해야 하는 것으로 판명난 듯 하다.</p>\n<p>eval만으로 할 수 있는 작업도 있을 수 있지만, 웬만하면 다 대체 다른 내장 메소드나 구현을 통해 만들 수 있을 것으로 보인다.</p>\n<h2 id=\"reference\" style=\"position:relative;\">Reference<a href=\"#reference\" aria-label=\"reference permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"https://stackoverflow.com/questions/86513/why-is-using-the-javascript-eval-function-a-bad-idea\">stackoverflow - Why is using the JavaScript eval function a bad idea?</a></p>","internal":{"content":"\r\n## Eval is Evil?\r\n\r\n```javascript\r\n// 정수 n이 매개변수로 주어질 때 n의 각 자리 숫자의 합을 return하도록 solution 함수를 완성해주세요\r\nfunction solution(n) {\r\n  return eval(`${Array.from((n).toString()).join('+')}`)\r\n}\r\n```\r\n\r\n위와 같은 자릿수 더하기 문제를 풀어보다 eval을 사용했다. \r\nreduce를 주로 쓰긴 하지만, join이 떠오른 김에 `+` 문자열까지 만든 후 한 번에 계산하면 안되나? 싶어서 이렇게 작성하게 됐다.\r\n\r\neval을 좀더 살펴보려고 MDN 문서를 훑는 중에 **eval()을 절대 사용하지 말 것!** 이란 경고를 볼 수 있었다.\r\n\r\n좀 더 찾아보니 Eval is Evil!! 이라는 말장난까지 있어서 그 이유를 살펴보기로 한다.\r\n\r\n### eval의 기능\r\n\r\neval의 자세한 기능이 궁금하다면 [MDN - eval()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) 문서를 참고하는 것이 좋다.\r\n\r\n간략하게 eval의 기능을 설명하자면, 문자를 코드로 실행시키는 함수다. \r\n\r\n다시 말해 코드를 동적으로 작성하고 실행시킬 수 있는 함수가 되겠다.\r\n\r\n```javascript\r\nconsole.log(eval('2 + 2')) // 4\r\n\r\nlet foo = 10;\r\n\r\nconsole.log(eval('foo') + 1) // 11\r\n```\r\n\r\n### 왜 사용할까?\r\n\r\n수년 전의 stackoverflow 글들을 보다보니 코드를 동적으로 생성해야 할 때 가장 많이 쓴 듯 하다.\r\n\r\n```javascript\r\neval('document.' + potato + '.style.color = \"red\"');\r\n```\r\n\r\n이런 식으로 사용한 듯.\r\n\r\n### 왜 사용하면 안될까?\r\n\r\n1. eval 속에 악의적인 코드를 넣는 공격이 가능해진다.\r\n2. 디버깅이 어렵다. (코드 줄 번호 등이 없기 때문)\r\n3. 느리다.\r\n\r\n일단 1번만으로도 사용은 안해야 하는 것으로 판명난 듯 하다. \r\n\r\n\r\neval만으로 할 수 있는 작업도 있을 수 있지만, 웬만하면 다 대체 다른 내장 메소드나 구현을 통해 만들 수 있을 것으로 보인다.\r\n\r\n## Reference\r\n\r\n[stackoverflow - Why is using the JavaScript eval function a bad idea?](https://stackoverflow.com/questions/86513/why-is-using-the-javascript-eval-function-a-bad-idea)"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#eval-is-evil\">Eval is Evil?</a></p>\n<ul>\n<li><a href=\"#eval%EC%9D%98-%EA%B8%B0%EB%8A%A5\">eval의 기능</a></li>\n<li><a href=\"#%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\">왜 사용할까?</a></li>\n<li><a href=\"#%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%A0%EA%B9%8C\">왜 사용하면 안될까?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/javascript-eval-is-evil"}},"staticQueryHashes":["2665612806"]}