{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/nextjs-1","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/nextjs-1","tags":["Nextjs"],"date":"2023-06-29","img":null,"title":"Nextjs window is not defined"},"excerpt":"발생 원인 Nextjs는 기본적으로 SSR이라, Node.js에서 사용할 수 없는 ,  등의 객체에 접근할 수 없다. 페이지를 처음 렌더링 하는 과정에서 해당 객체들이 전역 객체로 존재하지 않기 때문이다. 따라서 not defined…","html":"<h2 id=\"발생-원인\" style=\"position:relative;\">발생 원인<a href=\"#%EB%B0%9C%EC%83%9D-%EC%9B%90%EC%9D%B8\" aria-label=\"발생 원인 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Nextjs는 기본적으로 SSR이라, Node.js에서 사용할 수 없는 <code class=\"language-text\">window</code>, <code class=\"language-text\">document</code> 등의 객체에 접근할 수 없다.</p>\n<p>페이지를 처음 렌더링 하는 과정에서 해당 객체들이 전역 객체로 존재하지 않기 때문이다. 따라서 not defined 오류가 발생한다.</p>\n<h2 id=\"reference-error-해결\" style=\"position:relative;\">reference error 해결<a href=\"#reference-error-%ED%95%B4%EA%B2%B0\" aria-label=\"reference error 해결 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"useeffect-hook\" style=\"position:relative;\">useEffect Hook<a href=\"#useeffect-hook\" aria-label=\"useeffect hook permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">useEffect</code> 훅은 컴포넌트가 마운트된 후 (=렌더링 된 후)에 호출된다. 따라서 반드시 클라이언트 단에서 실행되어야 하는 경우에 사용할 수 있다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">useEffect(() =&gt; {\r\n  // window or document 객체에 접근\r\n}, [])</code>\n        </deckgo-highlight-code>\n<p>이렇게 하면 Next.js는 컴포넌트가 return 하는 마크업을 <strong>렌더링 후</strong>, 해당 컴포넌트가 <strong>마운트되면</strong> 클라이언트에서 호출, 실행할 수 있게 한다.</p>\n<p><code class=\"language-text\">useEffect</code>와 <code class=\"language-text\">useState</code>를 함께 써서 처리도 가능하다. 확실하게 브라우저에서만 렌더링된다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">//...\r\nfunction UseEffectPage() {\r\n  const [isClient, setIsClient] = useState(false);\r\n\r\n  useEffect(() =&gt; {\r\n    setIsClient(true);\r\n  }, []);\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      {isClient &amp;&amp; (\r\n        // ...\r\n      )}\r\n    &lt;/div&gt;\r\n  )\r\n}\r\n//...</code>\n        </deckgo-highlight-code>\n<h3 id=\"typeof-window\" style=\"position:relative;\">typeof window<a href=\"#typeof-window\" aria-label=\"typeof window permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">window</code> 객체가 존재하는지를 flag로 처리해 조건부 렌더링한다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const [isWindow, setIsWindow] = typeof window === &quot;undefined&quot; ? &quot;server&quot; : &quot;client&quot;;</code>\n        </deckgo-highlight-code>\n<h3 id=\"nextdynamic\" style=\"position:relative;\">next/dynamic<a href=\"#nextdynamic\" aria-label=\"nextdynamic permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Next.js 에서 제공하는 동적 컴포넌트 로딩을 사용할 수 있다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import dynamic from &#39;next/dynamic&#39;;\r\n\r\nconst onlyBrowser = dynamic(\r\n  () =&gt; import (&quot;@/component/browser&quot;),\r\n  {ssr: false}\r\n);\r\n\r\n//...</code>\n        </deckgo-highlight-code>\n<p>위 코드는 컴포넌트를 <strong>동적 임포트</strong> 한다. <code class=\"language-text\">ssr: false</code> 옵션을 명시함으로써 클라이언트단에서만 코드를 실행하는 것이다.\r\n리액트 하이드레이션이 끝난 후에 해당 컴포넌트를 사용할 수 있다.</p>\n<h2 id=\"reference\" style=\"position:relative;\">Reference<a href=\"#reference\" aria-label=\"reference permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"https://nextjs.org/docs/pages/building-your-application/optimizing/lazy-loading\">Nextjs: Lazy Loading</a><br>\n도서 &#x3C;실전에서 바로 쓰는 Next.js></p>","internal":{"content":"\r\n## 발생 원인\r\n\r\nNextjs는 기본적으로 SSR이라, Node.js에서 사용할 수 없는 `window`, `document` 등의 객체에 접근할 수 없다.\r\n\r\n페이지를 처음 렌더링 하는 과정에서 해당 객체들이 전역 객체로 존재하지 않기 때문이다. 따라서 not defined 오류가 발생한다.\r\n\r\n\r\n## reference error 해결\r\n\r\n### useEffect Hook\r\n\r\n`useEffect` 훅은 컴포넌트가 마운트된 후 (=렌더링 된 후)에 호출된다. 따라서 반드시 클라이언트 단에서 실행되어야 하는 경우에 사용할 수 있다.\r\n\r\n```jsx\r\nuseEffect(() => {\r\n  // window or document 객체에 접근\r\n}, [])\r\n```\r\n\r\n이렇게 하면 Next.js는 컴포넌트가 return 하는 마크업을 **렌더링 후**, 해당 컴포넌트가 **마운트되면** 클라이언트에서 호출, 실행할 수 있게 한다.\r\n\r\n`useEffect`와 `useState`를 함께 써서 처리도 가능하다. 확실하게 브라우저에서만 렌더링된다.\r\n\r\n```jsx\r\n//...\r\nfunction UseEffectPage() {\r\n  const [isClient, setIsClient] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsClient(true);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {isClient && (\r\n        // ...\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n//...\r\n```\r\n\r\n### typeof window\r\n\r\n`window` 객체가 존재하는지를 flag로 처리해 조건부 렌더링한다.\r\n\r\n```jsx\r\nconst [isWindow, setIsWindow] = typeof window === \"undefined\" ? \"server\" : \"client\";\r\n```\r\n\r\n### next/dynamic\r\n\r\nNext.js 에서 제공하는 동적 컴포넌트 로딩을 사용할 수 있다.\r\n\r\n\r\n```jsx\r\nimport dynamic from 'next/dynamic';\r\n\r\nconst onlyBrowser = dynamic(\r\n  () => import (\"@/component/browser\"),\r\n  {ssr: false}\r\n);\r\n\r\n//...\r\n```\r\n\r\n위 코드는 컴포넌트를 **동적 임포트** 한다. `ssr: false` 옵션을 명시함으로써 클라이언트단에서만 코드를 실행하는 것이다.\r\n리액트 하이드레이션이 끝난 후에 해당 컴포넌트를 사용할 수 있다.\r\n\r\n\r\n## Reference\r\n[Nextjs: Lazy Loading](https://nextjs.org/docs/pages/building-your-application/optimizing/lazy-loading)   \r\n도서 &lt;실전에서 바로 쓰는 Next.js&gt;"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%B0%9C%EC%83%9D-%EC%9B%90%EC%9D%B8\">발생 원인</a></p>\n</li>\n<li>\n<p><a href=\"#reference-error-%ED%95%B4%EA%B2%B0\">reference error 해결</a></p>\n<ul>\n<li><a href=\"#useeffect-hook\">useEffect Hook</a></li>\n<li><a href=\"#typeof-window\">typeof window</a></li>\n<li><a href=\"#nextdynamic\">next/dynamic</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/nextjs-1"}},"staticQueryHashes":["2665612806"]}