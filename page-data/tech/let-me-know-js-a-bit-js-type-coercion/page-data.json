{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/tech/let-me-know-js-a-bit-js-type-coercion",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/let-me-know-js-a-bit-js-type-coercion","tags":["쫌만알자"],"date":"2022-10-19","img":"https://user-images.githubusercontent.com/76241233/177932893-5a504b26-12e4-4ade-b1ce-1951d072ba82.jpg","title":"쫌만알자! (13) - 자바스크립트의 타입 변환"},"excerpt":"우리가 자바스크립트에서 사용하는 모든 값은 제각각의 타입을 가지고 있습니다. 이런 타입은 개발자의 의도에 따라 변환되기도 하고, 암묵적으로 평가되기도 합니다. 암묵적 타입 변환(Implicit Coercion…","html":"<p>우리가 자바스크립트에서 사용하는 모든 값은 제각각의 <strong>타입</strong>을 가지고 있습니다.</p>\n<p>이런 타입은 개발자의 의도에 따라 변환되기도 하고, 암묵적으로 평가되기도 합니다.</p>\n<h2 id=\"암묵적-타입-변환implicit-coercion\" style=\"position:relative;\">암묵적 타입 변환(Implicit Coercion)<a href=\"#%EC%95%94%EB%AC%B5%EC%A0%81-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98implicit-coercion\" aria-label=\"암묵적 타입 변환implicit coercion permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>자바스크립트 엔진은 표현식을 평가할 때 맥락에 따라 타입을 강제로 변환할 때가 있습니다. 개발자의 의도와 무관하게 작동하는 방식입니다.</p>\n<p>자바스크립트 엔진이 어떻게 타입을 변환하는지 알게 되면, 타입이 바뀌어 발생할 수 있는 오류에 대응하기 쉽습니다.</p>\n<p><code class=\"language-text\">if(1)</code> 은 실행되는 블록일까요? <code class=\"language-text\">if(!val)</code> 은 무엇을 의미하는 걸까요? 타입 변환을 통해 알아봅시다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&#39;10&#39; + &#39;1&#39; // &#39;101&#39;\n&#39;10&#39; + 1 // &#39;101&#39;\n10 + &#39;1&#39; // &#39;101&#39;\n\n\n&#39;10&#39; * &#39;10&#39; // 100\n10 * &#39;10&#39; // 100\n\nif(1) { } // 1은 true로 평가\n\nif(!0) { } // 0은 false로 평가</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">+</code> 연산자는 문자열을 연결할 수도 있고, 숫자의 덧셈을 할 수도 있는 연산자입니다. 따라서 <strong>숫자 + 문자</strong>의 결과는 <strong>문자</strong>로 평가됩니다.<br>\n하지만 <code class=\"language-text\">*</code> 연산자는 숫자의 곱셉을 계산할 수 있는 연산자였죠? 따라서 <strong>문자 * 문자</strong>일지라도 평가결과는 <strong>숫자</strong>가 되는 것입니다.</p>\n<h3 id=\"문자열-타입-암묵적-변환\" style=\"position:relative;\">문자열 타입 암묵적 변환<a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85-%EC%95%94%EB%AC%B5%EC%A0%81-%EB%B3%80%ED%99%98\" aria-label=\"문자열 타입 암묵적 변환 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>문자열 타입으로의 변환은 <strong>문자 그대로</strong> 출력되게끔 합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">0 + &#39;&#39; // &#39;0&#39;\n-0 + &#39;&#39; // &#39;0&#39;\n\n10 + &#39;&#39; // &#39;10&#39;\n-10 + &#39;&#39; // &#39;-10&#39;\n\nNaN + &#39;&#39; // &#39;NaN&#39;\n\ntrue + &#39;&#39; // &#39;true&#39;\nfalse + &#39;&#39; // &#39;false&#39;\n\nundefined + &#39;&#39; // &#39;undefined&#39;</code>\n        </deckgo-highlight-code>\n<h3 id=\"숫자-타입-암묵적-변환\" style=\"position:relative;\">숫자 타입 암묵적 변환<a href=\"#%EC%88%AB%EC%9E%90-%ED%83%80%EC%9E%85-%EC%95%94%EB%AC%B5%EC%A0%81-%EB%B3%80%ED%99%98\" aria-label=\"숫자 타입 암묵적 변환 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>숫자 타입으로 변환되는 경우는, 숫자 연산에 사용되는 연산자(산술 연산자)일 경우에 작동합니다.</p>\n<p>산술 연산자는 <strong>숫자 타입으로 연산</strong>하는 것이 목적이기 때문에, 피연산자들을 숫자 타입으로 암묵적 형변환합니다.</p>\n<p>단, 숫자로 변환할 수 없는 값(ex. String, {} 등)은 NaN으로 바뀌기 때문에 주의해야합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">1 - &#39;1&#39; // 0\n10 * &#39;10&#39; // 100\n\n+&#39;&#39; // 0\n-&#39;&#39; // -0\n\n+&#39;any string&#39; // NaN\n\n+true // 1\n+false // 0\n\n+null // 0\n+undefined // NaN\n\n10 &gt; &#39;1&#39; // true\n\n+[] // 0\n+[1, 2] // NaN\n+{} // NaN</code>\n        </deckgo-highlight-code>\n<h3 id=\"불리언-타입-암묵적-변환\" style=\"position:relative;\">불리언 타입 암묵적 변환<a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8-%ED%83%80%EC%9E%85-%EC%95%94%EB%AC%B5%EC%A0%81-%EB%B3%80%ED%99%98\" aria-label=\"불리언 타입 암묵적 변환 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>불리언 타입(true/false)로의 형변환은 주로 if, for 같은 제어문이나 삼항연산자 등에서 사용합니다.</p>\n<p>논리적으로 참/거짓이 판별될 때 사용하는데요. 논리 결과가 필요한 곳에서 자바스크립트 엔진은 값을 불리언 타입으로 형변환 합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">if(&#39;&#39;) { console.log(&#39;실행 1&#39;) }\nif(0) { console.log(&#39;실행 2&#39;) }\nif(&#39;any string&#39;) { console.log(&#39;실행 3&#39;) }\nif(null) { console.log(&#39;실행 4&#39;) }\nif(undefined) { console.log(&#39;실행 5&#39;) }\nif(1) { console.log(&#39;실행 6&#39;) }\nif(10000) { console.log(&#39;실행 7&#39;) }\n\n// 실행 3\n// 실행 6\n// 실행 7</code>\n        </deckgo-highlight-code>\n<p>자바스크립트 엔진은 불리언 타입이 아닌 값을 <code class=\"language-text\">Truthy</code> 혹은 <code class=\"language-text\">Falsy</code>로 평가합니다. 이 말은 <strong>참(혹은 거짓)으로 평가되는 값</strong>을 의미합니다.</p>\n<p>다시 말해 제어문 같이 불리언 값이 필요한 곳에서 형변환되는 것이죠.</p>\n<h2 id=\"명시적-타입-변환explicit-coercion\" style=\"position:relative;\">명시적 타입 변환(Explicit Coercion)<a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98explicit-coercion\" aria-label=\"명시적 타입 변환explicit coercion permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>다음은 명시적 타입 변환입니다. 개발자가 뚜렷한 의도를 가지고 타입을 변환하는 방법은 여러가지가 있습니다.<br>\n빌트인 함수를 사용하거나, 내장 메소드, 함수 등을 사용하는 방법이 있습니다.</p>\n<h3 id=\"문자열-타입-명시적-변환\" style=\"position:relative;\">문자열 타입 명시적 변환<a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B3%80%ED%99%98\" aria-label=\"문자열 타입 명시적 변환 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// String 생성자 함수 사용\nString(10) // &#39;10&#39;\nString(NaN) // &#39;NaN&#39;\nString(Infinity) // &#39;Infinity&#39;\nString(true) // &#39;true&#39;\n\n// Object.prototype.toString 메소드 사용\n\n(10).toString() // &#39;10&#39;\n(NaN).toString() // &#39;NaN&#39;</code>\n        </deckgo-highlight-code>\n<h3 id=\"숫자-타입-명시적-변환\" style=\"position:relative;\">숫자 타입 명시적 변환<a href=\"#%EC%88%AB%EC%9E%90-%ED%83%80%EC%9E%85-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B3%80%ED%99%98\" aria-label=\"숫자 타입 명시적 변환 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// Number 생성자 함수 사용\nNumber(&#39;10&#39;) // 10\nNumber(true) // 1\nNumber(false) // 0\n\n// parseInt, parseFloat 함수 사용\nparseInt(&#39;10&#39;) // 10\nparseInt(&#39;10.345&#39;) // 10\nparseFloat(&#39;10.345&#39;) // 10.345</code>\n        </deckgo-highlight-code>\n<h3 id=\"불리언-타입-명시적-변환\" style=\"position:relative;\">불리언 타입 명시적 변환<a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8-%ED%83%80%EC%9E%85-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B3%80%ED%99%98\" aria-label=\"불리언 타입 명시적 변환 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// Boolean 생성자 함수 사용\nBoolean(&#39;abc&#39;) // true\nBoolean(&#39;&#39;) // false\nBoolean(&#39;false&#39;) // true --&gt; 문자열이 있기 때문에 true\nBoolean(0) // false\nBoolean(1) // true\nBoolean(null) // false\nBoolean(undefined) // false\nBoolean(NaN) // false\nBoolean([]) // true\nBoolean({}) // true</code>\n        </deckgo-highlight-code>\n<p>다음 글에서는 <strong>객체</strong> 란 무엇인지 알아보도록 하겠습니다.</p>\n<p>◾ <a href=\"/tech/let-me-know-js-a-bit-js-control-flow-statement-loop\">자바스크립트 제어문(2) - 반복문</a> 👈 이전 글 보기</p>","internal":{"content":"\n우리가 자바스크립트에서 사용하는 모든 값은 제각각의 **타입**을 가지고 있습니다.\n\n이런 타입은 개발자의 의도에 따라 변환되기도 하고, 암묵적으로 평가되기도 합니다.\n\n## 암묵적 타입 변환(Implicit Coercion)\n\n자바스크립트 엔진은 표현식을 평가할 때 맥락에 따라 타입을 강제로 변환할 때가 있습니다. 개발자의 의도와 무관하게 작동하는 방식입니다.\n\n자바스크립트 엔진이 어떻게 타입을 변환하는지 알게 되면, 타입이 바뀌어 발생할 수 있는 오류에 대응하기 쉽습니다.\n\n`if(1)` 은 실행되는 블록일까요? `if(!val)` 은 무엇을 의미하는 걸까요? 타입 변환을 통해 알아봅시다.\n\n```javascript\n'10' + '1' // '101'\n'10' + 1 // '101'\n10 + '1' // '101'\n\n\n'10' * '10' // 100\n10 * '10' // 100\n\nif(1) { } // 1은 true로 평가\n\nif(!0) { } // 0은 false로 평가\n```\n\n`+` 연산자는 문자열을 연결할 수도 있고, 숫자의 덧셈을 할 수도 있는 연산자입니다. 따라서 **숫자 + 문자**의 결과는 **문자**로 평가됩니다.   \n하지만 `*` 연산자는 숫자의 곱셉을 계산할 수 있는 연산자였죠? 따라서 **문자 * 문자**일지라도 평가결과는 **숫자**가 되는 것입니다.\n\n### 문자열 타입 암묵적 변환\n\n문자열 타입으로의 변환은 **문자 그대로** 출력되게끔 합니다.\n\n```javascript\n0 + '' // '0'\n-0 + '' // '0'\n\n10 + '' // '10'\n-10 + '' // '-10'\n\nNaN + '' // 'NaN'\n\ntrue + '' // 'true'\nfalse + '' // 'false'\n\nundefined + '' // 'undefined'\n```\n\n### 숫자 타입 암묵적 변환\n\n숫자 타입으로 변환되는 경우는, 숫자 연산에 사용되는 연산자(산술 연산자)일 경우에 작동합니다.\n\n산술 연산자는 **숫자 타입으로 연산**하는 것이 목적이기 때문에, 피연산자들을 숫자 타입으로 암묵적 형변환합니다.\n\n단, 숫자로 변환할 수 없는 값(ex. String, {} 등)은 NaN으로 바뀌기 때문에 주의해야합니다.\n\n```javascript\n1 - '1' // 0\n10 * '10' // 100\n\n+'' // 0\n-'' // -0\n\n+'any string' // NaN\n\n+true // 1\n+false // 0\n\n+null // 0\n+undefined // NaN\n\n10 > '1' // true\n\n+[] // 0\n+[1, 2] // NaN\n+{} // NaN\n```\n\n### 불리언 타입 암묵적 변환\n\n불리언 타입(true/false)로의 형변환은 주로 if, for 같은 제어문이나 삼항연산자 등에서 사용합니다.\n\n논리적으로 참/거짓이 판별될 때 사용하는데요. 논리 결과가 필요한 곳에서 자바스크립트 엔진은 값을 불리언 타입으로 형변환 합니다.\n\n```javascript\nif('') { console.log('실행 1') }\nif(0) { console.log('실행 2') }\nif('any string') { console.log('실행 3') }\nif(null) { console.log('실행 4') }\nif(undefined) { console.log('실행 5') }\nif(1) { console.log('실행 6') }\nif(10000) { console.log('실행 7') }\n\n// 실행 3\n// 실행 6\n// 실행 7\n```\n\n자바스크립트 엔진은 불리언 타입이 아닌 값을 `Truthy` 혹은 `Falsy`로 평가합니다. 이 말은 **참(혹은 거짓)으로 평가되는 값**을 의미합니다.\n\n다시 말해 제어문 같이 불리언 값이 필요한 곳에서 형변환되는 것이죠.\n\n\n## 명시적 타입 변환(Explicit Coercion)\n\n다음은 명시적 타입 변환입니다. 개발자가 뚜렷한 의도를 가지고 타입을 변환하는 방법은 여러가지가 있습니다.   \n빌트인 함수를 사용하거나, 내장 메소드, 함수 등을 사용하는 방법이 있습니다.\n\n### 문자열 타입 명시적 변환\n\n```javascript\n// String 생성자 함수 사용\nString(10) // '10'\nString(NaN) // 'NaN'\nString(Infinity) // 'Infinity'\nString(true) // 'true'\n\n// Object.prototype.toString 메소드 사용\n\n(10).toString() // '10'\n(NaN).toString() // 'NaN'\n```\n\n### 숫자 타입 명시적 변환\n\n```javascript\n// Number 생성자 함수 사용\nNumber('10') // 10\nNumber(true) // 1\nNumber(false) // 0\n\n// parseInt, parseFloat 함수 사용\nparseInt('10') // 10\nparseInt('10.345') // 10\nparseFloat('10.345') // 10.345\n```\n\n### 불리언 타입 명시적 변환\n\n```javascript\n// Boolean 생성자 함수 사용\nBoolean('abc') // true\nBoolean('') // false\nBoolean('false') // true --> 문자열이 있기 때문에 true\nBoolean(0) // false\nBoolean(1) // true\nBoolean(null) // false\nBoolean(undefined) // false\nBoolean(NaN) // false\nBoolean([]) // true\nBoolean({}) // true\n```\n\n다음 글에서는 **객체** 란 무엇인지 알아보도록 하겠습니다.\n\n◾ [자바스크립트 제어문(2) - 반복문](/tech/let-me-know-js-a-bit-js-control-flow-statement-loop) 👈 이전 글 보기\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%95%94%EB%AC%B5%EC%A0%81-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98implicit-coercion\">암묵적 타입 변환(Implicit Coercion)</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85-%EC%95%94%EB%AC%B5%EC%A0%81-%EB%B3%80%ED%99%98\">문자열 타입 암묵적 변환</a></li>\n<li><a href=\"#%EC%88%AB%EC%9E%90-%ED%83%80%EC%9E%85-%EC%95%94%EB%AC%B5%EC%A0%81-%EB%B3%80%ED%99%98\">숫자 타입 암묵적 변환</a></li>\n<li><a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8-%ED%83%80%EC%9E%85-%EC%95%94%EB%AC%B5%EC%A0%81-%EB%B3%80%ED%99%98\">불리언 타입 암묵적 변환</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98explicit-coercion\">명시적 타입 변환(Explicit Coercion)</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B3%80%ED%99%98\">문자열 타입 명시적 변환</a></li>\n<li><a href=\"#%EC%88%AB%EC%9E%90-%ED%83%80%EC%9E%85-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B3%80%ED%99%98\">숫자 타입 명시적 변환</a></li>\n<li><a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8-%ED%83%80%EC%9E%85-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B3%80%ED%99%98\">불리언 타입 명시적 변환</a></li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/let-me-know-js-a-bit-js-type-coercion"}},
    "staticQueryHashes": ["2665612806"]}