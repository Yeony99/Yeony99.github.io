{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/tech/let-me-know-js-a-bit-js-control-flow-statement-conditional",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"category":"tech","slug":"/tech/let-me-know-js-a-bit-js-control-flow-statement-conditional","tags":["쫌만알자"],"date":"2022-10-05","img":"https://user-images.githubusercontent.com/76241233/177932893-5a504b26-12e4-4ade-b1ce-1951d072ba82.jpg","title":"쫌만알자! (11) - 자바스크립트 제어문(1) - 조건문"},"excerpt":"자바스크립트에서는 조건문, 반복문 등의 제어문(control flow statement…","html":"<p>자바스크립트에서는 조건문, 반복문 등의 제어문(control flow statement)이 있습니다. 제어문은 특정한 <a href=\"/tech/let-me-know-js-a-bit-js-control-flow-statement#%EC%BD%94%EB%93%9C%EB%B8%94%EB%A1%9D\"><strong>코드블록</strong></a>을 조건에 따라 실행하거나, 반복실행합니다.</p>\n<p>프로그램은 위에서부터 아래로 순차적으로 실행되지만, 이런 제어문을 사용하면 실행 흐름을 조작할 수 있습니다.</p>\n<div style=\"background-color: #eee; border-radius: 1rem; font-size: 0.9rem; padding: 1rem\">\n<h6>❕ 참고</h6>\n실행 흐름을 인위적으로 조작하는 것은 프로그램의 흐름을 알기 어렵고, 가독성을 해치기도 합니다. 따라서 요즈음 함수형 프로그래밍에서는 제어문 사용을 지양하고, 고차함수를 사용하는 등의 방법을 택하고 있습니다.\n</div>\n<br/>\n<hr>\n<h2 id=\"코드블록\" style=\"position:relative;\">코드블록<a href=\"#%EC%BD%94%EB%93%9C%EB%B8%94%EB%A1%9D\" aria-label=\"코드블록 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>코드블록은 <code class=\"language-text\">{}</code> 로 감싸져 있는 <strong>하나의 실행 단위</strong>를 의미합니다. 블록은 조건문이나 반복문 없이 단독으로도 사용될 수 있습니다. 다만 대부분 조건문, 반복문, 함수 선언문과 함께 사용합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 코드블록\n{\n  let foo = 100\n}\n\nlet x = 10\nif (x &gt; 9) {\n  console.log(&quot;wow!&quot;)\n}\n\nfor (let i = 0; i &lt; 4; i++) {\n  console.log(i) // 0 1 2 3\n}\n\nfunction sum(a, b) {\n  return a + b\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"블록-스코프\" style=\"position:relative;\">블록 스코프<a href=\"#%EB%B8%94%EB%A1%9D-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"블록 스코프 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>소스코드를 작성했을 때, 소스코드의 범위를 <strong>스코프(scope)</strong> 라고 합니다.</p>\n<p>스코프는 식별자 접근 규칙에 따라 달라지는 식별자의 유효 범위입니다. 코드블록도 <strong>블록 스코프</strong>인데요. 간단히 말하자면 블록 내에서 선언된 변수는 블록 내에서만 유효하다는 것입니다.<br>\n식별자에 따라 유효범위가 어떻게 달라지는지는 이후에 스코프를 배워보며 더 자세히 알아보겠습니다.</p>\n<p>여기서는 <code class=\"language-text\">{}</code> 블록으로 나누어지는 것이 <strong>실행 단위</strong>라는 점만 기억하고 넘어갑시다.</p>\n<h3 id=\"조건문-conditional-statement\" style=\"position:relative;\">조건문 (Conditional Statement)<a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8-conditional-statement\" aria-label=\"조건문 conditional statement permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>조건문은 조건식의 평가 결과에 따라 코드블록의 실행 여부를 결정합니다.</p>\n<p>조건식은 <code class=\"language-text\">if ... else</code> 혹은 <code class=\"language-text\">switch</code> 로 작성합니다.</p>\n<h4 id=\"ifelse-문\" style=\"position:relative;\">if...else 문<a href=\"#ifelse-%EB%AC%B8\" aria-label=\"ifelse 문 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">if (조건식) {\n  // 조건식이 true이면 실행\n} else {\n  // 조건식이 false이면 실행\n}</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">if</code> 뒤 괄호()에는 조건식을 넣어줍니다. 조건문은 <code class=\"language-text\">true</code> 혹은 <code class=\"language-text\">false</code>로 동작을 제어하기 때문에, if문에 들어갈 조건식은 <strong>값</strong>으로 평가될 수 있어야 합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let x = 10\n\nif (x &gt; 9) {\n  console.log(&quot;greater than 9&quot;)\n} else {\n  console.log(&quot;less than or equal to 9&quot;)\n}</code>\n        </deckgo-highlight-code>\n<p>위 소스코드의 조건식은 <code class=\"language-text\">x > 9</code>로, true가 됩니다.<br>\n그럼 만약 조건식이 <code class=\"language-text\">true</code> 혹은 <code class=\"language-text\">false</code>인 boolean 값이 아닐 경우엔 어떻게 될까요?</p>\n<p>자바스크립트의 <strong>암묵적 형변환</strong>에 의해 <code class=\"language-text\">true</code> 혹은 <code class=\"language-text\">false</code> 값으로 치환되어 조건문이 실행되게 합니다.</p>\n<p>만약 여러 조건에 따라 실행될 코드를 추가하고 싶다면 <code class=\"language-text\">else if</code>를 추가로 작성할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">if (조건식1) {\n} else if (조건식2) {\n} else {\n}</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">else if</code>와 <code class=\"language-text\">else</code>는 <code class=\"language-text\">if...else</code> 조건문에서 선택적입니다. 또한 <code class=\"language-text\">if</code>와 <code class=\"language-text\">else</code>는 한번 밖에 사용할 수 없지만, <code class=\"language-text\">else if</code>는 하나의 조건문 내에서 여러 번 사용될 수 있습니다.</p>\n<p>다만 else if를 과도하게 많이 사용하는 것은 추천하는 방식이 아닙니다. <code class=\"language-text\">else if</code>는 기본적으로 아래 코드와 같습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">if (조건식1) {\n} else {\n  if (조건식2) {\n  }\n}</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">if</code> 조건식1의 평가 걀과가 <code class=\"language-text\">false</code>일 때, <strong>그리고</strong> 조건식2가 <code class=\"language-text\">true</code> 일때 실행되는 것입니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let x = 10\n\n// if 조건문1\nif (x &gt; 9) {\n  console.log(&quot;9보다 큼&quot;)\n} else if (x &gt; 8) {\n  console.log(&quot;8보다 큼&quot;)\n} else {\n  console.log(&quot;???&quot;)\n}\n\n//if 조건문2\nif (x &gt; 9) {\n  console.log(&quot;9보다 큼&quot;)\n} else {\n  if (x &gt; 8) {\n    console.log(&quot;8보다 큼&quot;)\n  }\n  console.log(&quot;???&quot;)\n}</code>\n        </deckgo-highlight-code>\n<p>위 코드를 실행하면 콘솔에 찍힐 내용은 무엇일까요? 조건문1, 2 둘다 <strong>9보다 큼</strong>이 출력됩니다.</p>\n<p>왜냐하면 이미 <code class=\"language-text\">if(x > 9)</code> 라는 조건이 <code class=\"language-text\">true</code>로 평가되고, 해당 코드블록의 코드가 실행되었기 때문입니다.</p>\n<p><code class=\"language-text\">if...else</code> 조건문을 사용할 때에 아무리 <code class=\"language-text\">else if</code>의 조건식이 참이더라도, <code class=\"language-text\">if</code>의 조건식이 이미 참이면 <code class=\"language-text\">else if</code>의 코드블록은 영원히 실행되지 않습니다.</p>\n<p>지나치게 많은 조건들을 나열해 코드를 작성한다면, 어떤 코드블록이 실행될 지 예측하기 어렵겠죠? 따라서 과도한 <code class=\"language-text\">if...else</code>문 사용은 지양하는 것이 좋습니다.</p>\n<br/>\n<hr>\n<h4 id=\"switch-문\" style=\"position:relative;\">switch 문<a href=\"#switch-%EB%AC%B8\" aria-label=\"switch 문 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">switch</code>문은 표현식을 평가해 그 값과 일치하는 <code class=\"language-text\">case</code>문으로 흐름을 제어하는 조건문입니다.</p>\n<p><code class=\"language-text\">case</code>는 특정한 케이스일 경우~ 를 의미합니다. <code class=\"language-text\">default</code>는 <code class=\"language-text\">case</code>에 하나도 부합하지 않으면 기본적으로 실행될 동작을 작성합니다.</p>\n<p><code class=\"language-text\">break</code>는 일치하는 케이스를 찾았을 경우 실행을 멈추게 합니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">switch(표현식) {\n  case 표현식1: 실행될 문1\n    break;\n  case 표현식2: 실행될 문2\n    break;\n  default: 일치하는 case가 없으면 실행될 문\n}</code>\n        </deckgo-highlight-code>\n<p>if...else문의 조건식은 <code class=\"language-text\">true</code> 혹은 <code class=\"language-text\">false</code>로 평가되는 boolean 값이었는데요. switch 문에서의 표현식은 <strong>문자열</strong>이나 <strong>숫자</strong>가 많습니다. 표현식의 문자와 case가 맞을 때 실행되는 것이죠.</p>\n<p>예제로 한번 살펴보겠습니다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">let day = &quot;&quot;\n\n// getDay()는 일주일의 요일을 0부터 6까지의 숫자로 반환합니다.\n// 일요일 = 0, 월요일 = 1 ...\nswitch (new Date(&quot;2022-10-05&quot;).getDay()) {\n  case 0:\n    day = &quot;일&quot;\n  case 1:\n    day = &quot;월&quot;\n  case 2:\n    day = &quot;화&quot;\n  case 3:\n    day = &quot;수&quot;\n  case 4:\n    day = &quot;목&quot;\n  case 5:\n    day = &quot;금&quot;\n  case 6:\n    day = &quot;토&quot;\n  default:\n    day = &quot;유효하지 않은 요일!!&quot;\n}\n\nconsole.log(day)</code>\n        </deckgo-highlight-code>\n<p>이렇게 작성을 해보았습니다. 글을 올린 오늘(22년 10월 5일)은 수요일입니다. <code class=\"language-text\">day</code>는 무엇으로 출력될까요?</p>\n<p>결과는 <code class=\"language-text\">유효하지 않은 요일!!</code>입니다. 분명 case에서 3과 일치했을텐데 왜 default의 값이 출력되는걸까요?</p>\n<p>바로 <strong>break</strong>가 없기 때문입니다. <code class=\"language-text\">switch</code>문은 기본적으로 표현식과 모든 case문을 한 번씩 대조합니다. 위 코드에서는 <code class=\"language-text\">case 0</code>부터 시작해 <code class=\"language-text\">case 3</code>에서 일치하는 케이스를 찾았지만, 그 다음 <code class=\"language-text\">case 4</code>... <code class=\"language-text\">default</code>까지 멈추지 않고 계속 실행된 것입니다.</p>\n<p>따라서 일치하는 결과를 찾았으면 case를 찾는 것을 <strong>멈춰야</strong> 합니다.</p>\n<p><code class=\"language-text\">break</code>문을 작성한 코드를 확인해봅시다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">switch (new Date(&quot;2022-10-05&quot;).getDay()) {\n  case 0:\n    day = &quot;일&quot;\n    break\n  case 1:\n    day = &quot;월&quot;\n    break\n  case 2:\n    day = &quot;화&quot;\n    break\n  case 3:\n    day = &quot;수&quot;\n    break\n  case 4:\n    day = &quot;목&quot;\n    break\n  case 5:\n    day = &quot;금&quot;\n    break\n  case 6:\n    day = &quot;토&quot;\n    break\n  default:\n    day = &quot;유효하지 않은 요일!!&quot;\n}\n\nconsole.log(day) // 수</code>\n        </deckgo-highlight-code>\n<p>잘 출력되는 것을 볼 수 있습니다.</p>\n<br/>\n<hr>\n<h3 id=\"결론\" style=\"position:relative;\">결론<a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>만약 if...else 문으로 해결할 수 있다면 switch문 보다는 if...else문이 좋습니다. 다만 앞서 말했다시피, <code class=\"language-text\">else if</code>가 많아져 가독성이 떨어지게 되는 경우는 switch 문으로 전환하는 것이 효과적입니다.</p>\n<p>다음 글에서는 제어문 (2), 반복문에 대해 알아보겠습니다.</p>\n<p>◾ <a href=\"/tech/let-me-know-js-a-bit-js-value-expression-statement\">자바스크립트 연산자</a> 👈 이전 글 보기<br>\n◾ <a href=\"/tech/let-me-know-js-a-bit-js-control-flow-statement-loop\">자바스크립트 제어문(2) - 반복문</a> 👈 다음 글 보기</p>","internal":{"content":"\n자바스크립트에서는 조건문, 반복문 등의 제어문(control flow statement)이 있습니다. 제어문은 특정한 [**코드블록**](/tech/let-me-know-js-a-bit-js-control-flow-statement#코드블록)을 조건에 따라 실행하거나, 반복실행합니다.\n\n프로그램은 위에서부터 아래로 순차적으로 실행되지만, 이런 제어문을 사용하면 실행 흐름을 조작할 수 있습니다.\n\n<div style=\"background-color: #eee; border-radius: 1rem; font-size: 0.9rem; padding: 1rem\">\n<h6>❕ 참고</h6>\n실행 흐름을 인위적으로 조작하는 것은 프로그램의 흐름을 알기 어렵고, 가독성을 해치기도 합니다. 따라서 요즈음 함수형 프로그래밍에서는 제어문 사용을 지양하고, 고차함수를 사용하는 등의 방법을 택하고 있습니다.\n</div>\n\n<br/>\n\n---\n\n## 코드블록\n\n코드블록은 `{}` 로 감싸져 있는 **하나의 실행 단위**를 의미합니다. 블록은 조건문이나 반복문 없이 단독으로도 사용될 수 있습니다. 다만 대부분 조건문, 반복문, 함수 선언문과 함께 사용합니다.\n\n```javascript\n// 코드블록\n{\n  let foo = 100\n}\n\nlet x = 10\nif (x > 9) {\n  console.log(\"wow!\")\n}\n\nfor (let i = 0; i < 4; i++) {\n  console.log(i) // 0 1 2 3\n}\n\nfunction sum(a, b) {\n  return a + b\n}\n```\n\n### 블록 스코프\n\n소스코드를 작성했을 때, 소스코드의 범위를 **스코프(scope)** 라고 합니다.\n\n스코프는 식별자 접근 규칙에 따라 달라지는 식별자의 유효 범위입니다. 코드블록도 **블록 스코프**인데요. 간단히 말하자면 블록 내에서 선언된 변수는 블록 내에서만 유효하다는 것입니다.  \n식별자에 따라 유효범위가 어떻게 달라지는지는 이후에 스코프를 배워보며 더 자세히 알아보겠습니다.\n\n여기서는 `{}` 블록으로 나누어지는 것이 **실행 단위**라는 점만 기억하고 넘어갑시다.\n\n### 조건문 (Conditional Statement)\n\n조건문은 조건식의 평가 결과에 따라 코드블록의 실행 여부를 결정합니다.\n\n조건식은 `if ... else` 혹은 `switch` 로 작성합니다.\n\n#### if...else 문\n\n```javascript\nif (조건식) {\n  // 조건식이 true이면 실행\n} else {\n  // 조건식이 false이면 실행\n}\n```\n\n`if` 뒤 괄호()에는 조건식을 넣어줍니다. 조건문은 `true` 혹은 `false`로 동작을 제어하기 때문에, if문에 들어갈 조건식은 **값**으로 평가될 수 있어야 합니다.\n\n```javascript\nlet x = 10\n\nif (x > 9) {\n  console.log(\"greater than 9\")\n} else {\n  console.log(\"less than or equal to 9\")\n}\n```\n\n위 소스코드의 조건식은 `x > 9`로, true가 됩니다.  \n그럼 만약 조건식이 `true` 혹은 `false`인 boolean 값이 아닐 경우엔 어떻게 될까요?\n\n자바스크립트의 **암묵적 형변환**에 의해 `true` 혹은 `false` 값으로 치환되어 조건문이 실행되게 합니다.\n\n만약 여러 조건에 따라 실행될 코드를 추가하고 싶다면 `else if`를 추가로 작성할 수 있습니다.\n\n```javascript\nif (조건식1) {\n} else if (조건식2) {\n} else {\n}\n```\n\n`else if`와 `else`는 `if...else` 조건문에서 선택적입니다. 또한 `if`와 `else`는 한번 밖에 사용할 수 없지만, `else if`는 하나의 조건문 내에서 여러 번 사용될 수 있습니다.\n\n다만 else if를 과도하게 많이 사용하는 것은 추천하는 방식이 아닙니다. `else if`는 기본적으로 아래 코드와 같습니다.\n\n```javascript\nif (조건식1) {\n} else {\n  if (조건식2) {\n  }\n}\n```\n\n`if` 조건식1의 평가 걀과가 `false`일 때, **그리고** 조건식2가 `true` 일때 실행되는 것입니다.\n\n```javascript\nlet x = 10\n\n// if 조건문1\nif (x > 9) {\n  console.log(\"9보다 큼\")\n} else if (x > 8) {\n  console.log(\"8보다 큼\")\n} else {\n  console.log(\"???\")\n}\n\n//if 조건문2\nif (x > 9) {\n  console.log(\"9보다 큼\")\n} else {\n  if (x > 8) {\n    console.log(\"8보다 큼\")\n  }\n  console.log(\"???\")\n}\n```\n\n위 코드를 실행하면 콘솔에 찍힐 내용은 무엇일까요? 조건문1, 2 둘다 **9보다 큼**이 출력됩니다.\n\n왜냐하면 이미 `if(x > 9)` 라는 조건이 `true`로 평가되고, 해당 코드블록의 코드가 실행되었기 때문입니다.\n\n`if...else` 조건문을 사용할 때에 아무리 `else if`의 조건식이 참이더라도, `if`의 조건식이 이미 참이면 `else if`의 코드블록은 영원히 실행되지 않습니다.\n\n지나치게 많은 조건들을 나열해 코드를 작성한다면, 어떤 코드블록이 실행될 지 예측하기 어렵겠죠? 따라서 과도한 `if...else`문 사용은 지양하는 것이 좋습니다.\n\n<br/>\n\n---\n\n#### switch 문\n\n`switch`문은 표현식을 평가해 그 값과 일치하는 `case`문으로 흐름을 제어하는 조건문입니다.\n\n`case`는 특정한 케이스일 경우~ 를 의미합니다. `default`는 `case`에 하나도 부합하지 않으면 기본적으로 실행될 동작을 작성합니다.\n\n`break`는 일치하는 케이스를 찾았을 경우 실행을 멈추게 합니다.\n\n```javascript\nswitch(표현식) {\n  case 표현식1: 실행될 문1\n    break;\n  case 표현식2: 실행될 문2\n    break;\n  default: 일치하는 case가 없으면 실행될 문\n}\n```\n\nif...else문의 조건식은 `true` 혹은 `false`로 평가되는 boolean 값이었는데요. switch 문에서의 표현식은 **문자열**이나 **숫자**가 많습니다. 표현식의 문자와 case가 맞을 때 실행되는 것이죠.\n\n예제로 한번 살펴보겠습니다.\n\n```javascript\nlet day = \"\"\n\n// getDay()는 일주일의 요일을 0부터 6까지의 숫자로 반환합니다.\n// 일요일 = 0, 월요일 = 1 ...\nswitch (new Date(\"2022-10-05\").getDay()) {\n  case 0:\n    day = \"일\"\n  case 1:\n    day = \"월\"\n  case 2:\n    day = \"화\"\n  case 3:\n    day = \"수\"\n  case 4:\n    day = \"목\"\n  case 5:\n    day = \"금\"\n  case 6:\n    day = \"토\"\n  default:\n    day = \"유효하지 않은 요일!!\"\n}\n\nconsole.log(day)\n```\n\n이렇게 작성을 해보았습니다. 글을 올린 오늘(22년 10월 5일)은 수요일입니다. `day`는 무엇으로 출력될까요?\n\n결과는 `유효하지 않은 요일!!`입니다. 분명 case에서 3과 일치했을텐데 왜 default의 값이 출력되는걸까요?\n\n바로 **break**가 없기 때문입니다. `switch`문은 기본적으로 표현식과 모든 case문을 한 번씩 대조합니다. 위 코드에서는 `case 0`부터 시작해 `case 3`에서 일치하는 케이스를 찾았지만, 그 다음 `case 4`... `default`까지 멈추지 않고 계속 실행된 것입니다.\n\n따라서 일치하는 결과를 찾았으면 case를 찾는 것을 **멈춰야** 합니다.\n\n`break`문을 작성한 코드를 확인해봅시다.\n\n```javascript\nswitch (new Date(\"2022-10-05\").getDay()) {\n  case 0:\n    day = \"일\"\n    break\n  case 1:\n    day = \"월\"\n    break\n  case 2:\n    day = \"화\"\n    break\n  case 3:\n    day = \"수\"\n    break\n  case 4:\n    day = \"목\"\n    break\n  case 5:\n    day = \"금\"\n    break\n  case 6:\n    day = \"토\"\n    break\n  default:\n    day = \"유효하지 않은 요일!!\"\n}\n\nconsole.log(day) // 수\n```\n\n잘 출력되는 것을 볼 수 있습니다.\n\n<br/>\n\n---\n\n### 결론\n\n만약 if...else 문으로 해결할 수 있다면 switch문 보다는 if...else문이 좋습니다. 다만 앞서 말했다시피, `else if`가 많아져 가독성이 떨어지게 되는 경우는 switch 문으로 전환하는 것이 효과적입니다.\n\n다음 글에서는 제어문 (2), 반복문에 대해 알아보겠습니다.\n\n◾ [자바스크립트 연산자](/tech/let-me-know-js-a-bit-js-value-expression-statement) 👈 이전 글 보기   \n◾ [자바스크립트 제어문(2) - 반복문](/tech/let-me-know-js-a-bit-js-control-flow-statement-loop) 👈 다음 글 보기\n"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%BD%94%EB%93%9C%EB%B8%94%EB%A1%9D\">코드블록</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%B8%94%EB%A1%9D-%EC%8A%A4%EC%BD%94%ED%94%84\">블록 스코프</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8-conditional-statement\">조건문 (Conditional Statement)</a></p>\n<ul>\n<li><a href=\"#ifelse-%EB%AC%B8\">if...else 문</a></li>\n<li><a href=\"#switch-%EB%AC%B8\">switch 문</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/tech/let-me-know-js-a-bit-js-control-flow-statement-conditional"}},
    "staticQueryHashes": ["2665612806"]}