<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Your Site's RSS Feed]]></title><description><![CDATA[This is Yeony's portfolio]]></description><link>https://yeony99.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 09 Oct 2022 14:03:11 GMT</lastBuildDate><item><title><![CDATA[리액트 네이티브 모노레포 프로젝트 구축하기]]></title><description><![CDATA[들어가며 React와 React Native를 공부하며 웹과 앱 간에 소스를 공유할 수 있으면 좋겠다는 생각이 들었습니다.
flutter web도 고려사항에 있었지만, 고민 끝에 React와 RN…]]></description><link>https://yeony99.github.io/tech/react-native-with-monorepo</link><guid isPermaLink="false">https://yeony99.github.io/tech/react-native-with-monorepo</guid><pubDate>Mon, 10 Oct 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;들어가며&quot; style=&quot;position:relative;&quot;&gt;들어가며&lt;a href=&quot;#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0&quot; aria-label=&quot;들어가며 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React와 React Native를 공부하며 웹과 앱 간에 소스를 공유할 수 있으면 좋겠다는 생각이 들었습니다.
flutter web도 고려사항에 있었지만, 고민 끝에 React와 RN으로 노선을 정했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;언어의 숙련도&lt;/li&gt;
&lt;li&gt;플랫폼에 관계없는 동일한 사용자 경험 제공 (UX/UI 통일)&lt;/li&gt;
&lt;li&gt;소스 중복 최소화&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 두 가지를 고려했습니다.&lt;/p&gt;
&lt;p&gt;요구사항이 추가될 수 있기 때문에, 언젠가 네이티브 코드 연동이 필요하지 않을까 싶어 expo는 고려하지 않았습니다.&lt;/p&gt;
&lt;h3 id=&quot;프로젝트&quot; style=&quot;position:relative;&quot;&gt;프로젝트&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8&quot; aria-label=&quot;프로젝트 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Yeony99/react-native-monorepo&quot;&gt;Yeony99 - react-native-monorepo&lt;/a&gt; 프로젝트를 본 글의 예시로 올려놓았습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; 설치한 후 루트의 &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;의 scripts를 참고해 실행해볼 수 있습니다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;yarn-workspace-모노레포-설정하기&quot; style=&quot;position:relative;&quot;&gt;Yarn workspace 모노레포 설정하기&lt;a href=&quot;#yarn-workspace-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;yarn workspace 모노레포 설정하기 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;모바일과 웹 소스를 각각의 레포지토리로 만드는 멀티 레포도 괜찮을 것 같지만, 장기적으로 생각했을 때 하나의 레포지토리로 여러 패키지를 관리하는 것이 부담이 덜할 것이라 판단했습니다.&lt;/p&gt;
&lt;p&gt;웹과 앱에서 동일한 사용자 경험을 주고 싶기도 했구요. &lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;yarn-workspace&quot; style=&quot;position:relative;&quot;&gt;yarn workspace&lt;a href=&quot;#yarn-workspace&quot; aria-label=&quot;yarn workspace permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;yarn에서는 root 경로의 package.json 파일이 하위 폴더의 package.json에 정의된 dependencies를 &lt;code class=&quot;language-text&quot;&gt;yarn install&lt;/code&gt;로 한번에 설치할 수 있게 하는 &lt;a href=&quot;https://classic.yarnpkg.com/lang/en/docs/workspaces/&quot;&gt;workspace&lt;/a&gt; 설정이 가능합니다.&lt;/p&gt;
&lt;p&gt;구성할 프로젝트 구조는 아래와 같습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;root&amp;gt;/
└─ packages/
    ├── app/
    │   ├── src/
    │   └── package.json
    # Android/iOS app configuration files and native code
    ├── mobile/
    │   ├── android/
    │   ├── ios/
    │   ├── app.json
    │   ├── babel.config.js
    │   ├── index.js
    │   ├── metro.config.js
    │   └── package.json
    # Windows app configuration files and native code
    └── web/
        ├── public/
        ├── src/
        ├── carco.config.js
        └── package.json
└─ package.json&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;yarn-설치&quot; style=&quot;position:relative;&quot;&gt;yarn 설치&lt;a href=&quot;#yarn-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;yarn 설치 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;node가 설치되어 있다면 npm으로 설치합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ npm install -g yarn&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;node가 설치되어 있지 않다면 node부터 설치합니다.&lt;/p&gt;
&lt;p&gt;그 외에도 homebrew, chocolatey 등을 이용해 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;설치 완료 후 확인합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ yarn --version&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;프로젝트-생성&quot; style=&quot;position:relative;&quot;&gt;프로젝트 생성&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;프로젝트 생성 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;원하는 프로젝트명으로 폴더를 하나 생성합니다. 저는 &lt;code class=&quot;language-text&quot;&gt;react-native-monorepo&lt;/code&gt;로 설정하였습니다. 여기가 프로젝트의 루트 디렉토리입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ yarn init -y&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;위 명령어로 package.json을 생성해줍니다. 생성된 package.json을 수정해봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;json&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// 루트 package.json
{
  &amp;quot;name&amp;quot;: &amp;quot;react-native-monorepo&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  // 추가
  &amp;quot;workspaces&amp;quot;: {
    &amp;quot;packages&amp;quot;: [&amp;quot;packages/*&amp;quot;],
    &amp;quot;nohoist&amp;quot;: [&amp;quot;**/react&amp;quot;, &amp;quot;**/react-dom&amp;quot;]
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;workspaces 속 packages에는 yarn workspace에서 관리할 패키지 경로를 입력합니다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;nohoist&lt;/code&gt;는 루트 프로젝트 디렉토리가 아닌, 각 패키지 디렉토리에 설치되어야 한다고 yarn에 알려줍니다.&lt;/p&gt;
&lt;p&gt;그 후 packages 디렉토리를 생성합니다.&lt;/p&gt;
&lt;p&gt;pacakges 폴더로 &lt;code class=&quot;language-text&quot;&gt;cd packages&lt;/code&gt; 한 뒤 각각의 프로젝트를 생성해봅시다.&lt;/p&gt;
&lt;h3 id=&quot;app-패키지-생성&quot; style=&quot;position:relative;&quot;&gt;app 패키지 생성&lt;a href=&quot;#app-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;app 패키지 생성 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;공유될 React Native 코드를 담을 &lt;code class=&quot;language-text&quot;&gt;app&lt;/code&gt; 디렉토리를 생성해봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ mkdir packages/app &amp;amp;&amp;amp; cd packages/app&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;app 디렉토리의 루트에서 &lt;strong&gt;package.json&lt;/strong&gt;을 추가하고 아래와 같이 작성합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;json&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// app의 package.json
{
  &amp;quot;name&amp;quot;: &amp;quot;@react-native-monorepo/app&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.0&amp;quot;,
  &amp;quot;private&amp;quot;: true,
  &amp;quot;main&amp;quot;: &amp;quot;src&amp;quot;,
  &amp;quot;peerDependencies&amp;quot;: {
    &amp;quot;react&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;react-native&amp;quot;: &amp;quot;*&amp;quot;
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;div style=&quot;background-color: #eee; border-radius: 1rem; font-size: 0.9rem; padding: 1rem&quot;&gt;
  &lt;h6&gt;❗ peerDependencies 란?&lt;/h6&gt;
  실제로 app 패키지 내부에서 import하지는 않지만, 패키지에 의존하는 각각의 앱들이 라이브러리 버전을 제공합니다.&lt;br/&gt;
  app 패키지의 `peerDependencies`는 이후 생성할 mobile, web 앱으로부터 각각의 버전을 받게 됩니다.
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;src/index.js&lt;/code&gt;에 앱을 만들어봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;jsx&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// react-native-monorepo/packages/app/src/index.js

import React from &amp;quot;react&amp;quot;
import { Platform, StyleSheet, Text, View } from &amp;quot;react-native&amp;quot;

export function App() {
  return (
    &amp;lt;View&amp;gt;
      &amp;lt;Text style={styles.text}&amp;gt;Hello from React Native! &amp;lt;/Text&amp;gt;
      &amp;lt;View style={styles.platformRow}&amp;gt;
        &amp;lt;Text style={styles.text}&amp;gt;Platform: &amp;lt;/Text&amp;gt;
        &amp;lt;View style={styles.platformBackground}&amp;gt;
          &amp;lt;Text style={styles.platformValue}&amp;gt;{Platform.OS}&amp;lt;/Text&amp;gt;
        &amp;lt;/View&amp;gt;
      &amp;lt;/View&amp;gt;
    &amp;lt;/View&amp;gt;
  )
}

const styles = StyleSheet.create({
  text: {
    fontSize: 28,
    fontWeight: &amp;quot;600&amp;quot;,
  },
  platformRow: {
    marginTop: 12,
    flexDirection: &amp;quot;row&amp;quot;,
    alignItems: &amp;quot;center&amp;quot;,
  },
  platformValue: {
    fontSize: 28,
    fontWeight: &amp;quot;500&amp;quot;,
  },
  platformBackground: {
    backgroundColor: &amp;quot;#ececec&amp;quot;,
    borderWidth: StyleSheet.hairlineWidth,
    borderColor: &amp;quot;#d4d4d4&amp;quot;,
    paddingHorizontal: 6,
    borderRadius: 6,
    alignItems: &amp;quot;center&amp;quot;,
  },
})

export default App&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;yarn workspace 덕분에 &lt;code class=&quot;language-text&quot;&gt;@react-native-monorepo/app&lt;/code&gt;을 다른 작업 공간에서도 사용할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@react-native-monorepo/app&lt;/code&gt;으로 dependencies에 표시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;import App from &quot;@react-native-monorepo/app&quot;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;mobile-코드-생성&quot; style=&quot;position:relative;&quot;&gt;mobile 코드 생성&lt;a href=&quot;#mobile-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;mobile 코드 생성 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;React Native를 사용할 수 있게 되었으니 &lt;code class=&quot;language-text&quot;&gt;packages/mobile&lt;/code&gt;에 Android 와 iOS 네이티브 코드를 작성할 수 있도록 프로젝트를 생성해봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;# window
$ cd packages &amp;amp;&amp;amp; npx react-native init MyApp &amp;amp;&amp;amp; move MyApp mobile

# macOS
$ cd packages &amp;amp;&amp;amp; npx react-native init MyApp &amp;amp;&amp;amp; mv MyApp mobile&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;package.json에 패키지 이름을 바꾸고, &lt;code class=&quot;language-text&quot;&gt;@react-native-monorepo/app&lt;/code&gt; 종속성을 추가합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;json&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// packages/mobile/package.json
{
  // 이름 수정
  &amp;quot;name&amp;quot;: &amp;quot;@react-native-monorepo/mobile&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
  &amp;quot;private&amp;quot;: true,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;android&amp;quot;: &amp;quot;react-native run-android&amp;quot;,
    &amp;quot;ios&amp;quot;: &amp;quot;react-native run-ios&amp;quot;,
    &amp;quot;start&amp;quot;: &amp;quot;react-native start&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;jest&amp;quot;,
    &amp;quot;lint&amp;quot;: &amp;quot;eslint .&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {
    // 종속성 추가
    &amp;quot;@react-native-monorepo/app&amp;quot;: &amp;quot;*&amp;quot;,
    &amp;quot;react&amp;quot;: &amp;quot;18.1.0&amp;quot;,
    &amp;quot;react-native&amp;quot;: &amp;quot;0.70.2&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;@babel/core&amp;quot;: &amp;quot;^7.12.9&amp;quot;,
    &amp;quot;@babel/runtime&amp;quot;: &amp;quot;^7.12.5&amp;quot;,
    &amp;quot;@react-native-community/eslint-config&amp;quot;: &amp;quot;^2.0.0&amp;quot;,
    &amp;quot;babel-jest&amp;quot;: &amp;quot;^26.6.3&amp;quot;,
    &amp;quot;eslint&amp;quot;: &amp;quot;^7.32.0&amp;quot;,
    &amp;quot;jest&amp;quot;: &amp;quot;^26.6.3&amp;quot;,
    &amp;quot;metro-react-native-babel-preset&amp;quot;: &amp;quot;0.72.3&amp;quot;,
    &amp;quot;react-test-renderer&amp;quot;: &amp;quot;18.1.0&amp;quot;
  },
  &amp;quot;jest&amp;quot;: {
    &amp;quot;preset&amp;quot;: &amp;quot;react-native&amp;quot;
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;React Native에서 제공하는 앱 템플릿 대신, &lt;code class=&quot;language-text&quot;&gt;@react-native-monorepo/app&lt;/code&gt;을 사용하도록 &lt;code class=&quot;language-text&quot;&gt;packages/mobile/index.js&lt;/code&gt;을 수정합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;jsx&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;import { AppRegistry } from &amp;quot;react-native&amp;quot;
import App from &amp;quot;@react-native-monorepo/app&amp;quot;
import { name as appName } from &amp;quot;./app.json&amp;quot;

AppRegistry.registerComponent(appName, () =&amp;gt; App)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;그리고 네이티브 코드를 실행해보기 전 nohoist에 react-native를 명시해야 제대로 실행됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;json&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// react-native-monorepo/package.json
{
  &amp;quot;name&amp;quot;: &amp;quot;react-native-monorepo&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;private&amp;quot;: &amp;quot;true&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;workspaces&amp;quot;: {
    &amp;quot;packages&amp;quot;: [&amp;quot;packages/*&amp;quot;],
    &amp;quot;nohoist&amp;quot;: [
      &amp;quot;**/react&amp;quot;,
      &amp;quot;**/react-dom&amp;quot;,
      &amp;quot;**/react-native&amp;quot;,
      &amp;quot;**/react-native/**&amp;quot;
    ]
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;또한 workspace는 &lt;code class=&quot;language-text&quot;&gt;&quot;private&quot;: true&lt;/code&gt;일 때만 작동하므로 private 옵션을 추가합니다.&lt;/p&gt;
&lt;p&gt;nohoist는 수정할 때마다 &lt;code class=&quot;language-text&quot;&gt;yarn reset &amp;amp;&amp;amp; yarn&lt;/code&gt;명령어로 프로젝트 루트에서 실행해야 종속성을 다시 설치합니다.&lt;/p&gt;
&lt;p&gt;아직 문제는 있습니다. 다른 디렉토리에 있는 걸 사용하려면 monorepo tool이 필요합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;# react-native-monorepo/packages/mobile
$ yarn add -D react-native-monorepo-tools&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;metro 구성을 업데이트 합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// react-native-monorepo/packages/mobile/metro.config.js
const exclusionList = require(&amp;quot;metro-config/src/defaults/exclusionList&amp;quot;)
const {
  getMetroTools,
  getMetroAndroidAssetsResolutionFix,
} = require(&amp;quot;react-native-monorepo-tools&amp;quot;)

const monorepoMetroTools = getMetroTools()

const androidAssetsResolutionFix = getMetroAndroidAssetsResolutionFix()

module.exports = {
  transformer: {
    publicPath: androidAssetsResolutionFix.publicPath,
    getTransformOptions: async () =&amp;gt; ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
  server: {
    // ...and to the server middleware.
    enhanceMiddleware: middleware =&amp;gt; {
      return androidAssetsResolutionFix.applyMiddleware(middleware)
    },
  },
  // Add additional Yarn workspace package roots to the module map.
  // This allows importing importing from all the project&amp;#39;s packages.
  watchFolders: monorepoMetroTools.watchFolders,
  resolver: {
    // Ensure we resolve nohoist libraries from this directory.
    blockList: exclusionList(monorepoMetroTools.blockList),
    extraNodeModules: monorepoMetroTools.extraNodeModules,
  },
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;루트에-스크립트-추가&quot; style=&quot;position:relative;&quot;&gt;루트에 스크립트 추가&lt;a href=&quot;#%EB%A3%A8%ED%8A%B8%EC%97%90-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;루트에 스크립트 추가 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;루트에서 각각의 프로젝트를 실행할 수 있도록 스크립트를 작성해보겠습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;json&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// react-native-monorepo/package.json
&amp;quot;scripts&amp;quot;: {
  &amp;quot;android:metro&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile start&amp;quot;,
  &amp;quot;android:start&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile android&amp;quot;,
  &amp;quot;android:studio&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile studio&amp;quot;,
  &amp;quot;ios:metro&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile start&amp;quot;,
  &amp;quot;ios:start&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile ios&amp;quot;,
  &amp;quot;ios:xcode&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile xcode&amp;quot;
},&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h4 id=&quot;ios-실행&quot; style=&quot;position:relative;&quot;&gt;ios 실행&lt;a href=&quot;#ios-%EC%8B%A4%ED%96%89&quot; aria-label=&quot;ios 실행 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;# packages/mobile/ios
$ pod install&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;만약 m1 유저라면&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ sudo arch -x86_64 gem install ffi
$ arch -x86_64 pod install&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;위 명령어를 실행해 pod을 설치합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;# 루트
$ yarn ios:start&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h4 id=&quot;android-실행&quot; style=&quot;position:relative;&quot;&gt;android 실행&lt;a href=&quot;#android-%EC%8B%A4%ED%96%89&quot; aria-label=&quot;android 실행 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;# 루트에서
$ yarn android:start&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;web-코드-생성&quot; style=&quot;position:relative;&quot;&gt;web 코드 생성&lt;a href=&quot;#web-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;web 코드 생성 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;웹에서 react-native를 사용하기 위해 react-native-web을 적극적으로 사용합니다.&lt;/p&gt;
&lt;p&gt;여기서는 CRA로 리액트 앱을 생성합니다.&lt;/p&gt;
&lt;p&gt;먼저 루트의 package.json에 nohoist를 수정합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;json&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;quot;nohoist&amp;quot;: [
  &amp;quot;**/react&amp;quot;,
  &amp;quot;**/react-dom&amp;quot;,
  &amp;quot;**/react-native&amp;quot;,
  &amp;quot;**/react-native/**&amp;quot;,
  &amp;quot;**/react-native-web&amp;quot;
]&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;그리고 packages 디렉토리에서 CRA로 프로젝트를 생성합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ npx create-react-app my-app &amp;amp;&amp;amp; mv my-app web&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;패키지 이름을 변경합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;json&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// react-native-monorepo/packages/web/package.json
&amp;quot;name&amp;quot;: &amp;quot;@react-native-monorepo/web&amp;quot;,&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;react-native-web을 설치합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ cd web &amp;amp;&amp;amp; yarn add react-native-web&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;웹 프로젝트 내에서 React Native 앱을 사용하기 위해 &lt;code class=&quot;language-text&quot;&gt;src/index.js&lt;/code&gt;를 수정합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;jsx&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;import React from &amp;quot;react&amp;quot;
import ReactDOM from &amp;quot;react-dom&amp;quot;
import &amp;quot;./index.css&amp;quot;
import { App } from &amp;quot;@react-native-monorepo/app&amp;quot; // 수정

ReactDOM.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;,
  document.getElementById(&amp;quot;root&amp;quot;)
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;CRA는 yarn workspace를 지원하지 않습니다. 따라서 외부 패키지를 가져올 수 있도록 craco를 설치합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;bash&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ yarn add -D @craco/craco react-native-monorepo-tools&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;그리고 &lt;code class=&quot;language-text&quot;&gt;packages/web&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;craco.config.js&lt;/code&gt; 파일을 생성합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;/* eslint-disable @typescript-eslint/no-var-requires */
const path = require(&amp;quot;path&amp;quot;)
const { getLoader, loaderByName } = require(&amp;quot;@craco/craco&amp;quot;)

const absolutePath = path.join(__dirname, &amp;quot;../core&amp;quot;)

module.exports = {
  webpack: {
    alias: {},
    plugins: [],
    configure: webpackConfig =&amp;gt; {
      const { isFound, match } = getLoader(
        webpackConfig,
        loaderByName(&amp;quot;babel-loader&amp;quot;)
      )
      if (isFound) {
        const include = Array.isArray(match.loader.include)
          ? match.loader.include
          : [match.loader.include]
        match.loader.include = include.concat[absolutePath]
      }
      return webpackConfig
    },
  },
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;그리고 &lt;code class=&quot;language-text&quot;&gt;web/package.json&lt;/code&gt;에서 script를 craco로 시작할 수 있도록 변경합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;json&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;@react-native-monorepo/web&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.0&amp;quot;,
  &amp;quot;private&amp;quot;: true,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;craco start&amp;quot;, // 수정
    &amp;quot;build&amp;quot;: &amp;quot;craco build&amp;quot;, // 수정
    &amp;quot;test&amp;quot;: &amp;quot;react-scripts test&amp;quot;,
    &amp;quot;eject&amp;quot;: &amp;quot;react-scripts eject&amp;quot;
  },&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;마지막으로 프로젝트 루트에 있는 package.json의 scripts를 수정해줍니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;json&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt; &amp;quot;scripts&amp;quot;: {
    &amp;quot;android:metro&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile start&amp;quot;,
    &amp;quot;android:start&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile android&amp;quot;,
    &amp;quot;android:studio&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile studio&amp;quot;,
    &amp;quot;ios:metro&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile start&amp;quot;,
    &amp;quot;ios:start&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile ios&amp;quot;,
    &amp;quot;ios:xcode&amp;quot;: &amp;quot;yarn workspace @react-native-monorepo/mobile xcode&amp;quot;,
    &amp;quot;web:start&amp;quot;: &amp;quot;yarn workspace @@react-native-monorepo/web start&amp;quot;, // 추가
    &amp;quot;web:build&amp;quot;: &amp;quot;yarn workspace @@react-native-monorepo/web build&amp;quot; // 추가
  }&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn web:start&lt;/code&gt;를 통해 실행할 수 있습니다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;참고&quot; style=&quot;position:relative;&quot;&gt;참고&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0&quot; aria-label=&quot;참고 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mmazzarolo/react-native-universal-monorepo&quot;&gt;mmazzarolo/react-native-universal-monorepo&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://classic.yarnpkg.com/lang/en/docs/workspaces/&quot;&gt;yarn workspaces&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://necolas.github.io/react-native-web/&quot;&gt;react native web&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Flutter] 다양한 버튼 사용하기]]></title><description><![CDATA[Flutter Buttons 사용하기 플러터는 다양한 버튼을 위젯으로 제공합니다. 이 코드를 기본으로 두고 시작해봅시다.
 TextButton TextButton…]]></description><link>https://yeony99.github.io/tech/flutter-use-several-buttons</link><guid isPermaLink="false">https://yeony99.github.io/tech/flutter-use-several-buttons</guid><pubDate>Fri, 07 Oct 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;flutter-buttons-사용하기&quot; style=&quot;position:relative;&quot;&gt;Flutter Buttons 사용하기&lt;a href=&quot;#flutter-buttons-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;flutter buttons 사용하기 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;플러터는 다양한 버튼을 위젯으로 제공합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: &amp;#39;MaterialApp&amp;#39;,
      home: Scaffold(
          appBar: AppBar(
            title: Text(&amp;#39;Flutter Buttons&amp;#39;),
            centerTitle: true,
          ),
          body: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: &amp;lt;Widget&amp;gt;[
                // Write your Buttons!
              ],
            ),
          )),
    );
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이 코드를 기본으로 두고 시작해봅시다.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;textbutton&quot; style=&quot;position:relative;&quot;&gt;TextButton&lt;a href=&quot;#textbutton&quot; aria-label=&quot;textbutton permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TextButton은 이름 그대로 버튼으로 동작하는 텍스트입니다.&lt;br&gt;
테두리가 보이지 않아, 주의해서 배치해야합니다.&lt;/p&gt;
&lt;p&gt;TextButton은 이렇게 구성됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const TextButton({
  Key? key,
  required void Function()? onPressed,
  void Function()? onLongPress,
  void Function(bool)? onHover,
  void Function(bool)? onFocusChange,
  ButtonStyle? style,
  FocusNode? focusNode,
  bool autofocus = false,
  Clip clipBehavior = Clip.none,
  required Widget child,
})&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;예시를 살펴봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt; body: Center(
  child: Column(
    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
    children: &amp;lt;Widget&amp;gt;[
      TextButton(
        style: TextButton.styleFrom(
          textStyle: const TextStyle(fontSize: 20),
        ),
        onPressed: null,
        child: const Text(&amp;#39;Disabled&amp;#39;),
      ),
      TextButton(
        style: TextButton.styleFrom(
          textStyle: const TextStyle(fontSize: 20),
        ),
        onPressed: () {},
        child: const Text(&amp;#39;Click Me!&amp;#39;),
      ),
      TextButton(
        style: TextButton.styleFrom(
          backgroundColor: Colors.amber,
          primary: Colors.white,
          textStyle: const TextStyle(fontSize: 20),
        ),
        onPressed: () {},
        child: const Text(&amp;#39;Set primary!&amp;#39;),
      ),
    ],
  ),
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;화면에는 이렇게 보여집니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/194450721-5f36a597-550c-4f18-9a5e-1c25c712beef.png&quot; alt=&quot;flutter TextButton&quot;&gt;&lt;/p&gt;
&lt;p&gt;TextButton에서 글자색상을 변경할 경우에는 &lt;code class=&quot;language-text&quot;&gt;TextButton.styleFrom&lt;/code&gt;에서 primary 속성을 지정해 변경할 수 있습니다.&lt;/p&gt;
&lt;p&gt;보다 자세한 색상 변경에 관해서는 &lt;a href=&quot;https://www.flutterbeads.com/text-button-color-in-flutter/&quot;&gt;Changing Text Button Color in Flutter – The Right Way in 2022&lt;/a&gt; 를 참고해주세요.&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&quot;elevatedbutton&quot; style=&quot;position:relative;&quot;&gt;ElevatedButton&lt;a href=&quot;#elevatedbutton&quot; aria-label=&quot;elevatedbutton permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ElevatedButton은 오른쪽과 아래쪽으로 그림자가 생겨 버튼이 주변과 구분됩니다.&lt;/p&gt;
&lt;p&gt;이렇게 구성됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const ElevatedButton({
  Key? key,
  required VoidCallback? onPressed,
  VoidCallback? onLongPress,
  ValueChanged&amp;lt;bool&amp;gt;? onHover,
  ValueChanged&amp;lt;bool&amp;gt;? onFocusChange,
  ButtonStyle? style,
  FocusNode? focusNode,
  bool autofocus = false,
  Clip clipBehavior = Clip.none,
  required Widget? child,
})&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;예제는 TextButton과 큰 차이가 없습니다. 다만 명확하게 border가 있어 구분됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt; body: Center(
  child: Column(
    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
    children: &amp;lt;Widget&amp;gt;[
      ElevatedButton(
        style: TextButton.styleFrom(
          textStyle: const TextStyle(fontSize: 20),
        ),
        onPressed: null,
        child: const Text(&amp;#39;Disabled&amp;#39;),
      ),
      ElevatedButton(
        style: TextButton.styleFrom(
          textStyle: const TextStyle(fontSize: 20),
        ),
        onPressed: () {},
        child: const Text(&amp;#39;Click Me!&amp;#39;),
      ),
      ElevatedButton(
        style: ElevatedButton.styleFrom(
          primary: Colors.amber,
          textStyle: const TextStyle(fontSize: 20),
        ),
        onPressed: () {},
        child: const Text(&amp;#39;Set primary!&amp;#39;),
      ),
    ],
  ),
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ElevatedButton.styleFfrom&lt;/code&gt; 으로 스타일을 지정합니다. TextButton과 다르게 primary를 지정하면 배경색이 바뀝니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/194460842-ba2965a7-3654-4b38-8f66-55846cdfb5b4.png&quot; alt=&quot;Flutter ElevatedButton&quot;&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&quot;outlinedbutton&quot; style=&quot;position:relative;&quot;&gt;OutlinedButton&lt;a href=&quot;#outlinedbutton&quot; aria-label=&quot;outlinedbutton permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;이름 그대로 테두리가 있는 버튼입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const OutlinedButton({
  Key? key,
  required VoidCallback? onPressed,
  VoidCallback? onLongPress,
  ValueChanged&amp;lt;bool&amp;gt;? onHover,
  ValueChanged&amp;lt;bool&amp;gt;? onFocusChange,
  ButtonStyle? style,
  FocusNode? focusNode,
  bool autofocus = false,
  Clip clipBehavior = Clip.none,
  required Widget child,
})&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;앞선 버튼들과 크게 다르지 않지만, 테두리 색상이 기본적으로 회색으로 지정되어 있습니다.
&lt;code class=&quot;language-text&quot;&gt;side: BorderSide(widht: 2.0, color: Colors.amber)&lt;/code&gt; 등으로 속성을 지정하면 테두리 색깔을 바꿀 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt; body: Center(
    child: Column(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: &amp;lt;Widget&amp;gt;[
        OutlinedButton(
          style: OutlinedButton.styleFrom(
            textStyle: const TextStyle(fontSize: 20),
          ),
          onPressed: null,
          child: const Text(&amp;#39;Disabled&amp;#39;),
        ),
        OutlinedButton(
          style: OutlinedButton.styleFrom(
            textStyle: const TextStyle(fontSize: 20),
          ),
          onPressed: () {},
          child: const Text(&amp;#39;Click Me!&amp;#39;),
        ),
        OutlinedButton(
          style: OutlinedButton.styleFrom(
            primary: Colors.amber,
            // Border Style 변경
            side: BorderSide(width: 2.0, color: Colors.amber),
            textStyle: const TextStyle(fontSize: 20),
          ),
          onPressed: () {},
          child: const Text(&amp;#39;Set primary!&amp;#39;),
        ),
      ],
    ),
  )
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/194468926-efe48563-af80-4709-bb37-aeb53d42a1f9.png&quot; alt=&quot;Flutter OutlinedButton&quot;&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&quot;iconbutton&quot; style=&quot;position:relative;&quot;&gt;IconButton&lt;a href=&quot;#iconbutton&quot; aria-label=&quot;iconbutton permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;아이콘으로 버튼을 만들 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const IconButton({
  Key? key,
  this.iconSize,
  this.visualDensity,
  this.padding = const EdgeInsets.all(8.0),
  this.alignment = Alignment.center,
  this.splashRadius,
  this.color,
  this.focusColor,
  this.hoverColor,
  this.highlightColor,
  this.splashColor,
  this.disabledColor,
  required this.onPressed,
  this.mouseCursor,
  this.focusNode,
  this.autofocus = false,
  this.tooltip,
  this.enableFeedback = true,
  this.constraints,
  required this.icon,
})&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;body: Center(
  child: Column(
    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
    children: &amp;lt;Widget&amp;gt;[
      IconButton(
        icon: const Icon(Icons.arrow_back),
        onPressed: null,
      ),
      IconButton(
        icon: const Icon(Icons.arrow_forward),
        onPressed: () {},
      ),
      IconButton(
        icon: const Icon(Icons.alarm_add),
        onPressed: () {},
      ),
    ],
  ),
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/194475945-2e87a65d-cf96-4875-825a-fe3462757f12.png&quot; alt=&quot;Flutter IconButton&quot;&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&quot;floatingactionbutton&quot; style=&quot;position:relative;&quot;&gt;FloatingActionButton&lt;a href=&quot;#floatingactionbutton&quot; aria-label=&quot;floatingactionbutton permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;FloatingActionButton&lt;/code&gt;은 둥둥 떠있는 버튼입니다.&lt;/p&gt;
&lt;p&gt;이 버튼을 사용하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;Scaffold&lt;/code&gt; 위젯에 &lt;code class=&quot;language-text&quot;&gt;floatingActionButton&lt;/code&gt; 속성을 추가해야 합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Scaffold(
  floatingActionButton: FloatingActionButton(),
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이렇게 아이콘을 지정할 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;floatingActionButton: FloatingActionButton(
  onPressed: () {},
  child: const Icon(Icons.thumb_up),
  backgroundColor: Colors.pink,
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/194480681-d2b0b282-2867-47ae-bcd3-df9d74fffadb.png&quot; alt=&quot;Flutter FloatingActionButton&quot;&gt;&lt;/p&gt;
&lt;p&gt;만약 버튼에 label을 넣고 싶다면, &lt;code class=&quot;language-text&quot;&gt;FloatingActionButton.extended&lt;/code&gt;를 이용해 작성합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;floatingActionButton: FloatingActionButton.extended(
  onPressed: () {},
  icon: Icon(Icons.thumb_up),
  label: Text(&amp;#39;Thumb Up!&amp;#39;),
  backgroundColor: Colors.pink,
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/194481144-024867c9-3ebd-4efb-8303-915475bad22c.png&quot; alt=&quot;Flutter FloatingActionButton extended&quot;&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&quot;popupmenubutton&quot; style=&quot;position:relative;&quot;&gt;PopupMenuButton&lt;a href=&quot;#popupmenubutton&quot; aria-label=&quot;popupmenubutton permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;이 버튼을 사용하려면 &lt;code class=&quot;language-text&quot;&gt;Scaffold&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;AppBar&lt;/code&gt; 위젯에 actions 속성을 추가합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Scaffold(
  appBar: AppBar(
    title: Text(&amp;#39;Flutter Buttons&amp;#39;),
    centerTitle: true,
    actions: [
      PopupMenuButton(
          itemBuilder: (context) =&amp;gt; [
                PopupMenuItem(
                  child: Text(&amp;quot;First&amp;quot;),
                  value: 1,
                ),
                PopupMenuItem(
                  child: Text(&amp;quot;Second&amp;quot;),
                  value: 2,
                )
              ])
    ],
  ),
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/194481812-9aaa08f3-8760-4c9e-a3f2-97e10bde5867.png&quot; alt=&quot;Flutter PopupMenuButton closed&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/194481750-70fc7ba9-7b99-4ebe-ac1b-0030b62c4f8e.png&quot; alt=&quot;Flutter PopupMenuButton opened&quot;&gt; 
&lt;h3 id=&quot;dropdownbutton&quot; style=&quot;position:relative;&quot;&gt;DropdownButton&lt;a href=&quot;#dropdownbutton&quot; aria-label=&quot;dropdownbutton permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;web의 select 기능을 하는 버튼입니다. Dropdown을 사용하기 위해서는 먼저 StatefulWidget으로 변경합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;DropdownButton({
  Key key, 
  @required List&amp;lt;DropdownMenuItem&amp;lt;T&amp;gt;&amp;gt; items, 
  DropdownButtonBuilder selectedItemBuilder, 
  T value, 
  Widget hint, 
  Widget disabledHint, 
  @required ValueChanged&amp;lt;T&amp;gt; onChanged, 
  VoidCallback onTap, 
  int elevation: 8, 
  TextStyle style, 
  Widget underline, 
  Widget icon, 
  Color iconDisabledColor, 
  Color iconEnabledColor, 
  double iconSize: 24.0, 
  bool isDense: false, 
  bool isExpanded: false, 
  double itemHeight: kMinInteractiveDimension,
  Color focusColor, 
  FocusNode focusNode, 
  bool autofocus: false, 
  Color dropdownColor
})&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;StatefulWidget으로 바꾸는 이유는 DropdownButton으로 선택된 값이라는 &lt;strong&gt;상태 변화&lt;/strong&gt;가 있기 때문입니다.&lt;/p&gt;
&lt;p&gt;Stateless에서도 DropdownButton을 그릴 수는 있지만, setState를 사용하지 못하기 때문에 의미가 없습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: &amp;#39;MaterialApp&amp;#39;,
      home: const MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key}) : super(key: key);

  @override
  _MyHomePageState createState() =&amp;gt; _MyHomePageState();
}

class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; {
// Initial Selected Value
  String dropdownvalue = &amp;#39;Item 1&amp;#39;;

// List of items in our dropdown menu
  var items = [
    &amp;#39;Item 1&amp;#39;,
    &amp;#39;Item 2&amp;#39;,
    &amp;#39;Item 3&amp;#39;,
    &amp;#39;Item 4&amp;#39;,
    &amp;#39;Item 5&amp;#39;,
  ];
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(&amp;#39;Flutter Buttons&amp;#39;),
        centerTitle: true,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            DropdownButton(
              // Initial Value
              value: dropdownvalue,

              // Down Arrow Icon
              icon: const Icon(Icons.keyboard_arrow_down),

              // Array list of items
              items: items.map((String items) {
                return DropdownMenuItem(
                  value: items,
                  child: Text(items),
                );
              }).toList(),
              // After selecting the desired option,it will
              // change button value to selected value
              onChanged: (String? newValue) {
                setState(() {
                  dropdownvalue = newValue!;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;onpressed-null-or--&quot; style=&quot;position:relative;&quot;&gt;onPressed null or () {}&lt;a href=&quot;#onpressed-null-or--&quot; aria-label=&quot;onpressed null or   permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;버튼에서는 &lt;code class=&quot;language-text&quot;&gt;onPressed&lt;/code&gt; 라는 클릭 이벤트를 정의할 수 있습니다.&lt;/p&gt;
&lt;p&gt;위의 예제에서는 onPressed를 &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;로 두는 경우와, &lt;code class=&quot;language-text&quot;&gt;() {}&lt;/code&gt; 로 두는 경우가 있었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;null : disabled&lt;/li&gt;
&lt;li&gt;() {} : 클릭시 실행될 함수를 정의하지 않은 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 차이가 있습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/flutter-use-several-widgets&quot;&gt;[Flutter] 다양한 위젯 사용하기&lt;/a&gt; 👈 이전 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (11) - 자바스크립트 제어문(1) - 조건문]]></title><description><![CDATA[자바스크립트에서는 조건문, 반복문 등의 제어문(control flow statement…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-js-control-flow-statement-conditional</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-js-control-flow-statement-conditional</guid><pubDate>Wed, 05 Oct 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트에서는 조건문, 반복문 등의 제어문(control flow statement)이 있습니다. 제어문은 특정한 &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-control-flow-statement#%EC%BD%94%EB%93%9C%EB%B8%94%EB%A1%9D&quot;&gt;&lt;strong&gt;코드블록&lt;/strong&gt;&lt;/a&gt;을 조건에 따라 실행하거나, 반복실행합니다.&lt;/p&gt;
&lt;p&gt;프로그램은 위에서부터 아래로 순차적으로 실행되지만, 이런 제어문을 사용하면 실행 흐름을 조작할 수 있습니다.&lt;/p&gt;
&lt;div style=&quot;background-color: #eee; border-radius: 1rem; font-size: 0.9rem; padding: 1rem&quot;&gt;
&lt;h6&gt;❕ 참고&lt;/h6&gt;
실행 흐름을 인위적으로 조작하는 것은 프로그램의 흐름을 알기 어렵고, 가독성을 해치기도 합니다. 따라서 요즈음 함수형 프로그래밍에서는 제어문 사용을 지양하고, 고차함수를 사용하는 등의 방법을 택하고 있습니다.
&lt;/div&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;코드블록&quot; style=&quot;position:relative;&quot;&gt;코드블록&lt;a href=&quot;#%EC%BD%94%EB%93%9C%EB%B8%94%EB%A1%9D&quot; aria-label=&quot;코드블록 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;코드블록은 &lt;code class=&quot;language-text&quot;&gt;{}&lt;/code&gt; 로 감싸져 있는 &lt;strong&gt;하나의 실행 단위&lt;/strong&gt;를 의미합니다. 블록은 조건문이나 반복문 없이 단독으로도 사용될 수 있습니다. 다만 대부분 조건문, 반복문, 함수 선언문과 함께 사용합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// 코드블록
{
  let foo = 100
}

let x = 10
if (x &amp;gt; 9) {
  console.log(&amp;quot;wow!&amp;quot;)
}

for (let i = 0; i &amp;lt; 4; i++) {
  console.log(i) // 0 1 2 3
}

function sum(a, b) {
  return a + b
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;블록-스코프&quot; style=&quot;position:relative;&quot;&gt;블록 스코프&lt;a href=&quot;#%EB%B8%94%EB%A1%9D-%EC%8A%A4%EC%BD%94%ED%94%84&quot; aria-label=&quot;블록 스코프 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;소스코드를 작성했을 때, 소스코드의 범위를 &lt;strong&gt;스코프(scope)&lt;/strong&gt; 라고 합니다.&lt;/p&gt;
&lt;p&gt;스코프는 식별자 접근 규칙에 따라 달라지는 식별자의 유효 범위입니다. 코드블록도 &lt;strong&gt;블록 스코프&lt;/strong&gt;인데요. 간단히 말하자면 블록 내에서 선언된 변수는 블록 내에서만 유효하다는 것입니다.&lt;br&gt;
식별자에 따라 유효범위가 어떻게 달라지는지는 이후에 스코프를 배워보며 더 자세히 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;여기서는 &lt;code class=&quot;language-text&quot;&gt;{}&lt;/code&gt; 블록으로 나누어지는 것이 &lt;strong&gt;실행 단위&lt;/strong&gt;라는 점만 기억하고 넘어갑시다.&lt;/p&gt;
&lt;h3 id=&quot;조건문-conditional-statement&quot; style=&quot;position:relative;&quot;&gt;조건문 (Conditional Statement)&lt;a href=&quot;#%EC%A1%B0%EA%B1%B4%EB%AC%B8-conditional-statement&quot; aria-label=&quot;조건문 conditional statement permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;조건문은 조건식의 평가 결과에 따라 코드블록의 실행 여부를 결정합니다.&lt;/p&gt;
&lt;p&gt;조건식은 &lt;code class=&quot;language-text&quot;&gt;if ... else&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;switch&lt;/code&gt; 로 작성합니다.&lt;/p&gt;
&lt;h4 id=&quot;ifelse-문&quot; style=&quot;position:relative;&quot;&gt;if...else 문&lt;a href=&quot;#ifelse-%EB%AC%B8&quot; aria-label=&quot;ifelse 문 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;if (조건식) {
  // 조건식이 true이면 실행
} else {
  // 조건식이 false이면 실행
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; 뒤 괄호()에는 조건식을 넣어줍니다. 조건문은 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;로 동작을 제어하기 때문에, if문에 들어갈 조건식은 &lt;strong&gt;값&lt;/strong&gt;으로 평가될 수 있어야 합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let x = 10

if (x &amp;gt; 9) {
  console.log(&amp;quot;greater than 9&amp;quot;)
} else {
  console.log(&amp;quot;less than or equal to 9&amp;quot;)
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;위 소스코드의 조건식은 &lt;code class=&quot;language-text&quot;&gt;x &gt; 9&lt;/code&gt;로, true가 됩니다.&lt;br&gt;
그럼 만약 조건식이 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;인 boolean 값이 아닐 경우엔 어떻게 될까요?&lt;/p&gt;
&lt;p&gt;자바스크립트의 &lt;strong&gt;암묵적 형변환&lt;/strong&gt;에 의해 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt; 값으로 치환되어 조건문이 실행되게 합니다.&lt;/p&gt;
&lt;p&gt;만약 여러 조건에 따라 실행될 코드를 추가하고 싶다면 &lt;code class=&quot;language-text&quot;&gt;else if&lt;/code&gt;를 추가로 작성할 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;if (조건식1) {
} else if (조건식2) {
} else {
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;else if&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;else&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;if...else&lt;/code&gt; 조건문에서 선택적입니다. 또한 &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;else&lt;/code&gt;는 한번 밖에 사용할 수 없지만, &lt;code class=&quot;language-text&quot;&gt;else if&lt;/code&gt;는 하나의 조건문 내에서 여러 번 사용될 수 있습니다.&lt;/p&gt;
&lt;p&gt;다만 else if를 과도하게 많이 사용하는 것은 추천하는 방식이 아닙니다. &lt;code class=&quot;language-text&quot;&gt;else if&lt;/code&gt;는 기본적으로 아래 코드와 같습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;if (조건식1) {
} else {
  if (조건식2) {
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; 조건식1의 평가 걀과가 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;일 때, &lt;strong&gt;그리고&lt;/strong&gt; 조건식2가 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 일때 실행되는 것입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let x = 10

// if 조건문1
if (x &amp;gt; 9) {
  console.log(&amp;quot;9보다 큼&amp;quot;)
} else if (x &amp;gt; 8) {
  console.log(&amp;quot;8보다 큼&amp;quot;)
} else {
  console.log(&amp;quot;???&amp;quot;)
}

//if 조건문2
if (x &amp;gt; 9) {
  console.log(&amp;quot;9보다 큼&amp;quot;)
} else {
  if (x &amp;gt; 8) {
    console.log(&amp;quot;8보다 큼&amp;quot;)
  }
  console.log(&amp;quot;???&amp;quot;)
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;위 코드를 실행하면 콘솔에 찍힐 내용은 무엇일까요? 조건문1, 2 둘다 &lt;strong&gt;9보다 큼&lt;/strong&gt;이 출력됩니다.&lt;/p&gt;
&lt;p&gt;왜냐하면 이미 &lt;code class=&quot;language-text&quot;&gt;if(x &gt; 9)&lt;/code&gt; 라는 조건이 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;로 평가되고, 해당 코드블록의 코드가 실행되었기 때문입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;if...else&lt;/code&gt; 조건문을 사용할 때에 아무리 &lt;code class=&quot;language-text&quot;&gt;else if&lt;/code&gt;의 조건식이 참이더라도, &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt;의 조건식이 이미 참이면 &lt;code class=&quot;language-text&quot;&gt;else if&lt;/code&gt;의 코드블록은 영원히 실행되지 않습니다.&lt;/p&gt;
&lt;p&gt;지나치게 많은 조건들을 나열해 코드를 작성한다면, 어떤 코드블록이 실행될 지 예측하기 어렵겠죠? 따라서 과도한 &lt;code class=&quot;language-text&quot;&gt;if...else&lt;/code&gt;문 사용은 지양하는 것이 좋습니다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h4 id=&quot;switch-문&quot; style=&quot;position:relative;&quot;&gt;switch 문&lt;a href=&quot;#switch-%EB%AC%B8&quot; aria-label=&quot;switch 문 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;switch&lt;/code&gt;문은 표현식을 평가해 그 값과 일치하는 &lt;code class=&quot;language-text&quot;&gt;case&lt;/code&gt;문으로 흐름을 제어하는 조건문입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;case&lt;/code&gt;는 특정한 케이스일 경우~ 를 의미합니다. &lt;code class=&quot;language-text&quot;&gt;default&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;case&lt;/code&gt;에 하나도 부합하지 않으면 기본적으로 실행될 동작을 작성합니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;break&lt;/code&gt;는 일치하는 케이스를 찾았을 경우 실행을 멈추게 합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;switch(표현식) {
  case 표현식1: 실행될 문1
    break;
  case 표현식2: 실행될 문2
    break;
  default: 일치하는 case가 없으면 실행될 문
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;if...else문의 조건식은 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;로 평가되는 boolean 값이었는데요. switch 문에서의 표현식은 &lt;strong&gt;문자열&lt;/strong&gt;이나 &lt;strong&gt;숫자&lt;/strong&gt;가 많습니다. 표현식의 문자와 case가 맞을 때 실행되는 것이죠.&lt;/p&gt;
&lt;p&gt;예제로 한번 살펴보겠습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let day = &amp;quot;&amp;quot;

// getDay()는 일주일의 요일을 0부터 6까지의 숫자로 반환합니다.
// 일요일 = 0, 월요일 = 1 ...
switch (new Date(&amp;quot;2022-10-05&amp;quot;).getDay()) {
  case 0:
    day = &amp;quot;일&amp;quot;
  case 1:
    day = &amp;quot;월&amp;quot;
  case 2:
    day = &amp;quot;화&amp;quot;
  case 3:
    day = &amp;quot;수&amp;quot;
  case 4:
    day = &amp;quot;목&amp;quot;
  case 5:
    day = &amp;quot;금&amp;quot;
  case 6:
    day = &amp;quot;토&amp;quot;
  default:
    day = &amp;quot;유효하지 않은 요일!!&amp;quot;
}

console.log(day)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이렇게 작성을 해보았습니다. 글을 올린 오늘(22년 10월 5일)은 수요일입니다. &lt;code class=&quot;language-text&quot;&gt;day&lt;/code&gt;는 무엇으로 출력될까요?&lt;/p&gt;
&lt;p&gt;결과는 &lt;code class=&quot;language-text&quot;&gt;유효하지 않은 요일!!&lt;/code&gt;입니다. 분명 case에서 3과 일치했을텐데 왜 default의 값이 출력되는걸까요?&lt;/p&gt;
&lt;p&gt;바로 &lt;strong&gt;break&lt;/strong&gt;가 없기 때문입니다. &lt;code class=&quot;language-text&quot;&gt;switch&lt;/code&gt;문은 기본적으로 표현식과 모든 case문을 한 번씩 대조합니다. 위 코드에서는 &lt;code class=&quot;language-text&quot;&gt;case 0&lt;/code&gt;부터 시작해 &lt;code class=&quot;language-text&quot;&gt;case 3&lt;/code&gt;에서 일치하는 케이스를 찾았지만, 그 다음 &lt;code class=&quot;language-text&quot;&gt;case 4&lt;/code&gt;... &lt;code class=&quot;language-text&quot;&gt;default&lt;/code&gt;까지 멈추지 않고 계속 실행된 것입니다.&lt;/p&gt;
&lt;p&gt;따라서 일치하는 결과를 찾았으면 case를 찾는 것을 &lt;strong&gt;멈춰야&lt;/strong&gt; 합니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;break&lt;/code&gt;문을 작성한 코드를 확인해봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;switch (new Date(&amp;quot;2022-10-05&amp;quot;).getDay()) {
  case 0:
    day = &amp;quot;일&amp;quot;
    break
  case 1:
    day = &amp;quot;월&amp;quot;
    break
  case 2:
    day = &amp;quot;화&amp;quot;
    break
  case 3:
    day = &amp;quot;수&amp;quot;
    break
  case 4:
    day = &amp;quot;목&amp;quot;
    break
  case 5:
    day = &amp;quot;금&amp;quot;
    break
  case 6:
    day = &amp;quot;토&amp;quot;
    break
  default:
    day = &amp;quot;유효하지 않은 요일!!&amp;quot;
}

console.log(day) // 수&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;잘 출력되는 것을 볼 수 있습니다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h3 id=&quot;결론&quot; style=&quot;position:relative;&quot;&gt;결론&lt;a href=&quot;#%EA%B2%B0%EB%A1%A0&quot; aria-label=&quot;결론 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;만약 if...else 문으로 해결할 수 있다면 switch문 보다는 if...else문이 좋습니다. 다만 앞서 말했다시피, &lt;code class=&quot;language-text&quot;&gt;else if&lt;/code&gt;가 많아져 가독성이 떨어지게 되는 경우는 switch 문으로 전환하는 것이 효과적입니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 제어문 (2), 반복문에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-value-expression-statement&quot;&gt;자바스크립트 연산자&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-control-flow-statement-loop&quot;&gt;자바스크립트 제어문(2) - 반복문&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[프로바이더 패턴]]></title><description><![CDATA[프로바이더 패턴 (Provider Pattern…]]></description><link>https://yeony99.github.io/tech/react-pattern-provider</link><guid isPermaLink="false">https://yeony99.github.io/tech/react-pattern-provider</guid><pubDate>Sat, 01 Oct 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;프로바이더-패턴-provider-pattern&quot; style=&quot;position:relative;&quot;&gt;프로바이더 패턴 (Provider Pattern)&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EB%B0%94%EC%9D%B4%EB%8D%94-%ED%8C%A8%ED%84%B4-provider-pattern&quot; aria-label=&quot;프로바이더 패턴 provider pattern permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;여러 컴포넌트들이 데이터를 공유해서 사용해야 하는 경우에 사용할 수 있는 패턴입니다.&lt;/p&gt;
&lt;p&gt;보통 컴포넌트 간에 데이터 전달이 필요하면 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;를 통해서 전달합니다. 하지만 앱 내의 모든 컴포넌트들이 데이터에 접근해야 한다면 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;만으로는 한계가 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;prop-drilling-안티-패턴&quot; style=&quot;position:relative;&quot;&gt;prop drilling 안티 패턴&lt;a href=&quot;#prop-drilling-%EC%95%88%ED%8B%B0-%ED%8C%A8%ED%84%B4&quot; aria-label=&quot;prop drilling 안티 패턴 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;리액트 컴포넌트 트리에서 props로 데이터를 전달하기 위해 사용하는 것입니다. 다만 props를 &lt;strong&gt;하위 컴포넌트로 전달하는 용도로만&lt;/strong&gt; 사용하는 경우에 이것을 prop drilling이라고 부릅니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;function App() {
  const data = { ... }

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;SideBar data={data} /&amp;gt;
      &amp;lt;Content data={data} /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

const SideBar = ({ data }) =&amp;gt; &amp;lt;List data={data} /&amp;gt;
const List = ({ data }) =&amp;gt; &amp;lt;ListItem data={data} /&amp;gt;
const ListItem = ({ data }) =&amp;gt; &amp;lt;span&amp;gt;{data.listItem}&amp;lt;/span&amp;gt;

const Content = ({ data }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;Header data={data} /&amp;gt;
    &amp;lt;Block data={data} /&amp;gt;
  &amp;lt;/div&amp;gt;
)
const Header = ({ data }) =&amp;gt; &amp;lt;div&amp;gt;{data.title}&amp;lt;/div&amp;gt;
const Block = ({ data }) =&amp;gt; &amp;lt;Text data={data} /&amp;gt;
const Text = ({ data }) =&amp;gt; &amp;lt;h1&amp;gt;{data.text}&amp;lt;/h1&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;위 코드에서 &lt;code class=&quot;language-text&quot;&gt;Sidebar&lt;/code&gt;는 data를 prop으로 전달받지만, 정작 자기 자신 내에서는 사용하지 않고 &lt;code class=&quot;language-text&quot;&gt;List&lt;/code&gt; 컴포넌트로 보냅니다. 또 이 &lt;code class=&quot;language-text&quot;&gt;List&lt;/code&gt; 컴포넌트를 &lt;code class=&quot;language-text&quot;&gt;ListItem&lt;/code&gt; 컴포넌트로 보내기 위해서만 prop을 받습니다.&lt;/p&gt;
&lt;p&gt;이런 방식으로 props를 &lt;em&gt;내리꽂는&lt;/em&gt; 것은 꽤 지저분합니다. 만약 &lt;code class=&quot;language-text&quot;&gt;data&lt;/code&gt; 라는 프로퍼티 이름을 변경해야 하는 경우 모든 컴포넌트를 수정하게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Provider 패턴&lt;/strong&gt;은 이런 안티 패턴을 해결하는 경우에 유용합니다.&lt;/p&gt;
&lt;h3 id=&quot;provider-패턴-사용하기&quot; style=&quot;position:relative;&quot;&gt;Provider 패턴 사용하기&lt;a href=&quot;#provider-%ED%8C%A8%ED%84%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;provider 패턴 사용하기 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;먼저 React의 Context에 대해 알아보겠습니다.&lt;/p&gt;
&lt;h4 id=&quot;react-context&quot; style=&quot;position:relative;&quot;&gt;React Context&lt;a href=&quot;#react-context&quot; aria-label=&quot;react context permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;리액트에는 Context가 있습니다. 리액트 공식문서 &lt;a href=&quot;https://ko.reactjs.org/docs/context.html&quot;&gt;Context&lt;/a&gt;를 보면, &lt;strong&gt;트리 단계마다 명시적으로 props를 넘겨주지 않아도 많은 컴포넌트가 이러한 값을 공유&lt;/strong&gt;할 수 있게 한다고 설명하고 있습니다.&lt;/p&gt;
&lt;p&gt;이런 Context는 &lt;strong&gt;컴포넌트 트리 속에서&lt;/strong&gt; 전역적인 데이터를 공유할 때 사용합니다.&lt;/p&gt;
&lt;h4 id=&quot;provider-컴포넌트-동작&quot; style=&quot;position:relative;&quot;&gt;Provider 컴포넌트 동작&lt;a href=&quot;#provider-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;provider 컴포넌트 동작 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const DataContext = React.createContext()

function App() {
  const data = { ... }

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;DataContext.Provider value={data}&amp;gt;
        &amp;lt;SideBar /&amp;gt;
        &amp;lt;Content /&amp;gt;
      &amp;lt;/DataContext.Provider&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;React.createContext로 &lt;code class=&quot;language-text&quot;&gt;Context&lt;/code&gt; 객체를 생성합니다.&lt;/li&gt;
&lt;li&gt;데이터를 공유할 모든 컴포넌트를 &lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt;로 감쌉니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;라는 이름의 prop으로 하위 컴포넌트에 넘겨줄 데이터를 받습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const DataContext = React.createContext();

function App() {
  const data = { ... }

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;SideBar /&amp;gt;
      &amp;lt;Content /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

const SideBar = () =&amp;gt; &amp;lt;List /&amp;gt;
const List = () =&amp;gt; &amp;lt;ListItem /&amp;gt;
const Content = () =&amp;gt; &amp;lt;div&amp;gt;&amp;lt;Header /&amp;gt;&amp;lt;Block /&amp;gt;&amp;lt;/div&amp;gt;

function ListItem() {
  const { data } = React.useContext(DataContext);
  return &amp;lt;span&amp;gt;{data.listItem}&amp;lt;/span&amp;gt;;
}

function Text() {
  const { data } = React.useContext(DataContext);
  return &amp;lt;h1&amp;gt;{data.text}&amp;lt;/h1&amp;gt;;
}

function Header() {
  const { data } = React.useContext(DataContext);
  return &amp;lt;div&amp;gt;{data.title}&amp;lt;/div&amp;gt;;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;prop을 받을 하위 컴포넌트들은 React의 &lt;code class=&quot;language-text&quot;&gt;useContext&lt;/code&gt; 메소드를 활용해 data에 접근합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;hooks&quot; style=&quot;position:relative;&quot;&gt;Hooks&lt;a href=&quot;#hooks&quot; aria-label=&quot;hooks permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;위 코드에서는 각 컴포넌트들이 &lt;code class=&quot;language-text&quot;&gt;useContext&lt;/code&gt;를 직접 import해 사용하였습니다. 이를 대신해 필요로 하는 Context를 직접 반환하는 Hook을 구현할 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// theme 변경 hook

function useThemeContext() {
  const theme = useContext(ThemeContext)
  if (!theme) {
    throw new Error(&amp;#39;useThemeContext must be used within ThemeProvider&amp;#39;)
  }
  return theme
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;컴포넌트를 &lt;code class=&quot;language-text&quot;&gt;ThemeContext.Provider&lt;/code&gt;로 직접 래핑하지 않고, HOC(고차 컴포넌트)로 만들면 Context 로직과 렌더링 로직이 분리되어 재사용성이 증가합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// Context 부
function ThemeProvider({ children }) {
  const [theme, setTheme] = useState(&amp;#39;dark&amp;#39;)

  function toggleTheme() {
    setTheme(theme === &amp;#39;light&amp;#39; ? &amp;#39;dark&amp;#39; : &amp;#39;light&amp;#39;)
  }

  const providerValue = {
    theme: themes[theme],
    toggleTheme,
  }

  return (
    &amp;lt;ThemeContext.Provider value={providerValue}&amp;gt;
      {children}
    &amp;lt;/ThemeContext.Provider&amp;gt;
  )
}

// 렌더링 부
export default function App() {
  return (
    &amp;lt;div className={`App theme-${theme}`}&amp;gt;
      &amp;lt;ThemeProvider&amp;gt;
        &amp;lt;Toggle /&amp;gt;
        &amp;lt;List /&amp;gt;
      &amp;lt;/ThemeProvider&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;하위 컴포넌트들은 &lt;code class=&quot;language-text&quot;&gt;ThemeContext&lt;/code&gt;에 접근하기 위해 &lt;code class=&quot;language-text&quot;&gt;useThemeContext&lt;/code&gt;를 사용하면 됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;export default function TextBox() {
  const theme = useThemeContext()

  return &amp;lt;li style={theme.theme}&amp;gt;...&amp;lt;/li&amp;gt;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;provider-패턴을-사용하는-때&quot; style=&quot;position:relative;&quot;&gt;Provider 패턴을 사용하는 때&lt;a href=&quot;#provider-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%95%8C&quot; aria-label=&quot;provider 패턴을 사용하는 때 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;프로바이더 패턴은 필요한 컴포넌트에서 필요한 데이터를 전역적으로 접근할 수 있어 유용합니다.&lt;/p&gt;
&lt;p&gt;보통 UI테마를 여러 컴포넌트들이 공유해 사용할 때 이 패턴을 사용합니다. (ex. 다크모드 / 라이트모드)&lt;/p&gt;
&lt;h2 id=&quot;장단점&quot; style=&quot;position:relative;&quot;&gt;장/단점&lt;a href=&quot;#%EC%9E%A5%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;장단점 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;장점&quot; style=&quot;position:relative;&quot;&gt;장점&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트 트리의 각각 노드에 데이터를 전달하지 않아도 다수 컴포넌트에 데이터 공유 가능&lt;/li&gt;
&lt;li&gt;리팩토링 과정에서 개발자가 실수할 확률을 줄여줌&lt;/li&gt;
&lt;li&gt;prop drilling 안티 패턴을 사용하지 않아도 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;단점&quot; style=&quot;position:relative;&quot;&gt;단점&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Provider 패턴을 과도하게 사용시 성능에러가 발생할 수 있음&lt;/li&gt;
&lt;li&gt;Context를 참조하는 모든 컴포넌트들은 컨텍스트 변경 시마다 &lt;strong&gt;모두 리렌더링&lt;/strong&gt;됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;결론&quot; style=&quot;position:relative;&quot;&gt;결론&lt;a href=&quot;#%EA%B2%B0%EB%A1%A0&quot; aria-label=&quot;결론 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;쓰지 않는 값의 업데이트로 인해 리렌더링 되는 것을 방지하기 위해 여러 Provider로 쪼갤 필요가 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Flutter] 다양한 위젯 사용하기]]></title><description><![CDATA[Flutter 위젯 사용하기 여기서부터 시작을 해봅시다. MaterialApp  클래스는 Material Design…]]></description><link>https://yeony99.github.io/tech/flutter-use-several-widgets</link><guid isPermaLink="false">https://yeony99.github.io/tech/flutter-use-several-widgets</guid><pubDate>Fri, 30 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;flutter-위젯-사용하기&quot; style=&quot;position:relative;&quot;&gt;Flutter 위젯 사용하기&lt;a href=&quot;#flutter-%EC%9C%84%EC%A0%AF-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;flutter 위젯 사용하기 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
      ),
    );
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;여기서부터 시작을 해봅시다.&lt;/p&gt;
&lt;h3 id=&quot;materialapp&quot; style=&quot;position:relative;&quot;&gt;MaterialApp&lt;a href=&quot;#materialapp&quot; aria-label=&quot;materialapp permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MaterialApp&lt;/code&gt; 클래스는 &lt;strong&gt;Material Design&lt;/strong&gt;을 사용합니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://material.io/design&quot;&gt;머티리얼 디자인&lt;/a&gt; 은 대개 안드로이드 스마트폰에 적용되는 디자인입니다. 플러터에서는 머티리얼 디자인을 기반으로 동작하도록 여러 위젯을 래핑할 수 있는 &lt;code class=&quot;language-text&quot;&gt;MaterialApp&lt;/code&gt;을 제공합니다. 플러터 자체에서 이미 머티리얼 디자인이 구성되어 있어 별도의 개발이나 스타일링이 필요하지 않습니다.&lt;/p&gt;
&lt;h4 id=&quot;title&quot; style=&quot;position:relative;&quot;&gt;title&lt;a href=&quot;#title&quot; aria-label=&quot;title permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;간단한 앱의 한 줄 설명입니다. 안드로이드에서는 최근 사용한 앱에 표시되고, iOS에는 사용할 수 없습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;MaterialApp(
  title: &amp;#39;머티리얼 앱&amp;#39;
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h4 id=&quot;theme&quot; style=&quot;position:relative;&quot;&gt;theme&lt;a href=&quot;#theme&quot; aria-label=&quot;theme permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;말 그대로 앱의 테마를 지정할 수 있는 속성입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;MaterialApp(
  theme: ThemeData(
    // 전체 테마의 밝기
    // Brightness.light면 TextStyle이 기본으로 검정색
    // Brightness.dark면 기본으로 흰색
    brightness: Brightness.light,

    //앱바, 탭바 등의 색상 결정
    primaryColor: Colors.greenAccent,

    // 위젯의 강조색
    accentColor: Colors.redAccent,

    // 기본 사용 폰트 지정
    fontFamily: &amp;#39;IBM-Sans&amp;#39;
  )
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h4 id=&quot;home&quot; style=&quot;position:relative;&quot;&gt;home&lt;a href=&quot;#home&quot; aria-label=&quot;home permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;MaterialApp 기본 경로로, 앱 실행 시 가장 먼저 확인할 수 있는 화면입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Scaffold&lt;/code&gt; 위젯을 사용해 정의합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;MaterialApp(
  home: Scaffold(

  )
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;여기까지는 Scaffold에 아무것도 작성하지 않았기 때문에, 흰색 화면만 보여집니다. Scaffold 클래스를 작성해봅시다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h3 id=&quot;scaffold&quot; style=&quot;position:relative;&quot;&gt;Scaffold&lt;a href=&quot;#scaffold&quot; aria-label=&quot;scaffold permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Scaffold&lt;/code&gt;는 앱의 최상단, 중간, 최하단, floating 버튼을 지원하는 클래스입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: &amp;#39;머티리얼 앱&amp;#39;,
      theme: ThemeData(
        brightness: Brightness.light,
        primaryColor: Colors.blue,
        accentColor: Colors.redAccent,
        fontFamily: &amp;#39;IBM-Sans&amp;#39;
      ),
      home: Scaffold(
      ),
    );
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;MaterialApp을 작성한 결과입니다. 이를 바탕으로 &lt;code class=&quot;language-text&quot;&gt;Scaffold&lt;/code&gt;를 작성해봅시다.&lt;/p&gt;
&lt;h4 id=&quot;appbar&quot; style=&quot;position:relative;&quot;&gt;appBar&lt;a href=&quot;#appbar&quot; aria-label=&quot;appbar permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;앱 최상단에 자리하며, 주로 현재 창의 이름을 표시할 때 사용됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Scaffold(
  appBar: AppBar(
    title: Text(&amp;#39;샘플 앱바&amp;#39;)
  )
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/192941323-18aa4d87-5ac3-4ba3-9708-8ec0ac8f4e91.png&quot; alt=&quot;Scaffold AppBar&quot;&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;h4 id=&quot;body&quot; style=&quot;position:relative;&quot;&gt;body&lt;a href=&quot;#body&quot; aria-label=&quot;body permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;가운데 영역을 의미합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Scaffold(
  body: Center(
    child: Text(&amp;#39;샘플 스캐폴드 바디&amp;#39;)
  )
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/192941771-1c0a54eb-f261-4125-a00c-8759b57b95b2.png&quot; alt=&quot;Scaffold Body&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;bottomnavigationbar&quot; style=&quot;position:relative;&quot;&gt;bottomNavigationBar&lt;a href=&quot;#bottomnavigationbar&quot; aria-label=&quot;bottomnavigationbar permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;다른 창으로 이동할 수 있는 버튼들이 있는 영역입니다.
안드로이드에서는 &lt;code class=&quot;language-text&quot;&gt;Bottom Navigation Bar&lt;/code&gt;를 사용하고, iOS에서는 &lt;code class=&quot;language-text&quot;&gt;Tab Bar&lt;/code&gt;로 불리는 영역입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Scaffold(
  bottomNavigationBar: BottomNavigationBar(
    items: const &amp;lt;BottomNavigationBarItem&amp;gt;[
      BottomNavigationBarItem(
        icon: Icon(Icons.home),
        label: &amp;#39;Home&amp;#39;,
      ),
      BottomNavigationBarItem(
        icon: Icon(Icons.business),
        label: &amp;#39;Business&amp;#39;,
      ),
      BottomNavigationBarItem(
        icon: Icon(Icons.school),
        label: &amp;#39;School&amp;#39;,
      ),
    ],
    selectedItemColor: Colors.amber[800],
  ),
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;bottomNavigationBar 속성에 &lt;code class=&quot;language-text&quot;&gt;bottomNavigationBar&lt;/code&gt; 클래스를 적고, items로 &lt;code class=&quot;language-text&quot;&gt;BottomNavigationBarItem&lt;/code&gt;의 리스트를 작성합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/192942420-2a98e55e-6d3c-4977-9d5a-88a4e83bc54d.png&quot; alt=&quot;Scaffold BottomNavigationBar&quot;&gt;&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: &amp;#39;머티리얼 앱&amp;#39;,
      theme: ThemeData(
        brightness: Brightness.light,
        primaryColor: Colors.blue,
        accentColor: Colors.redAccent,
        fontFamily: &amp;#39;IBM-Sans&amp;#39;
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text(&amp;#39;샘플 앱바&amp;#39;)
        ),
        body: Center(
          child: Text(&amp;#39;샘플 스캐폴드 바디&amp;#39;)
        ),
        bottomNavigationBar: BottomNavigationBar(
          items: const &amp;lt;BottomNavigationBarItem&amp;gt;[
            BottomNavigationBarItem(
              icon: Icon(Icons.home),
              label: &amp;#39;Home&amp;#39;,
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.business),
              label: &amp;#39;Business&amp;#39;,
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.school),
              label: &amp;#39;School&amp;#39;,
            ),
          ],
          selectedItemColor: Colors.amber[800],
        ),
      ),
    );
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;sliverappbar&quot; style=&quot;position:relative;&quot;&gt;SliverAppBar&lt;a href=&quot;#sliverappbar&quot; aria-label=&quot;sliverappbar permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;앱 스크롤에 따라 모양이 변하는 appBar 입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CustomScrollView&lt;/code&gt;의 자식으로 사용됩니다. &lt;strong&gt;Sliver&lt;/strong&gt;란 scrollable한 위젯들을 의미합니다.&lt;/p&gt;
&lt;p&gt;위에서 만든 Scaffold의 body를 수정합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Scaffold(
  body: CustomScrollView(
    slivers: [
      const SliverAppBar(
        floating: true,
        flexibleSpace: FlexibleSpaceBar(
          title: Text(&amp;#39;SliverAppBar&amp;#39;),
          background: FlutterLogo(),
        ),
        expandedHeight: 200,
      ),
      SliverFixedExtentList(
        itemExtent: 50.0,
        delegate: SliverChildBuilderDelegate((BuildContext context, int index) {
          return Column(
            children: [
              Text(
                &amp;#39;List Item $index&amp;#39;,
                style: TextStyle(
                    fontSize: 20,
                    color: Colors.purple[100 * (index % 10)]),
              ),
            ]);
        }, childCount: 15),
      ),
    ],
  )
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;sliverappbar-속성&quot; style=&quot;position:relative;&quot;&gt;SliverAppBar 속성&lt;a href=&quot;#sliverappbar-%EC%86%8D%EC%84%B1&quot; aria-label=&quot;sliverappbar 속성 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;floating--pinned&quot; style=&quot;position:relative;&quot;&gt;floating / pinned&lt;a href=&quot;#floating--pinned&quot; aria-label=&quot;floating  pinned permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;floating: true&lt;/code&gt; 옵션을 주게 되면 SliverAppBar에 있는 title 부분이 스크롤할 때 사라져서 보이지 않게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pinned: true&lt;/code&gt; 속성을 주면 title 부분은 스크롤이 되더라도 고정되어 보이게 됩니다.&lt;/p&gt;
&lt;h4 id=&quot;flexiblespace&quot; style=&quot;position:relative;&quot;&gt;flexibleSpace&lt;a href=&quot;#flexiblespace&quot; aria-label=&quot;flexiblespace permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;flexible하게 보여질 공간입니다. 스크롤 시 보여지지 않을 부분의 속성입니다.&lt;/p&gt;
&lt;p&gt;여기서는 flutter logo를 배경으로 설정했습니다.&lt;/p&gt;
&lt;h4 id=&quot;expandedheight&quot; style=&quot;position:relative;&quot;&gt;expandedHeight&lt;a href=&quot;#expandedheight&quot; aria-label=&quot;expandedheight permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;스크롤이 되지 않았을 경우의 height를 설정합니다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h3 id=&quot;sliverfixedextentlist&quot; style=&quot;position:relative;&quot;&gt;SliverFixedExtentList&lt;a href=&quot;#sliverfixedextentlist&quot; aria-label=&quot;sliverfixedextentlist permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sliver 되는 appBar 밑으로 출력될 리스트입니다. &lt;code class=&quot;language-text&quot;&gt;ListView&lt;/code&gt;와 대응된다고 생각하면 됩니다.&lt;/p&gt;
&lt;h4 id=&quot;sliverchildbuilderdelegate&quot; style=&quot;position:relative;&quot;&gt;SliverChildBuilderDelegate&lt;a href=&quot;#sliverchildbuilderdelegate&quot; aria-label=&quot;sliverchildbuilderdelegate permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;SliverList는 child 목록으로 &lt;code class=&quot;language-text&quot;&gt;SliverChildBuilderDelegate&lt;/code&gt; 위젯을 이용합니다. &lt;code class=&quot;language-text&quot;&gt;childCount&lt;/code&gt; 속성으로 리스트의 개수를 컨트롤할 수 있습니다.&lt;/p&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/192960322-b9cf7280-66bf-482f-931d-a3834c3ab265.png&quot; alt=&quot;SliverAppBar &amp;amp; Sliver list&quot;&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/192962714-4c44deae-4fba-48f3-802e-3903b7cf1cef.png&quot; alt=&quot;Sliver&quot;&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/flutter-understanding-constraints&quot;&gt;[Flutter] Constraints 이해하기&lt;/a&gt; 👈 이전 글 보기
◾ &lt;a href=&quot;/tech/flutter-use-several-buttons&quot;&gt;[Flutter] 다양한 버튼 사용하기&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (10) - 자바스크립트 연산자]]></title><description><![CDATA[연산자(Operator…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-js-operator</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-js-operator</guid><pubDate>Wed, 28 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;연산자operator란&quot; style=&quot;position:relative;&quot;&gt;연산자(Operator)란?&lt;a href=&quot;#%EC%97%B0%EC%82%B0%EC%9E%90operator%EB%9E%80&quot; aria-label=&quot;연산자operator란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;연산자란 문장 부호 혹은 영어, 숫자로 구성된 &lt;strong&gt;예약된 구문&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt;라는 기호는 숫자를 추가하거나 문자열을 연결할 수 있게 하고, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;&lt;/code&gt; 기호는 좌항과 우항의 값을 비교합니다.&lt;/p&gt;
&lt;p&gt;이러한 연산자는 여러 종류로 분류할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;산술-연산자-arithmetic-operator&quot; style=&quot;position:relative;&quot;&gt;산술 연산자 (Arithmetic Operator)&lt;a href=&quot;#%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90-arithmetic-operator&quot; aria-label=&quot;산술 연산자 arithmetic operator permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;연산&lt;/strong&gt;이라고 하면 가장 먼저 사칙연산이 떠오릅니다. 자바스크립트 또한 이런 산술적인 연산을 제공합니다. 사칙연산은 우리가 흔히 아는 기호(+, -, *, /)와 동일하게 움직입니다.&lt;/p&gt;
&lt;p&gt;산술 연산자는 2가지로 나뉩니다.&lt;/p&gt;
&lt;h4 id=&quot;이항-산술-연산자-binary-operator&quot; style=&quot;position:relative;&quot;&gt;이항 산술 연산자 (Binary Operator)&lt;a href=&quot;#%EC%9D%B4%ED%95%AD-%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90-binary-operator&quot; aria-label=&quot;이항 산술 연산자 binary operator permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;이항&lt;/strong&gt;이라는 말은 항이 2개가 있다는 의미입니다. &lt;code class=&quot;language-text&quot;&gt;x + y&lt;/code&gt;는 연산되는 대상인 피연산자가 2개이죠? 그래서 이항(binary) 산술 연산자입니다.&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;연산자&lt;/td&gt;
        &lt;th&gt;동작&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;+&lt;/td&gt;
        &lt;td&gt;덧셈&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;-&lt;/td&gt;
        &lt;td&gt;뺄셈&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;*&lt;/td&gt;
        &lt;td&gt;곱셈&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;/&lt;/td&gt;
        &lt;td&gt;나눗셈&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;%&lt;/td&gt;
        &lt;td&gt;나머지&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;5 + 2 // 7
5 - 2 // 3
5 * 2 // 10
5 / 2 // 2.5
5 % 2 // 1&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h4 id=&quot;단항-산술-연산자-unary-operator&quot; style=&quot;position:relative;&quot;&gt;단항 산술 연산자 (Unary Operator)&lt;a href=&quot;#%EB%8B%A8%ED%95%AD-%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90-unary-operator&quot; aria-label=&quot;단항 산술 연산자 unary operator permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;이항 연산자와 달리 단항 산술 연산자는 1개의 피연산자만이 존재합니다.&lt;/p&gt;
&lt;p&gt;조금 낯선 모양일 수 있습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;th&gt;부수효과&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;증가&lt;/td&gt;
&lt;td&gt;피연산자의 값을 변경&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;감소&lt;/td&gt;
&lt;td&gt;피연산자의 값을 변경&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;숫자타입에는 효과없음. &lt;br/&gt;숫자타입으로 변환될 수 있는 경우 변환된 값 반환&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;양수를 음수로, 음수를 양수로 반전&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let x = 1

x++ // 2
x-- // 1

console.log(-x) // -1&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;여기서 증가/감소 연산자는 피연산자의 앞에 붙는지, 뒤에 붙는지에 따라 동작하는 시점에 차이가 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let x = 10
let result

// 선할당 후증가(postfix increment operator)
result = x++
console.log(result, x) // 10, 11

// 선증가 후할당(prefix increment operator)
result = ++x
console.log(result, x) // 12 12

// 선할당 후감소(postfix decrement operator)
result = x--
console.log(result, x) // 12 11

// 선감소 후할당(prefix decrement operator)
result = --x
console.log(result, x) // 10 10&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;조금 복잡하죠? 사실 저는 이런 증가/감소 단항 연산자는 잘 사용하지 않습니다. 잘못된 연산이 될 수도 있고, 처음 값을 할당한 변수의 값이 계속 바뀌기 때문이죠. 그래서 아래와 같은 방식을 추천합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let x = 10
let result

result = x + 1
console.log(result, x) // 11, 10

result = x - 1
console.log(result, x) // 10, 10&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt;의 값은 변하지 않고 &lt;code class=&quot;language-text&quot;&gt;result&lt;/code&gt;값만 계속 변화합니다. 만약 &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt;가 내부적으로 계산되는 임시 변수가 아니라 함수의 인자 등으로 처음 넘겨받은 값이라면 변하지 않는 것이 더욱 좋을 것입니다.&lt;/p&gt;
&lt;h4 id=&quot;문자열-연결-연산자&quot; style=&quot;position:relative;&quot;&gt;문자열 연결 연산자&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%97%B0%EA%B2%B0-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;문자열 연결 연산자 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt; 연산자는 피연산자 중 문자열이 하나라도 존재할 때 문자열로 형변환하여 연결합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;1 + &amp;quot;1&amp;quot; // 11
1 + &amp;quot;1&amp;quot; + 1 + 0 // 1110

// true는 1로, false는 0으로 변환
1 + true // 2
1 + false // 1

// null은 0으로 변환
1 + null // 1

// undefined는 정의되지 않았기 때문에
// 숫자로 변환되지 않음
1 + undefined // NaN

// 문자열에 + 붙이면 숫자타입으로 변환
1 + &amp;quot;1&amp;quot; // 2&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h3 id=&quot;할당-연산자-assignment-operator&quot; style=&quot;position:relative;&quot;&gt;할당 연산자 (Assignment Operator)&lt;a href=&quot;#%ED%95%A0%EB%8B%B9-%EC%97%B0%EC%82%B0%EC%9E%90-assignment-operator&quot; aria-label=&quot;할당 연산자 assignment operator permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;할당 연산자는 우항 피연산자의 평가 결과를 좌항 변수에 할당합니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;th&gt;부수효과&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;할당&lt;/td&gt;
&lt;td&gt;우항의 표현식 결과 값을 좌항의 변수에 할당&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+=&lt;/td&gt;
&lt;td&gt;x = x + 2&lt;/td&gt;
&lt;td&gt;&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-=&lt;/td&gt;
&lt;td&gt;x = x - 2&lt;/td&gt;
&lt;td&gt;&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*=&lt;/td&gt;
&lt;td&gt;x = x * 2&lt;/td&gt;
&lt;td&gt;&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/=&lt;/td&gt;
&lt;td&gt;x = x / 2&lt;/td&gt;
&lt;td&gt;&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%=&lt;/td&gt;
&lt;td&gt;x = x % 2&lt;/td&gt;
&lt;td&gt;&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let x = 3

x += 3 // 6

x -= 3 // 3

x *= 3 // 9

x /= 3 // 3

x %= 3 // 0&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h3 id=&quot;비교-연산자&quot; style=&quot;position:relative;&quot;&gt;비교 연산자&lt;a href=&quot;#%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;비교 연산자 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;비교 연산자는 좌항과 우항의 피연산자를 비교해 그 값을 불리언(true/false) 타입으로 반환합니다.&lt;/p&gt;
&lt;h4 id=&quot;동등-비교-연산자-equality-operator&quot; style=&quot;position:relative;&quot;&gt;동등 비교 연산자 (Equality Operator)&lt;a href=&quot;#%EB%8F%99%EB%93%B1-%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90-equality-operator&quot; aria-label=&quot;동등 비교 연산자 equality operator permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;값이 &lt;strong&gt;동등&lt;/strong&gt;한 지를 평가하는 연산자입니다.&lt;/p&gt;
&lt;p&gt;여기서 동등하다는 자바스크립트 엔진이 자체적으로 형변환을 한 후에 비교했을 때에 같다고 평가되었다는 의미입니다.&lt;br&gt;
자바스크립트는 굉장히 자유로운 언어라고 했죠? 따라서 변수를 할당하면 자체적으로 타입을 추론합니다. 그리고 동등한지를 평가할 때 &lt;strong&gt;암묵적인 타입 변환&lt;/strong&gt;을 합니다. 이런 형변환은 이따금 약간의 골칫거리가 되기도 하는데요. 형변환에 대해서는 추후 자세히 다룰 예정입니다. 지금은 자바스크립트가 타입을 추론해 바꾸기도 한다는 점만 알고 가기로 해요.&lt;/p&gt;
&lt;p&gt;예시를 보겠습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;2 == 2 // true

// 암묵적 타입 변환해 타입이 같을 경우에
2 == &amp;quot;2&amp;quot; // true&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;분명 숫자와 문자열을 비교했는데 두 값이 같다고 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;를 반환하네요.
동등 비교가 타입을 바꿔서도 검사해주니 좋다고 생각할 수도 있지만, 사실 클린 코드를 작성하는 데에는 취약점입니다. 이미 우리는 앞서 타입 변환이 일어나 &lt;code class=&quot;language-text&quot;&gt;1 + &apos;1&apos;&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;11&lt;/code&gt;이 되는 걸 확인했죠. 비슷한 예기치 못한 결과를 낳을 수 있기 때문에 &lt;strong&gt;일치 비교 연산자&lt;/strong&gt;를 쓰는 것을 권장합니다.&lt;/p&gt;
&lt;h4 id=&quot;일치-비교-연산자-strict-equality-operator&quot; style=&quot;position:relative;&quot;&gt;일치 비교 연산자 (Strict Equality Operator)&lt;a href=&quot;#%EC%9D%BC%EC%B9%98-%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90-strict-equality-operator&quot; aria-label=&quot;일치 비교 연산자 strict equality operator permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;일치 비교 연산자는 &lt;strong&gt;타입과 값&lt;/strong&gt;이 모두 같을 경우에만 true를 반환합니다. 동등 비교보다 한층 강화된 연산자이기 때문에 &lt;strong&gt;엄격한 동등 연산자&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;2 === 2 // true

2 === &amp;quot;2&amp;quot; // false&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;일치 비교 연산자로 다 비교할 수 있으면 좋겠지만, 유의해야 할 값이 있습니다. 바로 &lt;code class=&quot;language-text&quot;&gt;NaN&lt;/code&gt;입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;NaN === NaN // false&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;MDN의 설명을 참고하면, &lt;code class=&quot;language-text&quot;&gt;NaN&lt;/code&gt;은 자신과 일치하지 않는 유일한 값입니다 (NaN is the only value that compares unequal to itself). 이건 일종의 버그에&lt;/p&gt;
&lt;p&gt;따라서 &lt;code class=&quot;language-text&quot;&gt;isNaN()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;부동등불일치-비교-연산자-inequality--string-inequality-operator&quot; style=&quot;position:relative;&quot;&gt;부동등/불일치 비교 연산자 (Inequality / String Inequality Operator)&lt;a href=&quot;#%EB%B6%80%EB%8F%99%EB%93%B1%EB%B6%88%EC%9D%BC%EC%B9%98-%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90-inequality--string-inequality-operator&quot; aria-label=&quot;부동등불일치 비교 연산자 inequality  string inequality operator permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;동등, 일치가 있다면 동등하지 않은 것과 불일치하는 것도 비교할 수 있어야겠죠?&lt;/p&gt;
&lt;p&gt;자바스크립트에서는 &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; 느낌표를 &lt;strong&gt;NOT&lt;/strong&gt; 의미로 사용합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;1 != 5 // true
1 !== &amp;quot;1&amp;quot; // true&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;동등/일치 연산자에 &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt;를 붙여주면, 부동등 연산자는 값이 같지 않을 때, 불일치 연산자는 값과 타입이 모두 같지 않을 때 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 값을 리턴합니다.&lt;/p&gt;
&lt;h4 id=&quot;대소-비교-연산자&quot; style=&quot;position:relative;&quot;&gt;대소 비교 연산자&lt;a href=&quot;#%EB%8C%80%EC%86%8C-%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;대소 비교 연산자 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;수학 연산에서 쓰이는 기호와 같습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;1 &amp;gt;= 2 // false
2 &amp;gt; 1 // true&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;삼항-연산자-ternary-operator&quot; style=&quot;position:relative;&quot;&gt;삼항 연산자 (Ternary Operator)&lt;a href=&quot;#%EC%82%BC%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90-ternary-operator&quot; aria-label=&quot;삼항 연산자 ternary operator permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;삼항 연산자는 자바스크립트에서 유일하게 &lt;strong&gt;3개의 피연산자&lt;/strong&gt;를 가지는 연산자입니다.&lt;/p&gt;
&lt;p&gt;삼항 연산자는 조건식의 평가에 따라 반환되는 값이 달라집니다.&lt;/p&gt;
&lt;p&gt;삼항 연산자를 세 부분으로 나누어 살펴보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/191170567-ccb8f67f-0b77-40d8-8199-7a73eabe51de.png&quot; alt=&quot;삼항연산자&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;?&lt;/code&gt; 전까지는 조건식이 들어갑니다. 조건식의 결과는 Boolean 타입으로 평가되고, 만약 Boolean 타입이 아니라면 암묵적인 형변환을 통해 그 값을 Boolean으로 변환합니다.&lt;/p&gt;
&lt;p&gt;만약 조건식이 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;라면 &lt;code class=&quot;language-text&quot;&gt;?&lt;/code&gt; 뒤의 값이, &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;라면 &lt;code class=&quot;language-text&quot;&gt;:&lt;/code&gt; 뒤의 값이 삼항연산자의 값으로 평가됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;function isAdult(age) {
  return age &amp;gt; 19 ? &amp;quot;You are an adult!&amp;quot; : &amp;quot;You are too young...&amp;quot;
}

isAdult(15) // &amp;#39;You are too young...&amp;#39;

isAdult(24) // You are an adult!&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;삼항 연산자는 &lt;code class=&quot;language-text&quot;&gt;if...else&lt;/code&gt;문과 비슷하다고 생각할 수 있는데요. 유의해야 할 차이점이 있습니다. &lt;code class=&quot;language-text&quot;&gt;if...else&lt;/code&gt;는 &lt;strong&gt;조건문&lt;/strong&gt;이고, 삼항 연산자는 &lt;strong&gt;표현식&lt;/strong&gt;이란 점입니다.&lt;/p&gt;
&lt;p&gt;이전 글에서 값, 식, 문의 차이를 알아보며 문은 변수에 할당할 수 없지만, 표현식은 값으로 평가되어 할당할 수 있다고 설명한 바가 있습니다. 따라서 값처럼 사용할 수 있는 삼항 연산자는 무척 유용합니다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h3 id=&quot;논리-연산자-logical-operator&quot; style=&quot;position:relative;&quot;&gt;논리 연산자 (Logical Operator)&lt;a href=&quot;#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90-logical-operator&quot; aria-label=&quot;논리 연산자 logical operator permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;논리 연산자는 우항과 좌항의 피연산자를 논리적으로 연산합니다.&lt;/p&gt;
&lt;p&gt;논리적으로 연산한다는 말이 조금 어렵게 느껴집니다. 간단하게 Boolean 연산이라고 생각하면 됩니다. 논리연산은 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;만 존재하는 연산입니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;||&lt;/td&gt;
&lt;td&gt;논리합(OR)&lt;/td&gt;
&lt;td&gt;피연산자 중 하나라도 true이면 true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x26;&amp;#x26;&lt;/td&gt;
&lt;td&gt;논리곱(AND)&lt;/td&gt;
&lt;td&gt;피연산자 모두 true여야 true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;논리부정(NOT)&lt;/td&gt;
&lt;td&gt;피연산자의 값을 반전한 값 반환&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이렇게만 봐서는 좀 어렵습니다. 예제를 함께 살펴보겠습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// 논리합 (||)
true || true // true
true || false // true
false || true // true
false || false // false

// 논리곱(&amp;amp;&amp;amp;)
true &amp;amp;&amp;amp; true // true
true &amp;amp;&amp;amp; false // false
false &amp;amp;&amp;amp; true // false
false &amp;amp;&amp;amp; false // false

// 부정 (!)
!true // false
!false // true&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;논리 부정 연산자(!)는 항상 Boolean값으로 반환되는데, 피연산자의 값이 Boolean이 아니면 Boolean 값으로 암묵적 형변환하여 평가합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;console.log(!0) // true
console.log(!&amp;quot;Any String&amp;quot;) // false&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;논리 곱 연산자(&amp;#x26;&amp;#x26;)는 늘 2개의 피연산자 중 하나로 평가됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;console.log(&amp;quot;Apple&amp;quot; &amp;amp;&amp;amp; &amp;quot;Banana&amp;quot;) // Banana&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h3 id=&quot;typeof&quot; style=&quot;position:relative;&quot;&gt;typeof&lt;a href=&quot;#typeof&quot; aria-label=&quot;typeof permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;typeof 연산자는 이름에서 알 수 있듯 피연산자의 타입을 문자열로 반환합니다.&lt;/p&gt;
&lt;p&gt;typeof 연산자가 반환하는 값의 종류는 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;symbol&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;li&gt;function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사실 typeof 로 검사해도 우리가 원하는 타입과 정확히 맞아떨어지는 결과가 반환되지만은 않습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;typeof &amp;quot;&amp;quot; // string (null 예상)
typeof NaN // number
typeof null // object
typeof [] // object
typeof new Date() // object&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;조금 이상하죠? 특히 &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;을 검사했는데 object로 넘기는 건 정말 이상합니다. 이건 자바스크립트의 버그입니다. 하지만 기존에 이미 작성된 코드와의 호환을 위해 의도적으로 남긴 버그입니다.&lt;/p&gt;
&lt;p&gt;따라서 null을 체크할 때에는 &lt;code class=&quot;language-text&quot;&gt;===&lt;/code&gt;일치 연산자를 사용하는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;ES6 이후 자바스크립트 스펙에서 추가된 연산자들은 추후 알아보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 제어문에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-value-expression-statement&quot;&gt;값, 식, 문&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-control-flow-statement-conditional&quot;&gt;제어문(1) - 조건문&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[UX - 목표 지향 디자인]]></title><description><![CDATA[사용자를 만족시키면 서비스는 성공한다 모든 서비스가 쉽게 성공하지 못하는 이유는, 제품기획과 개발 프로세스의 근본적이고 동등한 부분으로 디자인이 존재하지 않기 때문이다. 빅터 파파넥에 따르면, 디자인(Design…]]></description><link>https://yeony99.github.io/tech/ux-goal-directed-design</link><guid isPermaLink="false">https://yeony99.github.io/tech/ux-goal-directed-design</guid><pubDate>Tue, 27 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;사용자를-만족시키면-서비스는-성공한다&quot; style=&quot;position:relative;&quot;&gt;사용자를 만족시키면 서비스는 성공한다&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90%EB%A5%BC-%EB%A7%8C%EC%A1%B1%EC%8B%9C%ED%82%A4%EB%A9%B4-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%8A%94-%EC%84%B1%EA%B3%B5%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;사용자를 만족시키면 서비스는 성공한다 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;모든 서비스가 쉽게 성공하지 못하는 이유는, 제품기획과 개발 프로세스의 근본적이고 동등한 부분으로 디자인이 존재하지 않기 때문이다.&lt;/p&gt;
&lt;p&gt;빅터 파파넥에 따르면, 디자인(Design)이란 &lt;strong&gt;직관적이고 의미있는 질서를 부여하는 과정&lt;/strong&gt;이다.&lt;/p&gt;
&lt;h3 id=&quot;인간-중심-디자인&quot; style=&quot;position:relative;&quot;&gt;인간 중심 디자인&lt;a href=&quot;#%EC%9D%B8%EA%B0%84-%EC%A4%91%EC%8B%AC-%EB%94%94%EC%9E%90%EC%9D%B8&quot; aria-label=&quot;인간 중심 디자인 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;제품 사용자의 요구와 니즈, 동기, 정황을 이해하는 과정&lt;/li&gt;
&lt;li&gt;사업 측면과 기술 측면의 요구사항과 제약, 시장 기회를 파악하는 과정&lt;/li&gt;
&lt;li&gt;이 두 가지에 대한 이해를 바탕으로 기능, 사용성, 경제성, 기술적 측면에서도 성공적인 제품을 디자인하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;올바른 방법론을 적용한 디자인은 사용자에게 좀 더 가깝게 다가간다.&lt;/p&gt;
&lt;h4 id=&quot;디지털-제품이-엉터리인-이유&quot; style=&quot;position:relative;&quot;&gt;디지털 제품이 엉터리인 이유&lt;a href=&quot;#%EB%94%94%EC%A7%80%ED%84%B8-%EC%A0%9C%ED%92%88%EC%9D%B4-%EC%97%89%ED%84%B0%EB%A6%AC%EC%9D%B8-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;디지털 제품이 엉터리인 이유 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;현재 디자인 프로세스에서 잘못된 부분&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;제품 관리와 개발 팀 간의 잘못된 우선순위&lt;/li&gt;
&lt;li&gt;제품의 실사용자와, 성공의 기준선이 되는 니즈에 관한 무지&lt;/li&gt;
&lt;li&gt;사용자 경험 디자인과 구축을 개발 팀이 책임질 때의 이해관계 충돌&lt;/li&gt;
&lt;li&gt;최종 경험의 개발을 주도하기 위해 수집, 분석, 사용할 니즈 관련 지식을 허용하는 디자인 프로세스 부족&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;잘못된 우선순위&lt;/h5&gt;
&lt;p&gt;시장 설문 조사로 사용자 니즈를 파악하기는 어렵다.&lt;br&gt;
원하는 바를 명쾌하게 설명할 수 있는 사용자는 극히 드물고, 마음 속 깊이 내재된 니즈보다는 표면적인 기능이나 오류에만 초점을 맞춘다.&lt;/p&gt;
&lt;p&gt;서비스 디자인 프로세스에서 &lt;strong&gt;사용자의 목표, 니즈, 동기&lt;/strong&gt; 같은 중요한 정보는 종종 무시된다. 니즈를 고려하지 않은 서비스는 사용자 경험을 망친다.&lt;/p&gt;
&lt;p&gt;사용자를 만족시키려면 인터랙션 디자인은 반드시 &lt;strong&gt;개발과 QA 이전&lt;/strong&gt;에 진행해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/191703007-a3c15b2d-013f-455c-b987-569d17ee209d.png&quot; alt=&quot;목표 지향 디자인 방법론&quot;&gt;&lt;/p&gt;
&lt;h5&gt;사용자에 대한 무지&lt;/h5&gt;
&lt;p&gt;사용자의 정보를 수집해도 제품 디자인에 유효한 정보는 거의 없다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;제품을 활용해 사용자가 성취하고자 하는 바&lt;/li&gt;
&lt;li&gt;경쟁사 제품 대신 선택한 이유&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 정보를 알아내 사용자의 니즈를 깊이 이해해야 한다.&lt;/p&gt;
&lt;h5&gt;디자인 방법론의 부재&lt;/h5&gt;
&lt;p&gt;디지털 제품의 인터랙션은 제작 과정 초기에 미리 계획해야 한다.&lt;/p&gt;
&lt;p&gt;사용자의 참여가 인터페이스 디자인에 도움을 주고 있지만, 한계가 있다. 사용자는 현재 버전의 문제점을 짚어낼 수 있을지 모르지만, 적절한 해결책을 제시하기는 어렵다.&lt;/p&gt;
&lt;h5&gt;성공적인 디지털 제품에 필요한 3요소&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;사용자 만족도&lt;/li&gt;
&lt;li&gt;판매 가능성&lt;/li&gt;
&lt;li&gt;구현 가능성&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;사용자-목표-탐색&quot; style=&quot;position:relative;&quot;&gt;사용자 목표 탐색&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%AA%A9%ED%91%9C-%ED%83%90%EC%83%89&quot; aria-label=&quot;사용자 목표 탐색 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;사용자 개인적 목표를 만족시키면 사업적 목표도 달성되는 경우가 많다.&lt;/p&gt;
&lt;p&gt;사용자를 만족시키지 못하는 제품의 특징은 이러하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 스스로 멍청하다고 생각하게 만든다.&lt;/li&gt;
&lt;li&gt;사용자가 실수하도록 유도한다.&lt;/li&gt;
&lt;li&gt;효율적으로 사용하려면 너무 많은 노력이 요구된다.&lt;/li&gt;
&lt;li&gt;훌륭한 사용자 경험을 제공하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;목표와-과업&quot; style=&quot;position:relative;&quot;&gt;목표와 과업&lt;a href=&quot;#%EB%AA%A9%ED%91%9C%EC%99%80-%EA%B3%BC%EC%97%85&quot; aria-label=&quot;목표와 과업 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div style=&quot;background-color: #eee; border-radius: 1rem; font-size: 0.9rem; padding: 1rem&quot;&gt;사용자의 목표 ≠ 과업&lt;/div&gt;
&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;목표 : 사용자가 이루고자 하는 기대치&lt;/li&gt;
&lt;li&gt;업무 : 사용자가 목표를 성취하려고 밟아가는 중간 과정(과업의 모음)&lt;/li&gt;
&lt;li&gt;과업 : 액션의 모음&lt;/li&gt;
&lt;li&gt;액션 : 세부 기능을 조작하는 행위&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;도널드 노먼은 &lt;strong&gt;과업 중심 디자인이 적절치 않다&lt;/strong&gt;고 지적했다.&lt;/p&gt;
&lt;p&gt;과업 중심 디자인은 사용자가 &lt;strong&gt;왜&lt;/strong&gt; 이런 행동을 했는지, &lt;strong&gt;왜&lt;/strong&gt; 이 과업과 업무를 완료하려 했는지를 설명하지 않기 때문이다.&lt;/p&gt;
&lt;div style=&quot;background-color: #eee; border-radius: 1rem; font-size: 0.9rem; padding: 1rem&quot;&gt;
  &lt;h6&gt;❗ 목표와 과업의 차이&lt;/h6&gt;
  - 사용자의 목표는 마음 속 깊은 곳에서 우러나온다. 시간이 지나도 변하지 않는다. &lt;br/&gt;
  - 과업과 업무는 시간에 따라 달라진다.
&lt;/div&gt;
&lt;br/&gt;
&lt;h4 id=&quot;정황을-고려한-디자인&quot; style=&quot;position:relative;&quot;&gt;정황을 고려한 디자인&lt;a href=&quot;#%EC%A0%95%ED%99%A9%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8&quot; aria-label=&quot;정황을 고려한 디자인 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;제품의 사용법을 시작 시 일일이 알려주는 제품이 있다면 초보자에게는 좋다. 다만 그 제품에 충분히 익숙해지고 난 뒤의 상황도 고려한다면, 사용법 안내가 오히려 짜증나는 디자인이 될 수도 있다.&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&quot;구현-모델과-멘탈-모델&quot; style=&quot;position:relative;&quot;&gt;구현 모델과 멘탈 모델&lt;a href=&quot;#%EA%B5%AC%ED%98%84-%EB%AA%A8%EB%8D%B8%EA%B3%BC-%EB%A9%98%ED%83%88-%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot;구현 모델과 멘탈 모델 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;구현 모델 : 컴퓨터 코드를 바탕으로 프로그램이 구현되는 과정
&lt;ul&gt;
&lt;li&gt;모든 기능마다 버튼을 하나씩 맵핑하면 구현이 된 것.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;멘탈 모델 : 사용자가 제품을 이해하는 방식
&lt;ul&gt;
&lt;li&gt;유선 전화와 휴대폰은 전혀 다른 구현 방식이지만 사용자는 이를 인지하지 않고 사용.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;표현-모델&quot; style=&quot;position:relative;&quot;&gt;표현 모델&lt;a href=&quot;#%ED%91%9C%ED%98%84-%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot;표현 모델 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;사용자에게 중요하지 않은 정보를 뒤편으로 보내버리는 것.&lt;/p&gt;
&lt;p&gt;실제 구현방식과는 다르게 제품이 작동하는 방법을 &lt;strong&gt;쉽게 표현&lt;/strong&gt;하는 모델이다. 예시로 공유폴더와 하드디스크의 폴더는 작동방식이 완전히 다르지만, 보여질 때는 유사한 모양의 폴더로 보인다.&lt;/p&gt;
&lt;p&gt;표현모델이 멘탈모델과 유사할수록 프로그램을 쉽게 사용할 수 있어 사용자에게 유리하다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;목표-지향-디자인-프로세스&quot; style=&quot;position:relative;&quot;&gt;목표 지향 디자인 프로세스&lt;a href=&quot;#%EB%AA%A9%ED%91%9C-%EC%A7%80%ED%96%A5-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;목표 지향 디자인 프로세스 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;리서치 : 사용자 및 프로젝트 전문 분야&lt;/li&gt;
&lt;li&gt;사용자 모델 : 사용자 및 시나리오, 정황&lt;/li&gt;
&lt;li&gt;요구사항 도출 : 구체적인 사용자 니즈, 사업 요구사항, 기술 제약사항&lt;/li&gt;
&lt;li&gt;디자인 설계 : 화면 레이아웃, UI 구조와 흐름&lt;/li&gt;
&lt;li&gt;수정 : 인터랙션, 인터페이스, 컨텐츠&lt;/li&gt;
&lt;li&gt;관리 : 개발 지원&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;리서치&quot; style=&quot;position:relative;&quot;&gt;리서치&lt;a href=&quot;#%EB%A6%AC%EC%84%9C%EC%B9%98&quot; aria-label=&quot;리서치 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;사용자를 이해하는데 필요한 자료를 수집한다. 사용자는 제품의 실사용자와 잠재 고객을 모두 포함한다.
사용자의 행동패턴을 파악해 적절한 퍼소나(페르소나)를 설계한다.
&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;사용자-모델&quot; style=&quot;position:relative;&quot;&gt;사용자 모델&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot;사용자 모델 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;행동 패턴과 업무 흐름 파악이 중요하다. 리서치 단계에서 관찰한 사용자의 행동, 태도, 적성, 목표, 동기를 담은 페르소나를 만든다.&lt;/p&gt;
&lt;p&gt;여러 개의 페르소나를 제작한 뒤, 중요도에 따라 대표 페르소나와 부가적 페르소나를 구분한다.
&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;요구사항-도출&quot; style=&quot;position:relative;&quot;&gt;요구사항 도출&lt;a href=&quot;#%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EB%8F%84%EC%B6%9C&quot; aria-label=&quot;요구사항 도출 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;사용자 모델과 디자인을 부드럽게 연결하는 것이 중요하다.&lt;/p&gt;
&lt;p&gt;대표 페르소나를 만족시키는 인터페이스를 설계하려면 페르소나가 원하는 기능을 분석해야 한다. 사용자에게 필요한 인터페이스와 기능을 생각해, 페르소나의 &lt;strong&gt;하루 일상&lt;/strong&gt;을 그리는 것에서 시작한다.&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&quot;디자인-설계&quot; style=&quot;position:relative;&quot;&gt;디자인 설계&lt;a href=&quot;#%EB%94%94%EC%9E%90%EC%9D%B8-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;디자인 설계 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;제품의 구체적인 컨셉을 결정한다.&lt;/p&gt;
&lt;p&gt;기본적인 기능, 인터랙션을 결정하고, 인터페이스, 시각적인 요소 등까지 결정할 수도 있다.&lt;/p&gt;
&lt;p&gt;인터랙션 설계 시 효과적인 접근 방식은 1. 인터랙션 디자인 원칙 적용 2. 인터랙션 디자인 패턴 적용 2가지가 있다.&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&quot;수정&quot; style=&quot;position:relative;&quot;&gt;수정&lt;a href=&quot;#%EC%88%98%EC%A0%95&quot; aria-label=&quot;수정 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;사용자의 과업이 일관되게 흘러가는지 점검한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;주요 경로 시나리오&lt;/strong&gt; 와 &lt;strong&gt;점검 시나리오&lt;/strong&gt;를 바탕으로 스토리보드에 문제가 없는지 인터페이스를 살펴본다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;디자인-원칙&quot; style=&quot;position:relative;&quot;&gt;디자인 원칙&lt;a href=&quot;#%EB%94%94%EC%9E%90%EC%9D%B8-%EC%9B%90%EC%B9%99&quot; aria-label=&quot;디자인 원칙 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;추측을 바탕으로 인터랙션을 디자인해서는 안된다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;디지털 제품을 디자인하는 과정에서 다음 질문에 대답할 수 있어야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 누구인가?&lt;/li&gt;
&lt;li&gt;사용자가 무엇을 성취하고자 하는가?&lt;/li&gt;
&lt;li&gt;사용자가 스스로 성취하고자 하는 목표에 대해 어떻게 생각하는가?&lt;/li&gt;
&lt;li&gt;어떤 종류의 경험을 중요하게 생각하는가?&lt;/li&gt;
&lt;li&gt;제품이 어떤 식으로 동작해야 하는가?&lt;/li&gt;
&lt;li&gt;제품이 어떤 모습을 갖춰야 하는가?&lt;/li&gt;
&lt;li&gt;사용자가 어떻게 제품과 상호작용하는가?&lt;/li&gt;
&lt;li&gt;제품의 기능을 가장 효과적으로 구성하는 방법은 무엇인가?&lt;/li&gt;
&lt;li&gt;처음 접하는 사용자에게 친근한 제품을 디자인하는 방법은 무엇인가?&lt;/li&gt;
&lt;li&gt;제품의 기술을 바탕으로 이해와 조작이 쉽고 매력적인 인터페이스를 설계하려면 어떻게 해야하는가?&lt;/li&gt;
&lt;li&gt;제품을 사용하면서 접하는 문제를 어떻게 해결할 수 있는가?&lt;/li&gt;
&lt;li&gt;제품을 자주 사용하지 않거나 조작이 미숙한 사용자도 쉽게 이해하고 목표를 빠르게 달성하려면 어떻게 해야 하는가?&lt;/li&gt;
&lt;li&gt;전문 사용자에게도 충분한 고급 기능을 제공하려면 어떻게 해야 하는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;reference&quot; style=&quot;position:relative;&quot;&gt;Reference&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;About Face 4&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Flutter] Constraints 이해하기]]></title><description><![CDATA[Constraints란? 어떤 프로그래밍이든 제약조건이 있습니다. 실생활에 지켜야 할 법이 있듯이 프로그래밍에서도 규칙을 지키도록 강제해놓은 것이죠. Flutter…]]></description><link>https://yeony99.github.io/tech/flutter-understanding-constraints</link><guid isPermaLink="false">https://yeony99.github.io/tech/flutter-understanding-constraints</guid><pubDate>Fri, 23 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;constraints란&quot; style=&quot;position:relative;&quot;&gt;Constraints란?&lt;a href=&quot;#constraints%EB%9E%80&quot; aria-label=&quot;constraints란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;어떤 프로그래밍이든 &lt;strong&gt;제약조건&lt;/strong&gt;이 있습니다. 실생활에 지켜야 할 법이 있듯이 프로그래밍에서도 규칙을 지키도록 강제해놓은 것이죠.&lt;/p&gt;
&lt;p&gt;Flutter도 마찬가지입니다. 일반적으로 많은 개발자가 가장 먼저 접하는 웹, &lt;code class=&quot;language-text&quot;&gt;HTML&lt;/code&gt;과는 다른 방식으로 움직이기 때문에 다른 Constraints를 가지고 있습니다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;constraints-go-down-sizes-go-up-parent-sets-position&quot; style=&quot;position:relative;&quot;&gt;Constraints go down. Sizes go up. Parent sets position.&lt;a href=&quot;#constraints-go-down-sizes-go-up-parent-sets-position&quot; aria-label=&quot;constraints go down sizes go up parent sets position permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Flutter의 레이아웃은 이 규칙을 따라 구성됩니다.&lt;/p&gt;
&lt;h3 id=&quot;예시&quot; style=&quot;position:relative;&quot;&gt;예시&lt;a href=&quot;#%EC%98%88%EC%8B%9C&quot; aria-label=&quot;예시 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;제약(constraints) 범위를 결정하는 것은 부모 위젯&lt;/li&gt;
&lt;li&gt;크기를 결정하는 것은 자식 위젯&lt;/li&gt;
&lt;li&gt;위치를 지정하는 것은 부모 위젯&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 제약은 &lt;strong&gt;크기&lt;/strong&gt; 제약입니다. 크기는 &lt;code class=&quot;language-text&quot;&gt;width&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;height&lt;/code&gt;의 최소/최대값입니다. 부모 위젯은 이런 크기 제약을 자식에게 넘기는 것입니다. 위젯의 위치를 결정하는 것은 결국 그 위젯이 아니라 위젯의 부모입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Container&lt;/code&gt;위젯으로 예시를 들어보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;제약조건이 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Container(
  color: Colors.amber,
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/191666561-32625295-1853-43f1-b232-2602f0c69d22.png&quot; alt=&quot;Container no-constraints&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 꽉 찬 화면이 만들어집니다. 그럼 Container 위젯의 사이즈를 조정해볼까요?&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Container(
  color: Colors.amber,
  height: 100,
  width: 100,
);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/191666561-32625295-1853-43f1-b232-2602f0c69d22.png&quot; alt=&quot;Container no-constraints&quot;&gt;&lt;/p&gt;
&lt;p&gt;width와 height를 지정했음에도 변하는 건 없습니다.&lt;/p&gt;
&lt;p&gt;그러면 자식 위젯을 가운데에 위치시키는 &lt;code class=&quot;language-text&quot;&gt;Center&lt;/code&gt; 위젯을 사용해 보겠습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Center(
  child: Container(
    color: Colors.amber,
    height: 100,
    width: 100,
));&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/191667508-b884bd2e-9e91-4984-aef7-953d1acee3a7.png&quot; alt=&quot;Container with Center&quot;&gt;&lt;/p&gt;
&lt;p&gt;부모의 제약이 생기니 height와 width가 제대로 적용이 된 것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;여기서&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Center&lt;/code&gt; 는 제약을 전체 범위로 주었고&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Container&lt;/code&gt; 는 스스로의 크기를 지정하였으며&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Center&lt;/code&gt; 가 자식인 &lt;code class=&quot;language-text&quot;&gt;Container&lt;/code&gt;의 위치를 지정했음을 볼 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;결론&quot; style=&quot;position:relative;&quot;&gt;결론&lt;a href=&quot;#%EA%B2%B0%EB%A1%A0&quot; aria-label=&quot;결론 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;플러터는 크기 명시가 아닌 제약으로 레이아웃을 결정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;제약(constraints) 범위를 결정하는 것은 부모 위젯&lt;/li&gt;
&lt;li&gt;크기를 결정하는 것은 자식 위젯&lt;/li&gt;
&lt;li&gt;위치를 지정하는 것은 부모 위젯&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/flutter-text-widget&quot;&gt;[Flutter] Text Widget 사용하기&lt;/a&gt; 👈 이전 글 보기
◾ &lt;a href=&quot;/tech/flutter-use-several-widgets&quot;&gt;[Flutter] 다양한 위젯 사용하기&lt;/a&gt; 👈 이전 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Flutter] Text Widget 사용하기]]></title><description><![CDATA[Text Widget Flutter에서 아주 흔하게 사용되는 위젯 중 하나가  위젯입니다. Text 위젯은 이름에서부터 알 수 있듯이 텍스트를 화면에 그리는 위젯입니다. 뿐만 아니라 텍스트에 style을 입힐 수도 있습니다. Text Widget…]]></description><link>https://yeony99.github.io/tech/flutter-text-widget</link><guid isPermaLink="false">https://yeony99.github.io/tech/flutter-text-widget</guid><pubDate>Thu, 22 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;!-- 📍 텍스트에 대한 다양한 반응의 종류를 알고 이해한다.

📍 constraints의 의미를 알고 적절하게 사용한다.

📍 tutorial app을 만들어보며 배운 내용을 정리한다. --&gt;
&lt;h2 id=&quot;text-widget&quot; style=&quot;position:relative;&quot;&gt;Text Widget&lt;a href=&quot;#text-widget&quot; aria-label=&quot;text widget permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Flutter에서 아주 흔하게 사용되는 위젯 중 하나가 &lt;code class=&quot;language-text&quot;&gt;Text&lt;/code&gt; 위젯입니다.&lt;/p&gt;
&lt;p&gt;Text 위젯은 이름에서부터 알 수 있듯이 텍스트를 화면에 그리는 위젯입니다. 뿐만 아니라 텍스트에 style을 입힐 수도 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;text-widget-작성하기&quot; style=&quot;position:relative;&quot;&gt;Text Widget 작성하기&lt;a href=&quot;#text-widget-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;text widget 작성하기 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;기본적인 Text 위젯은 이렇게 작성할 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const Text(&amp;#39;Hello World!&amp;#39;)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;여기에 style을 입히고 싶다면 &lt;code class=&quot;language-text&quot;&gt;style&lt;/code&gt; 속성을 지정하면 됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Text(
  &amp;#39;Hello World!&amp;#39;,
  style: TextStyle(fontSize: 20),
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h4 id=&quot;textstyle-class&quot; style=&quot;position:relative;&quot;&gt;TextStyle class&lt;a href=&quot;#textstyle-class&quot; aria-label=&quot;textstyle class permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Flutter에는 Text를 스타일링할 수 있는 &lt;code class=&quot;language-text&quot;&gt;TextStyle&lt;/code&gt; class가 존재합니다.&lt;/p&gt;
&lt;p&gt;TextStyle class는 &lt;code class=&quot;language-text&quot;&gt;immutable&lt;/code&gt;하다고 설명하고 있는데요. 이 말은 사용할 때 명시한 값 외에는 런타임 시 변하게 할 수 없다는 의미입니다.&lt;/p&gt;
&lt;p&gt;TextStyle 클래스를 통해 지정할 수 있는 속성은 아래 링크에서 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://api.flutter.dev/flutter/painting/TextStyle-class.html&quot;&gt;TextStyle class&lt;/a&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h3 id=&quot;richtext-widget&quot; style=&quot;position:relative;&quot;&gt;RichText Widget&lt;a href=&quot;#richtext-widget&quot; aria-label=&quot;richtext widget permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Text&lt;/code&gt; 위젯은 하나의 문장을 작성할 수 있었는데요. 텍스트를 나누어 스타일링하고 싶거나 여러 개의 텍스트를 합쳐서 보여주고 싶다면 &lt;code class=&quot;language-text&quot;&gt;RichText&lt;/code&gt;를 사용하면 됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;RichText(
  text: TextSpan(
    text: &amp;#39;Hello &amp;#39;,
    style: DefaultTextStyle.of(context).style,
    children: const &amp;lt;TextSpan&amp;gt;[
      TextSpan(text: &amp;#39;bold&amp;#39;, style: TextStyle(fontWeight: FontWeight.bold)),
      TextSpan(text: &amp;#39; world!&amp;#39;),
    ],
  ),
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RichText&lt;/code&gt; 안에 들어가는 여러 개의 텍스트들은 &lt;code class=&quot;language-text&quot;&gt;TextSpan&lt;/code&gt;을 사용해 보여집니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/flutter-layout-widget&quot;&gt;[Flutter] Layout Widget 정리&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/flutter-understanding-constraints&quot;&gt;[Flutter] Constraints 이해하기&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[프록시 패턴]]></title><description><![CDATA[프록시 패턴 (Proxy Pattern)  단어의 뜻은 대리인입니다. Proxy 단어 뜻 - 네이버 사전 Proxy 패턴은 실제 객체에 직접 접근하는 것이 아닌, 실 객체를 대리하는 객체인 Proxy 객체를 다루는 패턴입니다. Proxy…]]></description><link>https://yeony99.github.io/tech/react-pattern-proxy</link><guid isPermaLink="false">https://yeony99.github.io/tech/react-pattern-proxy</guid><pubDate>Thu, 22 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;프록시-패턴-proxy-pattern&quot; style=&quot;position:relative;&quot;&gt;프록시 패턴 (Proxy Pattern)&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8C%A8%ED%84%B4-proxy-pattern&quot; aria-label=&quot;프록시 패턴 proxy pattern permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;proxy&lt;/code&gt; 단어의 뜻은 &lt;strong&gt;대리인&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/191401927-69d5773e-a6ef-467f-96b8-5aa3ee883097.png&quot; alt=&quot;Proxy 단어 뜻 - 네이버 사전&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;font-size: 0.7rem; text-align: end&quot;&gt;출처 : 네이버 사전&lt;/div&gt;&lt;br/&gt;
&lt;p&gt;Proxy 패턴은 실제 객체에 직접 접근하는 것이 아닌, 실 객체를 대리하는 객체인 Proxy 객체를 다루는 패턴입니다.&lt;/p&gt;
&lt;h3 id=&quot;proxy-객체와-상호작용하기&quot; style=&quot;position:relative;&quot;&gt;Proxy 객체와 상호작용하기&lt;a href=&quot;#proxy-%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;proxy 객체와 상호작용하기 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;먼저 객체를 만들고 그 객체의 Proxy 객체를 만들어봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const person = {
  name: &amp;quot;yeony&amp;quot;,
  age: 24,
  job: &amp;quot;frontend developer&amp;quot;,
}

//Proxy 객체
const personProxy = new Proxy(person, {})&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Proxy&lt;/code&gt;객체는 프록시 인스턴스 생성(new 키워드)으로 쉽게 만들 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;proxy-객체-살펴보기&quot; style=&quot;position:relative;&quot;&gt;Proxy 객체 살펴보기&lt;a href=&quot;#proxy-%EA%B0%9D%EC%B2%B4-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0&quot; aria-label=&quot;proxy 객체 살펴보기 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Proxy&lt;/code&gt; 클래스의 구조를 살펴봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;new Proxy(target, handler)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Proxy&lt;/code&gt;의 첫 번째 매개변수는 프록시객체로 만들 타깃 객체입니다.&lt;br&gt;
두 번째 매개변수는 &lt;code class=&quot;language-text&quot;&gt;핸들러&lt;/code&gt;로, proxy의 행동을 정의합니다.&lt;/p&gt;
&lt;p&gt;핸들러 객체에서 인터랙션 동작을 정의하고, 메소드를 추가할 수 있습니다.&lt;/p&gt;
&lt;p&gt;가장 흔히 사용되는 메소드인 &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt; 메소드를 보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get : 프로퍼티에 접근하려 할 때 실행&lt;/li&gt;
&lt;li&gt;set : 프로퍼티에 값을 수정하려 할 때 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const person = {
  name: &amp;quot;yeony&amp;quot;,
  age: 24,
  job: &amp;quot;frontend developer&amp;quot;,
}

//Proxy 객체
const personProxy = new Proxy(person, {
  get: (obj, prop) =&amp;gt; {
    console.log(`The value of ${prop} is ${obj[prop]}`)
  },
  set: (obj, prop, value) =&amp;gt; {
    console.log(`Changed ${prop} from ${obj[prop]} to ${value}`)
    obj[prop] = value
    return true
  },
})

personProxy.name = &amp;quot;Nayeon&amp;quot;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이렇게 되면 &lt;code class=&quot;language-text&quot;&gt;personProxy&lt;/code&gt;를 통해 &lt;code class=&quot;language-text&quot;&gt;person&lt;/code&gt;객체가 수정됩니다.&lt;/p&gt;
&lt;h3 id=&quot;유효성-검사&quot; style=&quot;position:relative;&quot;&gt;유효성 검사&lt;a href=&quot;#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC&quot; aria-label=&quot;유효성 검사 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;이러한 프록시 패턴은 유효성 검사를 구현할 때 유용하게 사용할 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const personProxy = new Proxy(person, {
  get: (obj, prop) =&amp;gt; {
    // 원본 person 객체에 key가 존재하지 않으면 접근할 수 없도록 방지
    if (!obj[prop]) {
      console.log(
        `Hmm.. this property doesn&amp;#39;t seem to exist on the target object`
      )
    } else {
      console.log(`The value of ${prop} is ${obj[prop]}`)
    }
  },
  set: (obj, prop, value) =&amp;gt; {
    // 타입이나 제약을 추가하여 변경 시 안정성 보장
    if (prop === &amp;quot;age&amp;quot; &amp;amp;&amp;amp; typeof value !== &amp;quot;number&amp;quot;) {
      console.log(`Sorry, you can only pass numeric values for age.`)
    } else if (prop === &amp;quot;name&amp;quot; &amp;amp;&amp;amp; value.length &amp;lt; 2) {
      console.log(`You need to provide a valid name.`)
    } else {
      console.log(`Changed ${prop} from ${obj[prop]} to ${value}.`)
      obj[prop] = value
    }
  },
})&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;원본 객체에 존재하지 않는 key로 접근하거나, 예상하지 못한 타입의 값을 할당하려는 경우에 proxy객체를 통해 방지할 수 있습니다. 따라서 실수를 예방함으로써 &lt;strong&gt;데이터의 안정성&lt;/strong&gt;을 관리할 수 있는 패턴이 됩니다.&lt;/p&gt;
&lt;h3 id=&quot;reflect&quot; style=&quot;position:relative;&quot;&gt;Reflect&lt;a href=&quot;#reflect&quot; aria-label=&quot;reflect permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;자바스크립트에서는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect&quot;&gt;Reflect&lt;/a&gt; 라는 빌트인 객체를 제공합니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Reflect&lt;/code&gt;는 중간에서 가로챌 수 있는 자바스크립트 작업에 대한 메소드를 제공합니다. 메소드 종류는 &lt;code class=&quot;language-text&quot;&gt;Proxy&lt;/code&gt;와 동일합니다. 단, 함수 객체가 아니라 생성자로 사용은 불가능합니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Reflect&lt;/code&gt;는 이렇게 사용합니다&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// Proxy
const personProxy = new Proxy(person, {
  get: (obj, prop) =&amp;gt; {
    console.log(`The value of ${prop} is ${obj[prop]}`)
  },
  set: (obj, prop, value) =&amp;gt; {
    console.log(`Changed ${prop} from ${obj[prop]} to ${value}`)
    obj[prop] = value
  },
})

// Reflect 사용
const personProxy = new Proxy(person, {
  get: (obj, prop) =&amp;gt; {
    console.log(`The value of ${prop} is ${Reflect.get(obj, prop)}`)
  },
  set: (obj, prop, value) =&amp;gt; {
    console.log(`Changed ${prop} from ${obj[prop]} to ${value}`)
    Reflect.set(obj, prop, value)
  },
})&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;obj[prop] = value&lt;/code&gt; 형태가 아니라, &lt;code class=&quot;language-text&quot;&gt;Reflect.get(obj, prop)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Reflect.set(obj, prop, value)&lt;/code&gt;의 형태로 작성할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;결론&quot; style=&quot;position:relative;&quot;&gt;결론&lt;a href=&quot;#%EA%B2%B0%EB%A1%A0&quot; aria-label=&quot;결론 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Proxy는 객체의 동작을 커스터마이징할 수 있는 유용한 기능입니다. 유효성 검사, formatting, 알림, 디버깅 등에 유용합니다.&lt;/p&gt;
&lt;p&gt;핸들러 객체에서 Proxy를 과도하게 사용하면 성능이 저하될 수 있습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (9) - 값, 식, 문]]></title><description><![CDATA[값, 식, 문 값을 할당한다 라는 말을 이전 글에서 자주 사용했습니다. 값은 무엇일까요? 자바스크립트 뿐 아니라 값은 프로그래밍 전반에서 사용하는 용어입니다. 값(value)과 식(expression), 문(statement…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-js-value-expression-statement</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-js-value-expression-statement</guid><pubDate>Wed, 21 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;값-식-문&quot; style=&quot;position:relative;&quot;&gt;값, 식, 문&lt;a href=&quot;#%EA%B0%92-%EC%8B%9D-%EB%AC%B8&quot; aria-label=&quot;값 식 문 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;값을 할당한다&lt;/strong&gt; 라는 말을 이전 글에서 자주 사용했습니다.&lt;/p&gt;
&lt;p&gt;값은 무엇일까요? 자바스크립트 뿐 아니라 값은 프로그래밍 전반에서 사용하는 용어입니다.&lt;/p&gt;
&lt;p&gt;값(value)과 식(expression), 문(statement)의 차이에 대해서 알아봅시다.&lt;/p&gt;
&lt;h3 id=&quot;값&quot; style=&quot;position:relative;&quot;&gt;값&lt;a href=&quot;#%EA%B0%92&quot; aria-label=&quot;값 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;먼저 값부터 알아봅니다.&lt;/p&gt;
&lt;p&gt;값은 식(=표현식, expression)이 평가되고 생성된 결과&lt;strong&gt;값&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;10 + 100 // 110&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;식이 평가되어 값이 생성되었습니다.&lt;/p&gt;
&lt;p&gt;변수에 할당해 볼까요?&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let num = 10 + 100&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;10 + 100&lt;/code&gt;이라는 식이 평가되어 &lt;code class=&quot;language-text&quot;&gt;110&lt;/code&gt;이라는 값이 할당됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;br/&gt;
&lt;h3 id=&quot;표현식&quot; style=&quot;position:relative;&quot;&gt;표현식&lt;a href=&quot;#%ED%91%9C%ED%98%84%EC%8B%9D&quot; aria-label=&quot;표현식 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;표현식은 값으로 여겨지는 문(statement)입니다.&lt;/p&gt;
&lt;p&gt;표현식이 평가되면 새로운 값을 만들거나 혹은 기존의 값을 참조합니다. 이런 연산과정을 **평가(evaluate)**라고 합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let valueNum = 10 // 선언/할당문
let expressionNum = 10 + 10 // 표현식, 선언/할당문

valueNum * 10 // 표현식
valueNum - 100 // 표현식

console.log(valueNum) // 10
console.log(expressionNum) // 20&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;위 &lt;code class=&quot;language-text&quot;&gt;valueNum&lt;/code&gt; 변수는 아무리 표현식을 작성한다 하더라도 값에 할당하지 않았기 때문에 여전히 처음 할당된 값인 &lt;code class=&quot;language-text&quot;&gt;10&lt;/code&gt;인 것을 볼 수 있습니다. 변수 식별자를 참조하는 것은 값을 생성하진 않지만 값을 평가하므로 &lt;code class=&quot;language-text&quot;&gt;value * 10&lt;/code&gt;은 표현식입니다.&lt;/p&gt;
&lt;p&gt;반면 &lt;code class=&quot;language-text&quot;&gt;expressionNum&lt;/code&gt;은 &lt;strong&gt;표현식이 평가된 결과&lt;/strong&gt;가 할당되어 &lt;code class=&quot;language-text&quot;&gt;20&lt;/code&gt;이라는 값이 반영되었습니다.&lt;/p&gt;
&lt;p&gt;따라서 식이란, &lt;strong&gt;값으로 평가될 수 있는 모든 문&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;값으로 평가된다는 말을 다시 한 번 살펴봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;1 + 2 == 3 // true&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;좌항 &lt;code class=&quot;language-text&quot;&gt;1+2&lt;/code&gt;는 표현식인데, 값과 동등하다고 결과가 나옵니다. 표현식과 표현식이 평가된 결과(=값)은 &lt;strong&gt;동치&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;이 말은 값이 위치할 수 있는 곳에 표현식이 있을 수 있다는 뜻입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;br/&gt;
&lt;h3 id=&quot;문&quot; style=&quot;position:relative;&quot;&gt;문&lt;a href=&quot;#%EB%AC%B8&quot; aria-label=&quot;문 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;문은 기본적으로 어떤 태스크를 수행합니다. 프로그램 실행의 최소 단위죠. 무언가를 실행하라고 컴퓨터에게 지시하기 때문에 &lt;strong&gt;명령문&lt;/strong&gt;이라고도 불립니다.&lt;/p&gt;
&lt;p&gt;문들이 모여 프고그램이 되고, 이 문을 잘 작성하고 나열하는 것이 프로그래밍이 됩니다.&lt;/p&gt;
&lt;p&gt;자바스크립트의 문은 앞서 살펴본 예약어에 나온 것들이 있습니다. 종류는 선언문, 할당문, 조건문, 반복문 등으로 구분할 수 있습니다.&lt;/p&gt;
&lt;p&gt;다시 한번 살펴봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// 선언문
let num

// 할당문
num = 100

// 함수 선언문
function foo() {}

// 조건문
if (num &amp;gt; 1) {
  console.log(&amp;quot;1보다 큰 수!&amp;quot;)
}

// 반복문
for (let i = 0; i &amp;lt; num; i++) {
  console.log(i)
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이 외에도&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do ... while&lt;/li&gt;
&lt;li&gt;switch ~ case ... default&lt;/li&gt;
&lt;li&gt;debugger&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 문들이 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;br/&gt;
&lt;h2 id=&quot;문과-표현식의-구분&quot; style=&quot;position:relative;&quot;&gt;문과 표현식의 구분&lt;a href=&quot;#%EB%AC%B8%EA%B3%BC-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EA%B5%AC%EB%B6%84&quot; aria-label=&quot;문과 표현식의 구분 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;표현식과 문의 구분이 애매모호하다고 느끼셨을 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let num // 선언문. 값으로 평가될 수 없음

num = 1 + 1 // 값으로 표현되는 표현식이면서도 할당문&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;위 예제처럼 표현식이 문의 일부가 될 수도 있고, 표현식이 문 자체일 수도 있기 때문입니다.&lt;/p&gt;
&lt;p&gt;그렇다면 어떻게 이 둘을 구분하면 좋을까요?&lt;/p&gt;
&lt;p&gt;답은 간단합니다. &lt;strong&gt;표현식은 값으로 평가&lt;/strong&gt;될 수 있다 하였죠? 변수에 할당해보면 됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const alwaysTrue = true;
let foo = if(alwaysTrue) {console.log(&amp;#39;HI&amp;#39;)}; // Uncaught SyntaxError: Unexpected token &amp;#39;if&amp;#39;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt;는 문이기 때문에 변수에 할당할 수 없습니다.&lt;/p&gt;
&lt;p&gt;에러 메시지를 보면 &lt;code class=&quot;language-text&quot;&gt;Uncaught SyntaxError: Unexpected token &apos;if&apos;&lt;/code&gt; 라고 뜨는데요. 여기서 &lt;strong&gt;token&lt;/strong&gt;이라는 게 문을 구성하는 최소단위 요소입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let score = 10 + 20&lt;/code&gt;이라는 문에서는 &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;score&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;=&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;10&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;20&lt;/code&gt;이 각각의 토큰입니다.&lt;/p&gt;
&lt;p&gt;또 다른 예제를 살펴볼게요.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// 선언문
let x

x = 100 // 할당문이자 표현식&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;x = 100&lt;/code&gt;은 표현식입니다. 하지만 할당되는 &lt;strong&gt;값&lt;/strong&gt;이죠. 따라서 값처럼 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;심지어 이런 모습도 가능합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var x = (y = 10)

console.log(x) // 10
console.log(y) // 10&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;도대체 무슨 코드인가 싶죠? 이 코드는 아래코드의 축약형입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;y = 10 // y는 글로벌 변수
var x = y&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;다만 변수를 이런 식으로 할당하는 건 글로벌 변수가 되는 등의 위험이 존재하고, 또한 읽기 쉬운 코드가 아니기에 추천하진 않습니다.&lt;/p&gt;
&lt;p&gt;이 밖에도 &lt;strong&gt;함수 표현식&lt;/strong&gt;이 있습니다. 함수는 함수 선언식과 함수 표현식으로 나뉘는데요.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// 함수 선언식
function foo() {
  //...
}

// 함수 표현식
let bar = function () {
  //...
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이 둘의 차이는 &lt;strong&gt;호이스팅&lt;/strong&gt;입니다. 선언식은 호이스팅에 영향을 받지만, 표현식은 영향받지 않습니다.&lt;br&gt;
함수에 대해서는 이후에 좀더 자세히 살펴보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 자바스크립트의 연산자에 대해 알아보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-variable-naming&quot;&gt;변수 명명 규칙&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-value-expression-statement&quot;&gt;자바스크립트 연산자&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[싱글톤 패턴]]></title><description><![CDATA[시리즈를 시작하며... patterns…]]></description><link>https://yeony99.github.io/tech/react-pattern-singleton</link><guid isPermaLink="false">https://yeony99.github.io/tech/react-pattern-singleton</guid><pubDate>Sun, 18 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;시리즈를-시작하며&quot; style=&quot;position:relative;&quot;&gt;시리즈를 시작하며...&lt;a href=&quot;#%EC%8B%9C%EB%A6%AC%EC%A6%88%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0&quot; aria-label=&quot;시리즈를 시작하며 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.patterns.dev/&quot;&gt;patterns&lt;/a&gt;에 정리된 리액트 프로젝트 패턴을 공부하며 정리하는 글임을 알립니다.&lt;br&gt;
시리즈 내 모든 글의 출처는 위 사이트를 기반으로 합니다.&lt;/p&gt;
&lt;p&gt;별도 참고 자료가 있을 시 해당 자료의 출처만 기재합니다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;디자인-패턴이란&quot; style=&quot;position:relative;&quot;&gt;디자인 패턴이란&lt;a href=&quot;#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;디자인 패턴이란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;디자인 패턴은 소프트웨어 개발 과정에서 발생하는 문제에 해결책을 제시하는 개념입니다. 구현을 직접적으로 제공하지는 않지만, 문제 상황을 최적화된 방법으로 해결할 수 있도록 돕는 컨셉입니다.
&lt;br/&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;싱글톤-패턴-singleton-pattern&quot; style=&quot;position:relative;&quot;&gt;싱글톤 패턴 (Singleton Pattern)&lt;a href=&quot;#%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4-singleton-pattern&quot; aria-label=&quot;싱글톤 패턴 singleton pattern permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;싱글톤은 &lt;strong&gt;단 한 번만 인스턴스화 가능&lt;/strong&gt;하며, &lt;strong&gt;전역(global)&lt;/strong&gt; 에서 접근 가능한 클래스를 일컫습니다. &lt;i&gt;Singleton 인스턴스&lt;/i&gt;는 앱 전역에서 공유되어, 앱 전역 상태관리에 적합합니다.
&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;단-한-번만-인스턴스화-가능&quot; style=&quot;position:relative;&quot;&gt;단 한 번만 인스턴스화 가능&lt;a href=&quot;#%EB%8B%A8-%ED%95%9C-%EB%B2%88%EB%A7%8C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%ED%99%94-%EA%B0%80%EB%8A%A5&quot; aria-label=&quot;단 한 번만 인스턴스화 가능 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;이 말의 의미는 &lt;code class=&quot;language-text&quot;&gt;new&lt;/code&gt; 키워드로 인스턴스 생성을 여러 번 하지 못한다는 의미입니다.&lt;/p&gt;
&lt;p&gt;일반적인 인스턴스 생성방법은 이렇습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let counter = 0

class Counter {
  getInstance() {
    return this
  }

  getCount() {
    return counter
  }

  increment() {
    return ++counter
  }

  decrement() {
    return --counter
  }
}

const counter1 = new Counter()
const counter2 = new Counter()

console.log(counter1.getInstance() === counter2.getInstance()) // false&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이렇게 &lt;code class=&quot;language-text&quot;&gt;new&lt;/code&gt; 키워드로 생성한 인스턴스는 서로 같지 않음을 알 수 있습니다. 인스턴스가 다르다는 것은 같은 레퍼런스를 가지지 않는다는 의미입니다.&lt;/p&gt;
&lt;p&gt;그렇다면 동일한 레퍼런스를 가지게 하려면 어떻게 하면 될까요? 여러 방법이 있습니다.&lt;/p&gt;
&lt;h4 id=&quot;instance-변수-만들기&quot; style=&quot;position:relative;&quot;&gt;instance 변수 만들기&lt;a href=&quot;#instance-%EB%B3%80%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;instance 변수 만들기 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let instance // instance 변수 선언
let counter = 0

class Counter {
  constructor() {
    if (instance) {
      // instance가 존재하면 에러 발생시키기
      throw new Error(&amp;quot;인스턴스는 한 번만 만들 수 있습니다!&amp;quot;)
    }
  }

  getInstance() {
    return this
  }

  getCount() {
    return counter
  }

  increment() {
    return ++counter
  }

  decrement() {
    return --counter
  }
}

const singletonCounter = Object.freeze(new Counter())
// const counter2 = new Counter() // 에러 발생&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt; 생성자에 객체 초기화시 instance가 이미 있는지 여부를 확인합니다. 그리고 &lt;code class=&quot;language-text&quot;&gt;Object.freeze&lt;/code&gt;를 통해 객체를 수정할 수 없게 합니다.&lt;/p&gt;
&lt;p&gt;인스턴스를 하나만 만들게 강제하는 방식에는 장단점이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장점
&lt;ul&gt;
&lt;li&gt;메모리 공간 절약&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;단점
&lt;ul&gt;
&lt;li&gt;자바스크립트 언어 자체의 한계점이 있다. 클래스 작성 없이도 객체를 만들 수 있기 때문에 일종의 오버 엔지니어링에 해당&lt;/li&gt;
&lt;li&gt;JS에서 싱글톤은 안티패턴으로 취급됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위의 예제는 &lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt;로 객체를 생성해 컨트롤하였는데, 자바스크립트는 그냥 &lt;code class=&quot;language-text&quot;&gt;const counter = {}&lt;/code&gt; 라는 간단한 할당으로 객체 리터럴을 만들 수 있습니다. 따라서 위와 같은 패턴은 적합하지는 않습니다.&lt;/p&gt;
&lt;h3 id=&quot;객체-리터럴-사용&quot; style=&quot;position:relative;&quot;&gt;객체 리터럴 사용&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;객체 리터럴 사용 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let count = 0

const counter = {
  increment() {
    return ++count
  },

  decrement() {
    return --count
  },
}

Object.freeze(counter)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt;로 인스턴스를 생성하는 것보다 훨씬 간편하다고 느껴집니다.&lt;/p&gt;
&lt;h3 id=&quot;테스팅&quot; style=&quot;position:relative;&quot;&gt;테스팅&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8C%85&quot; aria-label=&quot;테스팅 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;싱글톤 패턴으로 구현된 코드를 테스트하는 것은 조금 까다롭다고 합니다. 인스턴스를 한 번만 생성할 수 있기 때문에, 이전에 생성된 전역 인스턴스를 수정하는 방향으로 테스트가 진행됩니다. 테스트 진행에 순서가 생기게 되면 이전 테스트에서 사용된 값이 남아있어 원활히 진행되지 못할 수 있습니다.&lt;/p&gt;
&lt;p&gt;따라서 하나의 테스트가 끝나면 인스턴스 변경사항들을 초기화한 후 다음 테스트를 진행합니다.&lt;/p&gt;
&lt;p&gt;patterns에서는 테스트 라이브러리 &lt;strong&gt;jest&lt;/strong&gt; 를 사용한 예제를 제공하였습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// 테스트를 진행할 인스턴스 불러오기
import Counter from &amp;quot;../src/counterTest&amp;quot;

test(&amp;quot;incrementing 1 time should be 1&amp;quot;, () =&amp;gt; {
  Counter.increment()
  expect(Counter.getCount()).toBe(1)
})

test(&amp;quot;incrementing 3 extra times should be 4&amp;quot;, () =&amp;gt; {
  Counter.increment()
  Counter.increment()
  Counter.increment()
  expect(Counter.getCount()).toBe(4)
})

test(&amp;quot;decrementing 1  times should be 3&amp;quot;, () =&amp;gt; {
  Counter.decrement()
  expect(Counter.getCount()).toBe(3)
})&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;!-- 추가) js test, test libraries --&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;리액트의-상태관리&quot; style=&quot;position:relative;&quot;&gt;리액트의 상태관리&lt;a href=&quot;#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%9D%98-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;리액트의 상태관리 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React를 사용하며 전역 상태 관리가 필요할 때에는 싱글톤 객체를 만들기보다 &lt;strong&gt;Redux&lt;/strong&gt;나 &lt;strong&gt;React Context&lt;/strong&gt;를 사용합니다.&lt;/p&gt;
&lt;p&gt;싱글톤 객체가 인스턴스 값을 직접 수정할 수 있다면, 위 두 가지 도구는 &lt;strong&gt;read only&lt;/strong&gt; 상태를 갖도록 합니다. 디스패처 =&gt; (액션) =&gt; 실행 =&gt; 순수함수 reducer =&gt; 상태 업데이트로 이뤄지는 과정은 개발자가 의도한대로만 전역 상태가 움직이도록 그 흐름과 제어를 명확히 한다는 장점이 있습니다.&lt;/p&gt;
&lt;!-- ◾ [변수 명명 규칙](/tech/let-me-know-js-a-bit-js-variable-naming) 👈 이전 글 보기    --&gt;</content:encoded></item><item><title><![CDATA[[Flutter] Layout Widget 정리]]></title><description><![CDATA[Flutter에서는 모든 것이 위젯입니다. Layout도 위젯을 통해 구성할 수 있습니다. Flutter 레이아웃 위젯은 2가지 유형이 있습니다. Single-child layout Multi-child layout Single-child layout…]]></description><link>https://yeony99.github.io/tech/flutter-layout-widget</link><guid isPermaLink="false">https://yeony99.github.io/tech/flutter-layout-widget</guid><pubDate>Fri, 16 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;!--
📍 어떤 Layout Widget들이 있고, 어떤 역할인지 빠르게 익힌다.

📍 code lab을 공부하며 직접 배운 내용을 적용해본다. --&gt;
&lt;p&gt;Flutter에서는 모든 것이 위젯입니다. Layout도 위젯을 통해 구성할 수 있습니다.&lt;/p&gt;
&lt;p&gt;Flutter 레이아웃 위젯은 2가지 유형이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single-child layout&lt;/li&gt;
&lt;li&gt;Multi-child layout&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;single-child-layout&quot; style=&quot;position:relative;&quot;&gt;Single-child layout&lt;a href=&quot;#single-child-layout&quot; aria-label=&quot;single child layout permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;먼저 Signle-child layout은 이름에서 알 수 있듯이, 하나의 자식(하위) 위젯만 가질 수 있습니다.&lt;/p&gt;
&lt;p&gt;플러터의 위젯은 정말 많기 때문에 일부 필수적인 위젯만 알아보도록 하겠습니다.&lt;/p&gt;
&lt;h3 id=&quot;container&quot; style=&quot;position:relative;&quot;&gt;Container&lt;a href=&quot;#container&quot; aria-label=&quot;container permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Container&lt;/code&gt;는 크기(height, width), 배경색, 위치 지정 등의 옵션을 제공하는 위젯입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Container(
  height: 200.0,
  width: double.infinity, // 스크린에 맞춰 확장
  padding: cosnt Edgeinsets.all(7.0),
  color: Colors.red,
  child: Center(
    //...
  ),
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;padding&quot; style=&quot;position:relative;&quot;&gt;Padding&lt;a href=&quot;#padding&quot; aria-label=&quot;padding permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Padding&lt;/code&gt;은 자식 위젯에 패딩을 추가합니다.&lt;/p&gt;
&lt;p&gt;padding은 여백을 의미하는데요. 테두리를 기준으로 컨텐츠 안쪽의 여백을 의미합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/190837580-e3d14f06-6d2b-4faa-8f7f-61a79434fb99.png&quot; alt=&quot;Flutter Padding&quot;&gt;&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Padding(
  padding: EdgeInsets.all(10.0),
  child: Container(
    //...
  ),
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;center&quot; style=&quot;position:relative;&quot;&gt;Center&lt;a href=&quot;#center&quot; aria-label=&quot;center permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Center&lt;/code&gt;는 이름 그대로 자식 위젯을 가운데에 위치시킬 수 있는 위젯입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Center(
  child: //...
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;align&quot; style=&quot;position:relative;&quot;&gt;Align&lt;a href=&quot;#align&quot; aria-label=&quot;align permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Align&lt;/code&gt;은 자식 위젯의 위치를 세밀하게 지정할 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Align(
  alignment: Alignment.bottomCenter,
  child: const Container(
    //...
  ),
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;ul&gt;
&lt;li&gt;Alignment.topLeft&lt;/li&gt;
&lt;li&gt;Alignment.topCenter&lt;/li&gt;
&lt;li&gt;Alignment.topRight&lt;/li&gt;
&lt;li&gt;Alignment.bottomLeft&lt;/li&gt;
&lt;li&gt;Alignment.bottomCenter&lt;/li&gt;
&lt;li&gt;Alignment.bottomRight&lt;/li&gt;
&lt;li&gt;Alignment.center&lt;/li&gt;
&lt;li&gt;Alignment.centerLeft&lt;/li&gt;
&lt;li&gt;Alignment.centerRight&lt;/li&gt;
&lt;li&gt;Alignment(x, y)
&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/190838139-0a0828c1-8e49-4678-a8e9-4795dbdc38fe.png&quot; alt=&quot;Aligment coordinate&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;마지막 Alignment를 사용해 x, y 좌표를 기준으로 값을 입력하면 해당 위치에 자식 위젯이 자리잡습니다. 다만 이름이 명확한(상수로 취급되는) 다른 속성들을 사용하는 걸 권장한다고 합니다.&lt;/p&gt;
&lt;h3 id=&quot;sizedbox&quot; style=&quot;position:relative;&quot;&gt;SizedBox&lt;a href=&quot;#sizedbox&quot; aria-label=&quot;sizedbox permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SizedBox&lt;/code&gt;는 height, width를 지정할 수 있는 위젯입니다.&lt;/p&gt;
&lt;p&gt;만약 부모 위젯이 SideBox위젯의 크기를 제한하는 위젯이거나, 다른 SizedBox일 경우에는 자식 SizedBox위젯의 height, width값이 무시됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;SizedBox(
  height: 300.0,
  width: 300.0,
  child: const Container(
    //...
  ),
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;aspectratio&quot; style=&quot;position:relative;&quot;&gt;AspectRatio&lt;a href=&quot;#aspectratio&quot; aria-label=&quot;aspectratio permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;AspectRatio&lt;/code&gt;는 16:9와 같은 비율을 지정할 수 있게 하는 위젯입니다.&lt;/p&gt;
&lt;p&gt;정확한 크기와는 관계없이 지정된 비율(종횡비)로 자식 위젯의 비율을 유지합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;AspectRatio(
  aspectRatio: 16 / 9,
  child: const Container(
    //...
  ),
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;baseline&quot; style=&quot;position:relative;&quot;&gt;Baseline&lt;a href=&quot;#baseline&quot; aria-label=&quot;baseline permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Baseline&lt;/code&gt;은 자식 기준선에 따라 자식의 위치를 지정하는 위젯입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Center(
  child: const Container(
    height: 200,
    width: 200,
    color: Colors.blue,
    child: Baseline(
      baseline: 20.0, // 기준선 범위 지정
      baselineType: TextBaseline.alphabetic,
      child: const Container(
        height: 50,
        width: 50,
        color: Colors.red,
      ),
    ),
  ),
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/190838738-4da461be-319f-4d74-bc4d-0c74f01e1bab.png&quot; alt=&quot;Flutter Baseline&quot;&gt;&lt;/p&gt;
&lt;p&gt;baseline 속성을 20.0으로 주니 부모 위젯의 상위부터 20까지 가상의 기준선이 그어진 겁니다. 그 기준선 위부터 자식 위젯이 위치하게 됩니다. 위 이미지에서는 자식 위젯이 남은 부모위젯의 공간(20.0)보다 높이(50.0)가 길죠? 따라서 부모 위젯을 벗어나는 모양으로 그려진 겁니다.&lt;/p&gt;
&lt;h3 id=&quot;constrainedbox&quot; style=&quot;position:relative;&quot;&gt;ConstrainedBox&lt;a href=&quot;#constrainedbox&quot; aria-label=&quot;constrainedbox permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ConstrainedBox&lt;/code&gt;는 자식에 추가적인 제약사항을 거는 위젯입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;ConstrainedBox(
  constraints: const BoxConstraints.expand(),
  child: const Container(
    //...
  ),
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&quot;multi-child-layout&quot; style=&quot;position:relative;&quot;&gt;Multi-child layout&lt;a href=&quot;#multi-child-layout&quot; aria-label=&quot;multi child layout permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Multi-child layout은 자식 위젯을 여러 개 가질 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;row&quot; style=&quot;position:relative;&quot;&gt;Row&lt;a href=&quot;#row&quot; aria-label=&quot;row permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Row&lt;/code&gt; 위젯은 자식 위젯들을 수평 배열로 표시합니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Expaneded&lt;/code&gt;로 감싸면 차지할 수 있는 가로 공간을 꽉 채우도록 확장됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Row(
  children: const &amp;lt;Widget&amp;gt;[
    Expanded(
      child: Text(&amp;#39;Hi&amp;#39;, textAlign: TextAlign.center),
    ),
    Expanded(
      child: Text(&amp;#39;Hi2&amp;#39;, textAlign: TextAlign.center),
    ),
  ],
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;column&quot; style=&quot;position:relative;&quot;&gt;Column&lt;a href=&quot;#column&quot; aria-label=&quot;column permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Column&lt;/code&gt; 위젯은 자식 위젯들을 수직 배열로 표시합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Column(
  crossAxisAlignment: CrossAxisAlignment.start,
  mainAxisSize: MainAxisSize.min,
  children: &amp;lt;Widget&amp;gt;[
    const Text(&amp;#39;HI&amp;#39;),
    const Text(&amp;#39;HI2&amp;#39;),
    const Text(&amp;#39;HI3&amp;#39;),
    const Text(&amp;#39;HI4&amp;#39;),
    //...
  ],
)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;만약 수직 정렬된 위젯들을 스크린 범위를 넘어 스크롤하고 싶으면 &lt;code class=&quot;language-text&quot;&gt;ListView&lt;/code&gt;를 사용해야 합니다. 기본적으로 Column은 사용할 수 있는 공간을 넘은 자식 위젯들을 오류로 간주합니다.&lt;/p&gt;
&lt;h3 id=&quot;listview&quot; style=&quot;position:relative;&quot;&gt;ListView&lt;a href=&quot;#listview&quot; aria-label=&quot;listview permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ListView&lt;/code&gt;는 가장 흔하게 사용되는 &lt;strong&gt;스크롤&lt;/strong&gt; 위젯입니다. 스크롤되는 방향으로 자식을 차례로 나열합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;ListView(
  padding: const EdgeInsets.all(5),
  // scrollDirection: Axis.horizontal, // 수평 정렬
  children: &amp;lt;Widget&amp;gt;[
    Container(
      height: 50,
      color: Colors.black[600],
      child: const Center(child: Text(&amp;#39;A&amp;#39;)),
    ),
    Container(
      height: 50,
      color: Colors.black[500],
      child: const Center(child: Text(&amp;#39;B&amp;#39;)),
    ),
    Container(
      height: 50,
      color: Colors.black[100],
      child: const Center(child: Text(&amp;#39;C&amp;#39;)),
    ),
  ],
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;stack&quot; style=&quot;position:relative;&quot;&gt;Stack&lt;a href=&quot;#stack&quot; aria-label=&quot;stack permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Stack&lt;/code&gt; 위젯은 자식 위젯들을 겹치게 할 때 유용하게 사용됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;Stack(
  children: &amp;lt;Widget&amp;gt;[
    Container(
      width: 100,
      height: 100,
      color: Colors.red,
    ),
    Container(
      width: 90,
      height: 90,
      color: Colors.green,
    ),
    Container(
      width: 80,
      height: 80,
      color: Colors.blue,
    ),
  ],
),&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이름 그대로 &lt;strong&gt;스택&lt;/strong&gt;구조처럼, 선입후출 방식으로 위젯이 표현됩니다.&lt;br&gt;
가장 마지막에 있는 파란색 위젯이 가장 앞에 위치합니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/flutter-what-is-widget&quot;&gt;[Flutter] Widget 다루기&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/flutter-text-widget&quot;&gt;[Flutter] Text Widget 사용하기&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[프로젝트 아이디어가 생겼다.]]></title><description><![CDATA[옛날부터 하고싶었던, 내가 관심 있는 분야로 서비스를 하나 만들어볼 생각이다.
React Pattern을 공부하면서 어떤 디자인 패턴으로 프로젝트를 구상할 지 구체화해봐야겠다.]]></description><link>https://yeony99.github.io/log/think-about-idea</link><guid isPermaLink="false">https://yeony99.github.io/log/think-about-idea</guid><pubDate>Wed, 14 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;옛날부터 하고싶었던, 내가 관심 있는 분야로 서비스를 하나 만들어볼 생각이다.
React Pattern을 공부하면서 어떤 디자인 패턴으로 프로젝트를 구상할 지 구체화해봐야겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (8) - 자바스크립트 예약어 모음]]></title><description><![CDATA[예약어란? 예약어(Reserved Words…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-js-reserved-words</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-js-reserved-words</guid><pubDate>Wed, 14 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;예약어란&quot; style=&quot;position:relative;&quot;&gt;예약어란?&lt;a href=&quot;#%EC%98%88%EC%95%BD%EC%96%B4%EB%9E%80&quot; aria-label=&quot;예약어란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;예약어(Reserved Words)란 자바스크립트 엔진이 &lt;strong&gt;이 단어는 이 뜻으로만 해석하겠다&lt;/strong&gt;라고 정해놓은 단어입니다.&lt;/p&gt;
&lt;p&gt;예약어는 변수(상수), 함수, 클래스 등 식별자 네이밍 시에 사용할 수 없습니다.&lt;/p&gt;
&lt;p&gt;이런 예약어는 자바스크립트 코드 어디서든 식별자로 사용할 수 없는 경우도 있고, 상황에 따라 예약어로 취급되는 단어도 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;예약어-목록&quot; style=&quot;position:relative;&quot;&gt;예약어 목록&lt;a href=&quot;#%EC%98%88%EC%95%BD%EC%96%B4-%EB%AA%A9%EB%A1%9D&quot; aria-label=&quot;예약어 목록 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;예약어에는 지난 글에서 살펴봤던 키워드인 var, const도 포함됩니다.
&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; 키워드는 엄격모드에서만 예약어로 취급됩니다.&lt;/p&gt;
&lt;!-- 예약어 분류하기 --&gt;
&lt;h3 id=&quot;반복-관련-예약어&quot; style=&quot;position:relative;&quot;&gt;반복 관련 예약어&lt;a href=&quot;#%EB%B0%98%EB%B3%B5-%EA%B4%80%EB%A0%A8-%EC%98%88%EC%95%BD%EC%96%B4&quot; aria-label=&quot;반복 관련 예약어 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;for
&lt;ul&gt;
&lt;li&gt;반복 (loop)를 수행할 문&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;break
&lt;ul&gt;
&lt;li&gt;문&lt;/li&gt;
&lt;li&gt;반복문, switch문, label문의 수행을 중지하고 다음 프로그램으로 넘어가게 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;do ... while
&lt;ul&gt;
&lt;li&gt;반복문&lt;/li&gt;
&lt;li&gt;조건이 true가 될 때까지 반복을 수행&lt;/li&gt;
&lt;li&gt;do 블록 속 코드는 무조건 한 번 이상 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;continue
&lt;ul&gt;
&lt;li&gt;반복되는 loop 속에서 현재 반복에서의 명령을 종료하고 다음 반복으로 넘겨 반복 루프 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;조건-관련-예약어&quot; style=&quot;position:relative;&quot;&gt;조건 관련 예약어&lt;a href=&quot;#%EC%A1%B0%EA%B1%B4-%EA%B4%80%EB%A0%A8-%EC%98%88%EC%95%BD%EC%96%B4&quot; aria-label=&quot;조건 관련 예약어 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;if ... else
&lt;ul&gt;
&lt;li&gt;지정된 조건이 truthy 인 경우 실행&lt;/li&gt;
&lt;li&gt;조건이 falsy 라면 다른 조건절 속 코드 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;switch ~ case
&lt;ul&gt;
&lt;li&gt;특정 표현식을 평가해 case절과 일치하는 명령을 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;default
&lt;ul&gt;
&lt;li&gt;switch ~ case 문에 해당하는 case가 없을 경우 실행되는 문&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;클래스-및-함수-관련-예약어&quot; style=&quot;position:relative;&quot;&gt;클래스 및 함수 관련 예약어&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%8F-%ED%95%A8%EC%88%98-%EA%B4%80%EB%A0%A8-%EC%98%88%EC%95%BD%EC%96%B4&quot; aria-label=&quot;클래스 및 함수 관련 예약어 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;class
&lt;ul&gt;
&lt;li&gt;선언&lt;/li&gt;
&lt;li&gt;프로토타입 기반으로 상속&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;super
&lt;ul&gt;
&lt;li&gt;키워드&lt;/li&gt;
&lt;li&gt;객체 리터럴 혹은 클래스의 [[Prototype]] 속성에 액세스, 슈퍼 클래스(==부모 클래스)의 생성자 호출 시 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;extends
&lt;ul&gt;
&lt;li&gt;다른 클래스의 자식 클래스(==서브 클래스)를 생성하기 위해 사용&lt;/li&gt;
&lt;li&gt;클래스 선언, 클래스 표현식에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;function
&lt;ul&gt;
&lt;li&gt;선언&lt;/li&gt;
&lt;li&gt;Function 생성자와 함수표현식을 사용해 정의할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;new
&lt;ul&gt;
&lt;li&gt;연산자&lt;/li&gt;
&lt;li&gt;사용자 정의 인스턴스 혹은 생성자 함수가 있는 기본 인스턴스를 통해 새로운 인스턴스 생성 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;void
&lt;ul&gt;
&lt;li&gt;연산자&lt;/li&gt;
&lt;li&gt;주어진 값(표현식)을 평가 후 undefined를 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;try...catch
&lt;ul&gt;
&lt;li&gt;문&lt;/li&gt;
&lt;li&gt;try코드 블록 속에서 예외(exception) 발생(throw)시 응답을 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;throw
&lt;ul&gt;
&lt;li&gt;문&lt;/li&gt;
&lt;li&gt;사용자 정의 예외 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;객체-관련-예약어&quot; style=&quot;position:relative;&quot;&gt;객체 관련 예약어&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EA%B4%80%EB%A0%A8-%EC%98%88%EC%95%BD%EC%96%B4&quot; aria-label=&quot;객체 관련 예약어 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;instanceof
&lt;ul&gt;
&lt;li&gt;연산자&lt;/li&gt;
&lt;li&gt;prototype 생성자 속성이 객체의 프로토타입 체인에 있는지 확인(true/false)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;delete
&lt;ul&gt;
&lt;li&gt;연산자&lt;/li&gt;
&lt;li&gt;객체에서 특정 속성을 제거 (key로 접근)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;in
&lt;ul&gt;
&lt;li&gt;지정된 속성이 특정 객체(혹은 프로토타입)에 있는지 확인(true/false)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;내보내기--불러오기-예약어&quot; style=&quot;position:relative;&quot;&gt;내보내기 / 불러오기 예약어&lt;a href=&quot;#%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0--%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0-%EC%98%88%EC%95%BD%EC%96%B4&quot; aria-label=&quot;내보내기  불러오기 예약어 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;export
&lt;ul&gt;
&lt;li&gt;문&lt;/li&gt;
&lt;li&gt;함수, 객체, 원시 값을 내보낼 때 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;import
&lt;ul&gt;
&lt;li&gt;문&lt;/li&gt;
&lt;li&gt;export로 내보내진 값을 가져올 때 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;엄격모드strict-mode-시-예약어&quot; style=&quot;position:relative;&quot;&gt;엄격모드(strict mode) 시 예약어&lt;a href=&quot;#%EC%97%84%EA%B2%A9%EB%AA%A8%EB%93%9Cstrict-mode-%EC%8B%9C-%EC%98%88%EC%95%BD%EC%96%B4&quot; aria-label=&quot;엄격모드strict mode 시 예약어 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;implements&lt;/li&gt;
&lt;li&gt;interface&lt;/li&gt;
&lt;li&gt;package&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;static&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;기타&quot; style=&quot;position:relative;&quot;&gt;기타&lt;a href=&quot;#%EA%B8%B0%ED%83%80&quot; aria-label=&quot;기타 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;finally&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;li&gt;yield&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;특별한-의미를-가지는-식별자&quot; style=&quot;position:relative;&quot;&gt;특별한 의미를 가지는 식별자&lt;a href=&quot;#%ED%8A%B9%EB%B3%84%ED%95%9C-%EC%9D%98%EB%AF%B8%EB%A5%BC-%EA%B0%80%EC%A7%80%EB%8A%94-%EC%8B%9D%EB%B3%84%EC%9E%90&quot; aria-label=&quot;특별한 의미를 가지는 식별자 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;여기서는 예약어는 아니지만, 특정한 코드 맥락에서 특별한 의미를 가지는 단어들을 알아봅니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arguments (엄격모드에서 식별자로 사용 불가)&lt;/li&gt;
&lt;li&gt;async : function 키워드 앞에 붙여 사용 (해당 함수는 항상 프로미스를 반환)&lt;/li&gt;
&lt;li&gt;await : async 함수 바디와 함께 있을 때만 예약어&lt;/li&gt;
&lt;li&gt;eval : (엄격모드에서 식별자로 사용 불가)&lt;/li&gt;
&lt;li&gt;get : 객체 속성 접근 시 호출할 함수 바인딩&lt;/li&gt;
&lt;li&gt;set : 객체 속성 할당 시도할 시 호출할 함수 바인딩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;모든 키워드를 당장 이해할 수 없습니다. 그저 이런 키워드들은 단독으로 변수명 등에 사용할 수 없다는 사실을 유념하고 넘어가도록 합니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 값, 식, 문에 대해 알아보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-variable-naming&quot;&gt;변수 명명 규칙&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-value-expression-statement&quot;&gt;값, 식, 문&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Flutter] Widget 다루기]]></title><description><![CDATA[모든 것이 Widget인 Flutter widget이라고만 하면 인터페이스 요소 하나로 받아들일 수 있습니다. ppt로 발표자료를 만들어 보신 적이 있다면 이해하기 쉽습니다. 큰제목은 4…]]></description><link>https://yeony99.github.io/tech/flutter-what-is-widget</link><guid isPermaLink="false">https://yeony99.github.io/tech/flutter-what-is-widget</guid><pubDate>Sat, 10 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;모든-것이-widget인-flutter&quot; style=&quot;position:relative;&quot;&gt;모든 것이 Widget인 Flutter&lt;a href=&quot;#%EB%AA%A8%EB%93%A0-%EA%B2%83%EC%9D%B4-widget%EC%9D%B8-flutter&quot; aria-label=&quot;모든 것이 widget인 flutter permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;widget&lt;/strong&gt;이라고만 하면 인터페이스 요소 하나로 받아들일 수 있습니다.&lt;/p&gt;
&lt;p&gt;ppt로 발표자료를 만들어 보신 적이 있다면 이해하기 쉽습니다.&lt;br&gt;
큰제목은 48포인트 글자 크기가 설정된 텍스트 상자에, 여러 이미지나 도형은 그룹화를 해 동일한 간격을 두고 배치하기도 합니다.&lt;br&gt;
메뉴라든가, 텍스트 상자 등 ppt를 만들 때 네모 상자를 그려 만드는 것들을 위젯이라고 볼 수 있죠.&lt;/p&gt;
&lt;p&gt;플러터도 똑같습니다. 플러터에선 &lt;strong&gt;모든 것이 위젯&lt;/strong&gt;이라 생각하면 됩니다.
ppt예시를 위에서 들었는데요. 플러터의 위젯도 비슷합니다.&lt;/p&gt;
&lt;p&gt;플러터에서는 &lt;code class=&quot;language-text&quot;&gt;Text&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Container&lt;/code&gt;, 가로 세로 정렬을 하는 &lt;code class=&quot;language-text&quot;&gt;Row&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Column&lt;/code&gt; 등이 모두 &lt;strong&gt;위젯&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;br/&gt;
&lt;h2 id=&quot;widget의-구분&quot; style=&quot;position:relative;&quot;&gt;Widget의 구분&lt;a href=&quot;#widget%EC%9D%98-%EA%B5%AC%EB%B6%84&quot; aria-label=&quot;widget의 구분 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;플러터의 Widget은 2가지로 구분됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;State-full Widget&lt;/li&gt;
&lt;li&gt;Stateless Widget&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;별도의 해석이 없더라도 &lt;strong&gt;상태&lt;/strong&gt;의 여부에 따라 위젯이 구분됨을 알 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;상태state란&quot; style=&quot;position:relative;&quot;&gt;상태(state)란?&lt;a href=&quot;#%EC%83%81%ED%83%9Cstate%EB%9E%80&quot; aria-label=&quot;상태state란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;그러면 위젯의 상태란 무엇일까요?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html&quot;&gt;공식 docs&lt;/a&gt;에 따르면 &lt;strong&gt;State&lt;/strong&gt;란,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;위젯이 빌드될 때 동기적으로 읽을 수 있는 정보&lt;/li&gt;
&lt;li&gt;위젯의 생명주기가 끝나기 전까지 변경될 수 있는 정보&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이렇게 두 가지를 의미합니다. 결국은 어플리케이션에서 보여지는 모든 &lt;strong&gt;동적인 데이터&lt;/strong&gt;를 뜻하죠.&lt;/p&gt;
&lt;p&gt;예시를 들어보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어플 시작 화면의 어플 이름 표시 텍스트&lt;/li&gt;
&lt;li&gt;로그인된 회원의 닉네임 표시 텍스트&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;어떤 게 동적인 데이터일까요? 후자라고 생각하셨죠?&lt;br&gt;
로그인된 사용자의 닉네임은 사용자에 따라서, 혹은 로그인 여부에 따라 보여지는 텍스트가 다를테니까요.&lt;/p&gt;
&lt;h4 id=&quot;app-state--widget-state&quot; style=&quot;position:relative;&quot;&gt;App State / Widget State&lt;a href=&quot;#app-state--widget-state&quot; aria-label=&quot;app state  widget state permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;이런 데이터는 전역(global)/지역(local)로 나뉘어 관리할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;App state : 앱 전체에 걸쳐 사용되며, 여러 위젯에 반복되어 사용될 수 있는 상태 데이터&lt;/li&gt;
&lt;li&gt;Widget state : 특정 위젯 내에서만 사용되며, 공유나 반환할 필요가 없는 상태 데이터&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 데이터 처리를 플러터에서는 &lt;code class=&quot;language-text&quot;&gt;State-full Widget&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;Stateless Widget&lt;/code&gt;으로 구분해 작성하는 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;br/&gt;
&lt;h3 id=&quot;state-full-widget&quot; style=&quot;position:relative;&quot;&gt;State-full Widget&lt;a href=&quot;#state-full-widget&quot; aria-label=&quot;state full widget permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;State-full 위젯은 상태 변화를 감지하고, 변화가 있으면 다시 빌드하는 위젯입니다.&lt;/p&gt;
&lt;p&gt;플러터 프로젝트를 처음 시작하면 볼 수 있는 Flutter Demo Home Page 코드를 보겠습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// main.dart 파일

// 머티리얼 스타일 import
import &amp;#39;package:flutter/material.dart&amp;#39;;

// 앱 실행부
void main() {
  runApp(MyApp());
}

// StatelessWidget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: &amp;#39;Flutter Demo&amp;#39;,
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: &amp;#39;Flutter Demo Home Page&amp;#39;),
    );
  }
}


// StatefulWidget -- 1)
class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() =&amp;gt; _MyHomePageState();
}


// State 객체 -- 2)
class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; {

  // 변수 선언 및 초기화
  int _counter = 0;

  // 카운터 증가함수
  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }


  // 위젯 구현부
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        //...
    );
  }
}
&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;위 코드에서 &lt;code class=&quot;language-text&quot;&gt;MyHomePage&lt;/code&gt; class가 &lt;code class=&quot;language-text&quot;&gt;StatefulWidget&lt;/code&gt;을 상속(extends)받은 것을 볼 수 있습니다.&lt;br&gt;
그리고 &lt;code class=&quot;language-text&quot;&gt;_counter&lt;/code&gt; 변수를 이용해 &lt;strong&gt;State가 변화&lt;/strong&gt;할 때마다 다시 빌드합니다.&lt;/p&gt;
&lt;h4 id=&quot;statefulwidget의-구성&quot; style=&quot;position:relative;&quot;&gt;StatefulWidget의 구성&lt;a href=&quot;#statefulwidget%EC%9D%98-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;statefulwidget의 구성 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;StatefulWidget은 2가지 클래스로 구성되어 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변하는 부분&lt;/li&gt;
&lt;li&gt;변하지 않는 부분&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 예시코드에서 1번과 2번으로 표시해 둔 곳이 그렇습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// StatefulWidget -- 1)
class MyHomePage extends StatefulWidget {
  //...
  @override
  _MyHomePageState createState() =&amp;gt; _MyHomePageState();
}

// State 객체 -- 2)
class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; {
  //...
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;플러터는 본래 React에서 영감을 받은 프레임워크인데요. React의 특징을 간단하게 말하면 &lt;strong&gt;변화하는 부분만 교체한다&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;다시 말해 플러터에서 &lt;code class=&quot;language-text&quot;&gt;StatefulWidget&lt;/code&gt;을 사용할 때, 변하는 부분과 변하지 않는 부분을 나누어 2개의 &lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt;를 작성하게 되는 것이죠.&lt;/p&gt;
&lt;h3 id=&quot;stateless-widget&quot; style=&quot;position:relative;&quot;&gt;Stateless Widget&lt;a href=&quot;#stateless-widget&quot; aria-label=&quot;stateless widget permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;반대로 상태 Stateless Widget은 상태 변화에 반응하지 않고, 위젯의 라이프사이클 동안 정적인 상태를 유지합니다.&lt;/p&gt;
&lt;p&gt;말 그대로 State가 없는 위젯이지만, 그렇다고 Data가 없는 것은 아닙니다. 정확히는 &lt;strong&gt;변경될 데이터가 없다&lt;/strong&gt;고 이해할 수 있습니다.&lt;/p&gt;
&lt;p&gt;StatelessWidget은 이렇게 작성합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;class MyApp extends StatelessWidget {

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: &amp;#39;Flutter Demo&amp;#39;, // 정적 데이터
      theme: ThemeData(
        primarySwatch: Colors.blue, // 정적 데이터
      ),
      home: MyHomePage(title: &amp;#39;Flutter Demo Home Page&amp;#39;), // 정적 데이터
    );
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;변할 State가 없으니 변하지 않는 부분만 작성하면 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;br/&gt;
&lt;h2 id=&quot;기본-widget-정리&quot; style=&quot;position:relative;&quot;&gt;기본 Widget 정리&lt;a href=&quot;#%EA%B8%B0%EB%B3%B8-widget-%EC%A0%95%EB%A6%AC&quot; aria-label=&quot;기본 widget 정리 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;플러터에서는 모든 게 위젯입니다.&lt;/p&gt;
&lt;p&gt;다만 자주 쓰이고 기본적인 위젯만 알아보도록 합시다.&lt;/p&gt;
&lt;p&gt;참고 : &lt;a href=&quot;https://docs.flutter.dev/development/ui/widgets/basics&quot;&gt;Basic Widget&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;container&quot; style=&quot;position:relative;&quot;&gt;Container&lt;a href=&quot;#container&quot; aria-label=&quot;container permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Container&lt;/code&gt; 위젯은 다른 자식 위젯들을 감쌀 수 있는(wrap) 위젯입니다.&lt;/p&gt;
&lt;p&gt;Container위젯을 사용할 때 다음과 같은 옵션들을 정의할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alignment : 정렬&lt;/li&gt;
&lt;li&gt;constraints : 최대최소 너비, 높이 등을 제약&lt;/li&gt;
&lt;li&gt;padding : 내용과 테두리 사이의 간격 지정&lt;/li&gt;
&lt;li&gt;color : 컨테이너의 색상 지정&lt;/li&gt;
&lt;li&gt;transform : 변화되는 모션 지정(화면 전환 효과)&lt;/li&gt;
&lt;li&gt;child: 자식 위젯&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://api.flutter.dev/flutter/widgets/Container-class.html&quot;&gt;Container Widget&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;row--column&quot; style=&quot;position:relative;&quot;&gt;Row &amp;#x26; Column&lt;a href=&quot;#row--column&quot; aria-label=&quot;row  column permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Row&lt;/code&gt; 위젯은 &lt;strong&gt;children&lt;/strong&gt; 프로퍼티에 지정된 자식 위젯들을 가로로 배열하는 위젯입니다.&lt;/p&gt;
&lt;p&gt;플러터 공식문서에서는 자식 위젯이 여럿 있을 때 사용하는 것을 권장합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;children : List&lt;Widget&gt;&lt;/li&gt;
&lt;li&gt;derection : 주축(Axis)으로 사용할 방향&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://api.flutter.dev/flutter/widgets/Row-class.html&quot;&gt;Row Widget&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Row&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Column&lt;/code&gt;이 상대되는 개념인 것을 이미 아셨으리라고 봅니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Column&lt;/code&gt; 위젯은 자식 위젯들을 수직으로 배열하는 위젯입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://api.flutter.dev/flutter/widgets/Column-class.html&quot;&gt;Column Widget&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;text&quot; style=&quot;position:relative;&quot;&gt;Text&lt;a href=&quot;#text&quot; aria-label=&quot;text permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Text&lt;/code&gt; 위젯은 말 그대로 문자를 표시하는 위젯입니다.&lt;/p&gt;
&lt;p&gt;단일한 스타일의 텍스트 문자열을 보여주고, 레이아웃에 따라 여러 줄로 표시될 수도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;style : Text의 스타일 명시. 생략 시 DefaultTextStyle로 자동 지정&lt;/li&gt;
&lt;li&gt;textAlign : 정렬&lt;/li&gt;
&lt;li&gt;overflow: 레이아웃보다 문자열의 길이가 더 길 때 어떻게 처리할 지 명시&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://api.flutter.dev/flutter/widgets/Text-class.html&quot;&gt;Text Widget&lt;/a&gt;&lt;/p&gt;
&lt;!--
📍 Flutter의 핵심 Architecture를 이루는 Widget이 무엇이고, 어떤 구조로 앱을 구성하는지 이해한다.

📍 Flutter에서 Layout을 어떻게 만들어 나가는지 이해한다.

📍 Flutter의 기본적인 Layout Widget들의 사용법을 숙지하고 실습해본다. --&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/flutter-dart-and-flutter&quot;&gt;[Flutter] Dart 기본 문법&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/flutter-layout-widget&quot;&gt;[Flutter] Layout Widget 정리&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (7) - 변수 명명 규칙]]></title><description><![CDATA[변수 이름짓기(명명 규칙, Naming…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-js-variable-naming</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-js-variable-naming</guid><pubDate>Wed, 07 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;변수-이름짓기명명-규칙-naming란&quot; style=&quot;position:relative;&quot;&gt;변수 이름짓기(명명 규칙, Naming)란?&lt;a href=&quot;#%EB%B3%80%EC%88%98-%EC%9D%B4%EB%A6%84%EC%A7%93%EA%B8%B0%EB%AA%85%EB%AA%85-%EA%B7%9C%EC%B9%99-naming%EB%9E%80&quot; aria-label=&quot;변수 이름짓기명명 규칙 naming란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;변수, 상수, 함수 이름들을 &lt;strong&gt;식별자&lt;/strong&gt;라고 합니다.&lt;/p&gt;
&lt;p&gt;자바스크립트로 코딩할 때는 식별자들의 명명규칙을 지켜서 코딩하는 것이 좋습니다. 마치 글을 작성할 때 톤앤매너를 맞추는 것과 비슷한 맥락입니다.&lt;/p&gt;
&lt;p&gt;변수명만으로도 어떤 역할을 하는 변수인지 알 수 있는 경우도 많구요, 코드의 통일성, 가독성 또한 높여줍니다.&lt;/p&gt;
&lt;p&gt;앞서 알아본 자료형 분류와 변수/상수 구분에 따라 네이밍 규칙을 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;변수-명명-규칙&quot; style=&quot;position:relative;&quot;&gt;변수 명명 규칙&lt;a href=&quot;#%EB%B3%80%EC%88%98-%EB%AA%85%EB%AA%85-%EA%B7%9C%EC%B9%99&quot; aria-label=&quot;변수 명명 규칙 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;자바스크립트의 변수는 &lt;strong&gt;문자&lt;/strong&gt;로 선언해야 합니다.&lt;/p&gt;
&lt;p&gt;이 문자에는 알파벳과 UTF-8 언어, $, _ (언더바)가 포함됩니다. 문자 뒤에 붙는 숫자는 허용되나, 숫자로 시작하는 변수는 에러가 발생합니다.&lt;/p&gt;
&lt;h3 id=&quot;관습적인-문자-사용&quot; style=&quot;position:relative;&quot;&gt;관습적인 문자 사용&lt;a href=&quot;#%EA%B4%80%EC%8A%B5%EC%A0%81%EC%9D%B8-%EB%AC%B8%EC%9E%90-%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;관습적인 문자 사용 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let one = 1;
let 1 = 1; // X 

let $email = document.getElementById(&amp;#39;email&amp;#39;);
let $router;

let _localVariable = &amp;#39;test&amp;#39;;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;반드시 그런 것은 아니지만, &lt;code class=&quot;language-text&quot;&gt;$&lt;/code&gt;는 jQuery의 영향으로 DOM(Document Objejct Model, html의 객체 모델)에 접근하는 경우에 많이 사용합니다. 경우에 따라 전역 변수나 public한 변수 앞에 붙이기도 합니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt; (언더바, underscore)는 보통 특정 범위 내에서만 사용, 실행되는 변수나 메소드 앞에 붙여 사용합니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$&lt;/code&gt;나 &lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt;를 붙이는 것은 전적으로 자유고, 그저 관습적으로 사용하는 것뿐입니다. 변수에 뭐가 붙었는지에 따라 자바스크립트 엔진이 제어하는 경우는 없습니다.&lt;/p&gt;
&lt;h3 id=&quot;카멜-케이스-lowercamelcase&quot; style=&quot;position:relative;&quot;&gt;카멜 케이스 (lowerCamelCase)&lt;a href=&quot;#%EC%B9%B4%EB%A9%9C-%EC%BC%80%EC%9D%B4%EC%8A%A4-lowercamelcase&quot; aria-label=&quot;카멜 케이스 lowercamelcase permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;자바스크립트에서 가장 흔하게 적용되는 명명 규칙입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;카멜&lt;/strong&gt;이라는 단어에서 알아챈 분들도 계실겁니다. 카멜 케이스는 낙타 모습처럼 굴곡이 있는 형태로 변수의 이름을 작성하는 규칙입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let userName = &amp;#39;Yeony&amp;#39;;
let totalScore = 30;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;보통 변수를 선언할 때 그냥 &lt;strong&gt;name&lt;/strong&gt;이나 &lt;strong&gt;score&lt;/strong&gt;보다는 해당 변수를 명확하기 위해 수식(꾸며주는 말)단어를 덧붙여줍니다. 그냥 &lt;strong&gt;name&lt;/strong&gt;이라고만 하면 사용자명인지, 제품명인지, 별명인지 알 길이 없기 때문이죠. 여러 단어를 조합해서 만드는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;카멜 케이스로 변수명을 지을 때에는 단어와 단어가 구분될 때 2번째 단어부터 처음을 대문자(Uppercase)로 적어줍니다.&lt;/p&gt;
&lt;h3 id=&quot;boolean-형&quot; style=&quot;position:relative;&quot;&gt;Boolean 형&lt;a href=&quot;#boolean-%ED%98%95&quot; aria-label=&quot;boolean 형 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let isSuccess = false; 

// 동작이 성공적으로 수행된 후
...

isSuccess = true;

// 이후 동작&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;Boolean 형은 보통 &lt;code class=&quot;language-text&quot;&gt;is-&lt;/code&gt;로 시작하는 변수명으로 작성합니다. 마치 질문하는 것 같죠?&lt;br&gt;
is - success? &gt; No 라면 false를 할당하고, Yes라면 true를 할당하는 방식입니다.&lt;/p&gt;
&lt;h3 id=&quot;string-형&quot; style=&quot;position:relative;&quot;&gt;String 형&lt;a href=&quot;#string-%ED%98%95&quot; aria-label=&quot;string 형 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let name1 = &amp;#39;Nayeon&amp;#39;;
let name2 = &amp;#39;Kim&amp;#39;;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;위와 같이 숫자를 변수 뒤에 붙일 수 있습니다. 하지만 숫자로 표기하기 보다는 각각 변수의 특징을 선언해주는 것이 좋습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let firstName = &amp;#39;Nayeon&amp;#39;;
let surName = &amp;#39;Kim&amp;#39;;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2 id=&quot;상수-명명-규칙&quot; style=&quot;position:relative;&quot;&gt;상수 명명 규칙&lt;a href=&quot;#%EC%83%81%EC%88%98-%EB%AA%85%EB%AA%85-%EA%B7%9C%EC%B9%99&quot; aria-label=&quot;상수 명명 규칙 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;상수는 &lt;strong&gt;변하지 않는&lt;/strong&gt; 값을 저장할 때 사용합니다. 따라서 다른 변수와는 확실히 구분되도록 대개 대문자로 작성합니다.&lt;/p&gt;
&lt;h3 id=&quot;대문자-uppercase&quot; style=&quot;position:relative;&quot;&gt;대문자 (UPPERCASE)&lt;a href=&quot;#%EB%8C%80%EB%AC%B8%EC%9E%90-uppercase&quot; aria-label=&quot;대문자 uppercase permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const TAX = 10.27; &lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h3 id=&quot;대문자--스네이크-케이스-upper_snake_case&quot; style=&quot;position:relative;&quot;&gt;대문자 + 스네이크 케이스 (UPPER_SNAKE_CASE)&lt;a href=&quot;#%EB%8C%80%EB%AC%B8%EC%9E%90--%EC%8A%A4%EB%84%A4%EC%9D%B4%ED%81%AC-%EC%BC%80%EC%9D%B4%EC%8A%A4-upper_snake_case&quot; aria-label=&quot;대문자  스네이크 케이스 upper_snake_case permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;여러 단어를 조합해 만들 때는 대문자와 스네이크 케이스를 조합해 사용합니다.&lt;br&gt;
뱀이 꾸물거리는 것 같은 모양이라 이런 이름이 붙었습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let mathScore = 78;
let engScore = 48;
const FINAL_SCORE = mathScore + engScore;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;함수 식별자의 명명규칙은 함수가 뭔지 안 이후에 살펴보겠습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 자바스크립트의 예약어에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-variable&quot;&gt;변수 사용하기&lt;/a&gt;  👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-reserved-words&quot;&gt;자바스크립트 예약어 모음&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Flutter] Dart 기본 문법]]></title><description><![CDATA[Dart란? 다트(Dart)는 구글이 자바스크립트를 대체하기 위해 2011년도 개발한 멀티 플랫폼 프로그래밍 언어입니다. 다트의 특징으로는 모바일 앱, 웹 앱 등 여러 플랫폼을 다트를 이용해 만들 수 있습니다. Dart 특징 statically…]]></description><link>https://yeony99.github.io/tech/flutter-dart-and-flutter</link><guid isPermaLink="false">https://yeony99.github.io/tech/flutter-dart-and-flutter</guid><pubDate>Fri, 02 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;dart란&quot; style=&quot;position:relative;&quot;&gt;Dart란?&lt;a href=&quot;#dart%EB%9E%80&quot; aria-label=&quot;dart란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dart.dev/&quot;&gt;다트(Dart)&lt;/a&gt;는 구글이 자바스크립트를 대체하기 위해 2011년도 개발한 &lt;strong&gt;멀티 플랫폼&lt;/strong&gt; 프로그래밍 언어입니다.&lt;/p&gt;
&lt;p&gt;다트의 특징으로는 모바일 앱, 웹 앱 등 여러 플랫폼을 다트를 이용해 만들 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;dart-특징&quot; style=&quot;position:relative;&quot;&gt;Dart 특징&lt;a href=&quot;#dart-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;dart 특징 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;statically typed
&lt;ul&gt;
&lt;li&gt;dynamic type을 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;객체 지향 언어&lt;/li&gt;
&lt;li&gt;단일 상속 지원&lt;/li&gt;
&lt;li&gt;mixin 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;br/&gt;
&lt;h2 id=&quot;dart-자료형&quot; style=&quot;position:relative;&quot;&gt;Dart 자료형&lt;a href=&quot;#dart-%EC%9E%90%EB%A3%8C%ED%98%95&quot; aria-label=&quot;dart 자료형 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;다트는 &lt;code class=&quot;language-text&quot;&gt;Java&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;Javascript&lt;/code&gt;와 유사한 문법을 가지고 있습니다.&lt;/p&gt;
&lt;p&gt;먼저 자료형부터 살펴보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;num : 숫자 타입
&lt;ul&gt;
&lt;li&gt;int : 정수 타입&lt;/li&gt;
&lt;li&gt;double : 실수 타입&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bool : true/false 불리언 타입&lt;/li&gt;
&lt;li&gt;String : 문자열 타입&lt;/li&gt;
&lt;li&gt;List : 중복 허용, 순서가 있는 집합&lt;/li&gt;
&lt;li&gt;Set : 중복 허용하지 않는 순서 없는 집합&lt;/li&gt;
&lt;li&gt;Map : key-value 쌍으로 구성된 집합 (자바스크립트의 Object 타입과 유사)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;변수와 함수 선언 예시는 아래와 같습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;String name;
num age;

List&amp;lt;String&amp;gt; students = [&amp;#39;Nayeon&amp;#39;, &amp;#39;Yeony&amp;#39;, &amp;#39;Kim&amp;#39;];

Map&amp;lt;String, int&amp;gt; scores = {
    &amp;#39;math&amp;#39;: 97,
    &amp;#39;eng&amp;#39;: 77
}

voin main() {
    print(&amp;#39;Hello World!&amp;#39;);
}

String sayHi() {
    return &amp;#39;Hi!&amp;#39;;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;dynamic&quot; style=&quot;position:relative;&quot;&gt;dynamic&lt;a href=&quot;#dynamic&quot; aria-label=&quot;dynamic permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;다트의 특징으로 &lt;strong&gt;dynamic type&lt;/strong&gt;이 있다고 했는데요.&lt;/p&gt;
&lt;p&gt;변수 선언 시 &lt;code class=&quot;language-text&quot;&gt;dynamic&lt;/code&gt;을 붙이면 해당 변수는 모든 형식을 허용하는 형태가 됩니다. 처음 타입이 String이고 후에 int 타입을 할당해도 에러가 나지 않습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;void main() {
    dynamic changing = &amp;#39;Hi!!&amp;#39;;
    changing = 123;

    print(changing); // 123
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;var&quot; style=&quot;position:relative;&quot;&gt;var&lt;a href=&quot;#var&quot; aria-label=&quot;var permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;는 &lt;strong&gt;타입 추론&lt;/strong&gt;을 가능케 하는 키워드입니다.&lt;/p&gt;
&lt;p&gt;타입을 꼭 선언하지 않아도, 변수에 처음으로 할당되는 값에 따라 자동으로 타입을 추론합니다.&lt;br&gt;
단, 이후 다른 타입의 값이 할당된다 해도 그 변수의 타입은 변경되지 않습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;void main() {
    var age = 10; // age는 int 타입으로 고정

    age = 20;
    print(age); // 20

    age = &amp;#39;I am so young&amp;#39;; // Error! (int 변수에는 String을 할당할 수 없음)
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;final--const&quot; style=&quot;position:relative;&quot;&gt;final / const&lt;a href=&quot;#final--const&quot; aria-label=&quot;final  const permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;자바나 자바스크립트에서 볼 수 있던 키워드를 다트에서도 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;모두 &lt;strong&gt;상수&lt;/strong&gt;를 의미하지만 차이가 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;const : compile-time constant로 앱 빌드시 값 정해짐.
&lt;ul&gt;
&lt;li&gt;life cycle 상 절대 변하지 않음을 의미. (재빌드하지 않아 성능 개선)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;final : run-time constant로 앱 실행시 값이 정해짐&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;br/&gt;
&lt;h2 id=&quot;dart의-연산자&quot; style=&quot;position:relative;&quot;&gt;Dart의 연산자&lt;a href=&quot;#dart%EC%9D%98-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;dart의 연산자 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;자바스크립트를 주로 사용하는 개발자로서 자바스크립트 연산자와 아주 유사하다고 생각되었습니다.&lt;br&gt;
자바스크립트와 다르거나 다트에만 있는 독특한 연산자만 정리합니다.&lt;/p&gt;
&lt;h3 id=&quot;-정수-나눗셈-연산자&quot; style=&quot;position:relative;&quot;&gt;~/ (정수 나눗셈 연산자)&lt;a href=&quot;#-%EC%A0%95%EC%88%98-%EB%82%98%EB%88%97%EC%85%88-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot; 정수 나눗셈 연산자 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;void main() {
    print(101~/2); // 50
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;is--is-타입-확인-키워드&quot; style=&quot;position:relative;&quot;&gt;is / is! (타입 확인 키워드)&lt;a href=&quot;#is--is-%ED%83%80%EC%9E%85-%ED%99%95%EC%9D%B8-%ED%82%A4%EC%9B%8C%EB%93%9C&quot; aria-label=&quot;is  is 타입 확인 키워드 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;자바스크립트의 &lt;code class=&quot;language-text&quot;&gt;typeof&lt;/code&gt; 연산자와 유사합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;void main() {
    var name = &amp;#39;Yeony&amp;#39;;
    print(name is int); // false;
    print(name is String); // true;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;ab-optional-chaining&quot; style=&quot;position:relative;&quot;&gt;A?.B (optional chaining)&lt;a href=&quot;#ab-optional-chaining&quot; aria-label=&quot;ab optional chaining permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;?.&lt;/code&gt;를 적어줌으로써 해당 객체의 속성을 사용할 수 있는지 여부에 따라 반환되는 값이 달라집니다.&lt;/p&gt;
&lt;p&gt;객체의 속성에 접근할 수 있다면 그대로 반환하고, 사용할 수 없다면 &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;을 반환합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;void main() {
    String? name;

    print(name.length); // Error!
    print(name?.length); // null
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;a--b-논리-or&quot; style=&quot;position:relative;&quot;&gt;A ?? B (논리 OR)&lt;a href=&quot;#a--b-%EB%85%BC%EB%A6%AC-or&quot; aria-label=&quot;a  b 논리 or permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;자바스크립트의 &lt;code class=&quot;language-text&quot;&gt;||&lt;/code&gt; 연산자와 똑같이 동작합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;void main() {
    String name;

    String myName = name ?? &amp;#39;Yeony&amp;#39;;

    print(myName); // name이 null이므로 &amp;#39;Yeony&amp;#39;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;a--b-논리&quot; style=&quot;position:relative;&quot;&gt;A ??= B (논리)&lt;a href=&quot;#a--b-%EB%85%BC%EB%A6%AC&quot; aria-label=&quot;a  b 논리 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;??&lt;/code&gt; 연산자와 반대로 동작합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;void main() {
  int age;

  int myAge = 24;

  myAge ??= age;

  print(myAge);	//age가 null이므로 24
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;br/&gt;
&lt;h2 id=&quot;dart의-class&quot; style=&quot;position:relative;&quot;&gt;Dart의 Class&lt;a href=&quot;#dart%EC%9D%98-class&quot; aria-label=&quot;dart의 class permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;class는 객체를 정의하는 일종의 틀입니다. 특정한 모양의 객체를 생성하기 위해 변수, 메소드를 지정하는 것이죠.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;class Fruit {
    String name = &amp;#39;Banana&amp;#39;;

    void printFruitName() {
        print(&amp;#39;This is a ${name}!&amp;#39;);
    }
}

void main() {
    Fruit fruit = new Fruit();

    fruit.printFruitName(); // This is a Banana!

    fruit.name = &amp;#39;Grapes&amp;#39;;
    fruit.printFruitName(); // This is a Grapes!
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;생성자&quot; style=&quot;position:relative;&quot;&gt;생성자&lt;a href=&quot;#%EC%83%9D%EC%84%B1%EC%9E%90&quot; aria-label=&quot;생성자 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;다트의 class또한 다른 객체지향언어와 같이 생성자(constructor)를 가질 수 있습니다&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;class Fruit {
    String? name;
    int? price;

    Fruit(String name, int price) {
        this.name = name;
        this.price = price;
    }

    void printFruitName() {
        print(&amp;#39;This is a ${name}! This is ${price} won!&amp;#39;);
    }
}

void main() {
    Fruit fruit = new Fruit(&amp;#39;Strawberry&amp;#39;, 10000);

    fruit.printFruitName(); // This is a Strawberry! This is 10000 won!
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;strong&gt;Named Parameter&lt;/strong&gt; 를 사용하면 이렇게 작성할 수도 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;class Fruit {
    String? name;
    int? price;

    Fruit({String? name, int? price}) // named parameter
        : this.name = name,
          this.price = price;

    void printFruitName() {
        print(&amp;#39;This is a ${name}! This is ${price} won!&amp;#39;);
    }
}

void main() {
    Fruit fruit = new Fruit(name: &amp;#39;Strawberry&amp;#39;, price: 10000);

    fruit.printFruitName(); // This is a Strawberry! This is 10000 won!
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h3 id=&quot;상속&quot; style=&quot;position:relative;&quot;&gt;상속&lt;a href=&quot;#%EC%83%81%EC%86%8D&quot; aria-label=&quot;상속 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;클래스에서는 상속이 가능합니다.&lt;/p&gt;
&lt;p&gt;상속의 개념을 간단히 설명해보죠.&lt;/p&gt;
&lt;p&gt;부모와 자식이 있습니다. 부모는 부모가 가진 것들만 자식에게 줄 수 있습니다. 반면 자식은 부모의 것도 가지고, 본인만의 것도 가질 수 있습니다. 자식이 부모의 것을 가지는 것이 &lt;strong&gt;상속&lt;/strong&gt;, 자식이 부모의 것에 더해 자신만의 것을 가지는 것을 &lt;strong&gt;확장&lt;/strong&gt;이라고 합니다.&lt;/p&gt;
&lt;p&gt;상속을 받을 때는 &lt;code class=&quot;language-text&quot;&gt;extends&lt;/code&gt; 키워드를 사용합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;class Fruit {
    String? name;
    int? price;

    Fruit({String? name, int? price}) // named parameter
        : this.name = name,
          this.price = price;

    void printFruitName() {
        print(&amp;#39;This is a ${name}! This is ${price} won!&amp;#39;);
    }
}


class Juice extends Fruit {
    Juice({super.name, super.price});

    void printJuiceName() {
        print(&amp;#39;This is juice made of ${this.name}!!&amp;#39;);
    }
}

void main() {
    Juice juice = new Juice(name: &amp;#39;Lemon&amp;#39;, price : 5000);

    // 부모 class인 Fruit에도 접근 가능
    juice.printFruitName(); // This is a Lemon! This is 5000 won!
    juice.printJuiceName(); // This is juice made of Lemon!!
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h2 id=&quot;dart의-interface&quot; style=&quot;position:relative;&quot;&gt;Dart의 Interface&lt;a href=&quot;#dart%EC%9D%98-interface&quot; aria-label=&quot;dart의 interface permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;다트는 클래스를 활용해 인터페이스를 정의할 수 있습니다.&lt;/p&gt;
&lt;p&gt;인터페이스란, 클래스 정의 시 &lt;strong&gt;반드시 정의해야하는 변수 및 함수를 지정&lt;/strong&gt;할 때 사용합니다.&lt;/p&gt;
&lt;p&gt;앞서 클래스가 일종의 틀이라고 언급했는데, 인터페이스도 유사하지만 &lt;strong&gt;규격&lt;/strong&gt;에 가깝습니다.&lt;br&gt;
다른 클래스를 작성할 때 기본 틀을 제공하는 것이죠.&lt;/p&gt;
&lt;p&gt;자바 등에서는 interface 키워드를 이용해 정의하지만, 다트는 &lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt; 키워드를 사용해 인터페이스를 정의하고, &lt;code class=&quot;language-text&quot;&gt;implements&lt;/code&gt; 키워드로 인터페이스를 사용합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;dart&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;class Food {
    String? name;

    void printFoodName() {} // 함수 정의만 함
}

class Fruit implements Food {
    String? name;

    Fruit(String name) : this.name = name;

    // 함수 작성
    void printFoodName() {
        print(&amp;#39;Hi! There is ${name} here!&amp;#39;);
    }
}

void main() {
    Fruit fruit = new Fruit(&amp;#39;Melon&amp;#39;);

    fruit.printFoodName();
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;!--
📍 Dart Language와 Flutter Framework가 각각 무엇인지 이해하고, 둘의 관계를 이해한다.

📍 Dart Language와 Flutter Framework의 장점을 이해하고, 왜/어떻게 사용되는지 이해한다.

📍 C Programming을 배웠다고 가정하고, 프로그래밍 언어의 기본적 문법들을 복습한다.

📍 OOP Language(객체지향언어)인 Dart가 어떤 특징을 가지는지 이해한다.

📍 Dart만이 가진 독특한 문법들을 숙지한다. --&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/flutter-what-is-widget&quot;&gt;[Flutter] Widget 다루기&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (6) - 변수 사용하기]]></title><description><![CDATA[변수란? 사람이 사람과 대화를 한다 생각해봅시다. A가 말을 하면 B가 듣고 대답을 하겠죠? 프로그램도 똑같습니다. 값을 입력하면 결과가 출력되는 과정이 프로그램의 전부죠. 위 식을 보면 자연스럽게 결과가 11…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-js-variable</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-js-variable</guid><pubDate>Wed, 31 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;변수란&quot; style=&quot;position:relative;&quot;&gt;변수란?&lt;a href=&quot;#%EB%B3%80%EC%88%98%EB%9E%80&quot; aria-label=&quot;변수란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;사람이 사람과 대화를 한다 생각해봅시다.&lt;/p&gt;
&lt;p&gt;A가 말을 하면 B가 듣고 대답을 하겠죠? 프로그램도 똑같습니다.&lt;br&gt;
값을 입력&lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt;하면 결과가 출력&lt;code class=&quot;language-text&quot;&gt;output&lt;/code&gt;되는 과정이 프로그램의 전부죠.&lt;/p&gt;
&lt;deckgo-highlight-code  terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;10 + 100&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;위 식을 보면 자연스럽게 결과가 110 이란 걸 생각할 수 있죠? 어떻게 110이라고 생각하게 되었나요?&lt;br&gt;
너무 무의식 중이라 잘 모르고 지나쳤을 수 있습니다.&lt;br&gt;
우리는 숫자(10, 100)을 기억하고, 부호(+)의 의미를 알고 있습니다. 뿐만 아니라 &lt;code class=&quot;language-text&quot;&gt;10 + 100&lt;/code&gt;도 해석할 수 있죠.&lt;br&gt;
따라서 10과 100을 더한 값이 110이라는 해석 결과를 내놓을 수 있습니다.&lt;/p&gt;
&lt;p&gt;자바스크립트 엔진도 마찬가지입니다.&lt;/p&gt;
&lt;p&gt;메모리 어딘가에 값을 저장(기억)하고 CPU가 이 값을 읽어들여 연산을 수행합니다.
연산을 수행하고 난 값도 어딘가에 저장을 합니다. 그런데 어딘가가 도대체 어디일까요? 저장하는 메모리 주소는 임의의 주소이기 때문에 우리는 그 곳을 알 수가 없습니다.&lt;br&gt;
그럼 애써 계산을 완료했어도 그 값을 재사용할 수 없죠.&lt;/p&gt;
&lt;p&gt;따라서 그 값을 다시 찾기 위해 &lt;strong&gt;변수&lt;/strong&gt;를 사용합니다.&lt;/p&gt;
&lt;p&gt;변수의 정의는 다음과 같습니다.
&lt;strong&gt;하나의 값을 저장할 수 있는 메모리 공간&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/185878214-954c86c6-bdb5-4116-9791-2e498dec970d.png&quot; alt=&quot;값 생성과 변수에 할당하기&quot; title=&quot;값 생성과 변수에 할당하기&quot;&gt;&lt;/p&gt;
&lt;p&gt;저 계산한 값에 이름을 붙인 것이 변수입니다.&lt;/p&gt;
&lt;deckgo-highlight-code  terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var sum = 10 + 100;

console.log(sum); // 110&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;변수-선언하기&quot; style=&quot;position:relative;&quot;&gt;변수 선언하기&lt;a href=&quot;#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0&quot; aria-label=&quot;변수 선언하기 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;변수를 사용하려면 변수를 선언하는 과정이 선행되어야 합니다.&lt;/p&gt;
&lt;h3 id=&quot;변수-선언-키워드&quot; style=&quot;position:relative;&quot;&gt;변수 선언 키워드&lt;a href=&quot;#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%ED%82%A4%EC%9B%8C%EB%93%9C&quot; aria-label=&quot;변수 선언 키워드 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;var&lt;/li&gt;
&lt;li&gt;let&lt;/li&gt;
&lt;li&gt;const&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;변수를 선언할 때 앞에 붙일 수 있는 키워드는 총 3가지입니다.&lt;br&gt;
앞선 글에서 var 키워드는 자주 보여 익숙하죠?&lt;/p&gt;
&lt;p&gt;이 세 키워드 중 var를 제외하면 ES6 문법부터 도입되었습니다. 이전 문법(ES5)까지는 var 외에는 다른 키워드가 없었습니다.&lt;/p&gt;
&lt;p&gt;우선 var 키워드로 변수를 선언하는 법부터 알아보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;변수-선언과-할당-예시&quot; style=&quot;position:relative;&quot;&gt;변수 선언과 할당 예시&lt;a href=&quot;#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EA%B3%BC-%ED%95%A0%EB%8B%B9-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;변수 선언과 할당 예시 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;라는 변수를 선언해볼까요?&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var count;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;로 변수를 &lt;strong&gt;선언&lt;/strong&gt;하면 컴퓨터가 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;라는 이름으로 메모리를 확보한 상태입니다.&lt;br&gt;
여기서 타입은 무엇일까요?&lt;/p&gt;
&lt;p&gt;바로 &lt;strong&gt;undefined&lt;/strong&gt;입니다. 앞서 var 키워드로 선언을 하게 되면 암묵적으로 undefined를 할당해버린다고 언급하였는데요.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;선언&lt;/strong&gt;과 &lt;strong&gt;할당&lt;/strong&gt;은 뭐가 다른지 한 번 살펴봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;선언 : 변수 이름을 엔진에 등록&lt;/li&gt;
&lt;li&gt;할당(초기화) : 값을 지정하기 위해 메모리 공간을 확보 (암묵적으로 undefined 할당)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;만약 자바스크립트 엔진이 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;를 할당하지 않고 변수를 참조하게 되면 어떻게 될까요? 네! 당연히 이상한 결과가 나오겠죠? 이전에 다른 프로그램이 사용했던 값이 겹쳐지는 이슈가 있을 수도 있습니다.&lt;/p&gt;
&lt;p&gt;자바스크립트 엔진이 변수를 초기화하며 그런 이슈를 피할 수 있는 것이죠.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var count; // 선언 - undefined로 암묵적 할당

count = 0; // 값의 명시적 할당&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;값을 할당(저장, 대입)할 때에는 할당 연산자 &lt;code class=&quot;language-text&quot;&gt;=&lt;/code&gt;를 사용합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;호이스팅&quot; style=&quot;position:relative;&quot;&gt;호이스팅&lt;a href=&quot;#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85&quot; aria-label=&quot;호이스팅 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;선언과 할당이 되는 순서를 console에 찍어보며 알아봅시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;console.log(&amp;#39;1&amp;#39;, test) // undefined
var test; // 선언
console.log(&amp;#39;2&amp;#39;, test) // undefined
test = 10; // 명시적 할당
console.log(&amp;#39;3&amp;#39;, test) // undefined&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;코드에서 뭔가 이상한 점을 발견하셨나요?&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;var test;&lt;/code&gt;로 변수를 선언하기 전에 console.log()로 확인한 &lt;code class=&quot;language-text&quot;&gt;test&lt;/code&gt;의 결과가 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;로 출력이 됐죠?&lt;/p&gt;
&lt;p&gt;이런 현상을 호이스팅이라고 하는데요. 호이스팅이란 &lt;strong&gt;변수 선언문이 코드의 최상단으로 끌어올려진 것처럼 동작&lt;/strong&gt;하는 자바스크립트의 한 특징입니다.&lt;/p&gt;
&lt;p&gt;즉 선언은 2번째 줄에서 했지만 실제로는 1번째 console.log()보다 앞선 것처럼 작동한 것이죠.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var test; // 선언
console.log(&amp;#39;1&amp;#39;, test)
console.log(&amp;#39;2&amp;#39;, test)
test = 10; // 명시적 할당
console.log(&amp;#39;3&amp;#39;, test) &lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;재할당&quot; style=&quot;position:relative;&quot;&gt;재할당&lt;a href=&quot;#%EC%9E%AC%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;재할당 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;변수를 선언하고 할당을 한 후 값을 변경할 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var name = &amp;quot;Nayeon&amp;quot;;

name = &amp;quot;Yeony&amp;quot;; // 재할당&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h4 id=&quot;const-상수&quot; style=&quot;position:relative;&quot;&gt;const 상수&lt;a href=&quot;#const-%EC%83%81%EC%88%98&quot; aria-label=&quot;const 상수 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;만약 재할당이 불가능하다면 그것은 변수가 아니라 변하지 않는 값, &lt;strong&gt;상수&lt;/strong&gt;라고 일컫습니다.&lt;/p&gt;
&lt;p&gt;상수는 ES6 문법부터 도입되었는데요. 앞서 &lt;a href=&quot;#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%ED%82%A4%EC%9B%8C%EB%93%9C&quot;&gt;변수 선언 키워드&lt;/a&gt;
자바스크립트의 상수는 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; 키워드로 선언 및 할당할 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const birthYear = 1999;

birthYear = 2022; // error!&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;는 상수이기 때문에 재할당이 불가능합니다.&lt;br&gt;
만약 재할당 하려하면 에러가 발생합니다.&lt;/p&gt;
&lt;p&gt;한 가지 유의할 점이 더 있습니다. var나 let 같은 키워드는 재할당이 가능하지만, &lt;strong&gt;const는 재할당이 불가능&lt;/strong&gt;하기 때문에 선언과 동시에 반드시 값을 할당해야합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;const test; // initializer Error!&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h4 id=&quot;let-변수&quot; style=&quot;position:relative;&quot;&gt;let 변수&lt;a href=&quot;#let-%EB%B3%80%EC%88%98&quot; aria-label=&quot;let 변수 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;와 같이 변수 앞에 적는 키워드입니다.&lt;/p&gt;
&lt;p&gt;그럼 무슨 차이가 있을까요?&lt;/p&gt;
&lt;p&gt;바로 &lt;a href=&quot;#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85&quot;&gt;호이스팅&lt;/a&gt; 에서 차이가 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;console.log(name); // Reference Error!
let name = &amp;#39;Yeony&amp;#39;;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;분명 호이스팅을 이해하며, 변수가 &lt;em&gt;끌어올려져&lt;/em&gt; undefined가 출력되는 것을 보았습니다.&lt;br&gt;
하지만 &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; 키워드는 참조에러(Reference Error)가 발생하네요. 왜일까요?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; 또한 호이스팅이 되지만 &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;가 선언된 위치에 코드 실행이 진행될 때까지 &lt;strong&gt;접근이 불가능&lt;/strong&gt;한 상태입니다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; 키워드는 접근이 되는 것이구요. (보다 자세한 내용은 추후 스코프(scope)를 설명할 때 보태겠습니다.)&lt;/p&gt;
&lt;p&gt;따라서 모던 자바스크립트에서는 var 사용을 지양하고 let 사용을 권합니다.&lt;br&gt;
하지만 var로 작성된 코드는 무수히 많기 때문에, 이 차이점을 꼭 유념하고 넘어가야합니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 변수, 상수의 이름짓기(Naming) 규칙을 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-data-type&quot;&gt;자바스크립트 자료형&lt;/a&gt;  👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-variable-naming&quot;&gt;변수 명명 규칙&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[자바스크립트에서 재귀함수 사용하기]]></title><description><![CDATA[재귀(Recursion…]]></description><link>https://yeony99.github.io/tech/javascript-recursion</link><guid isPermaLink="false">https://yeony99.github.io/tech/javascript-recursion</guid><pubDate>Mon, 29 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;재귀recursion란&quot; style=&quot;position:relative;&quot;&gt;재귀(Recursion)란&lt;a href=&quot;#%EC%9E%AC%EA%B7%80recursion%EB%9E%80&quot; aria-label=&quot;재귀recursion란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;재귀란 무엇일까요?&lt;br&gt;
사전적 정의로 재귀는 &lt;strong&gt;자신을 정의할 때 자기 자신을 재참조하는 방법&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;자바스크립트에서 재귀 함수란 &lt;strong&gt;자기 자신을 재호출하는 함수&lt;/strong&gt; 정도로 설명할 수 있겠네요.&lt;/p&gt;
&lt;p&gt;뭔가 복잡하고 어렵게만 느껴지네요. 비유를 들어보겠습니다.&lt;/p&gt;
&lt;h3 id=&quot;비유&quot; style=&quot;position:relative;&quot;&gt;비유&lt;a href=&quot;#%EB%B9%84%EC%9C%A0&quot; aria-label=&quot;비유 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;옛날 옛적 숫자가 홀수인지 짝수인지 모르던 시절의 한 꼬마 마법사 레미가 살았습니다.&lt;/p&gt;
&lt;p&gt;꼬마 마법사들이 정식 마법사가 되려면 동굴에 사는 정체불명의 그림자 괴물에게 가서 스크롤에 담긴 숫자 중 &lt;strong&gt;홀수&lt;/strong&gt;를 알아와야 했습니다.&lt;br&gt;
한 꼬마 마법사 레미는 스승님에게서 이 과제를 받고 동굴로 떠났습니다.&lt;/p&gt;
&lt;p&gt;스크롤에는 &lt;code class=&quot;language-text&quot;&gt;[10, 54, 66, 38, 64, 2]&lt;/code&gt;라고 적혀있었습니다.&lt;/p&gt;
&lt;p&gt;하지만 막상 레미가 그림자 괴물에게 찾아가 스크롤에 적힌 숫자 중 어떤 게 홀수인지 알려달라 하니, 그림자 괴물은 역정을 내며 절대 알려줄 수 없다고 합니다.&lt;/p&gt;
&lt;p&gt;레미는 협상을 시도하죠.&lt;br&gt;
&lt;strong&gt;그러면 이 스크롤의 숫자 중, 첫 번째 숫자가 홀수가 아닌지만 알려주세요!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;그림자 괴물은 승낙합니다.&lt;/p&gt;
&lt;p&gt;이윽고 레미가 첫 번째 질문을 했습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[10, 54, 66, 38, 64, 2] 중 10은 홀수인가요?&lt;/strong&gt;&lt;br&gt;
답변은 홀수가 아니었습니다. 홀수가 아니다!&lt;/p&gt;
&lt;p&gt;레미는 골똘히 생각을 했고, 이내 스크롤의 숫자 중 10을 들고 있던 깃펜으로 지운 후 두 번째 질문을 했습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[54, 66, 38, 64, 2] 중 54는 홀수인가요?&lt;/strong&gt;&lt;br&gt;
54또한 홀수가 아니었습니다.&lt;/p&gt;
&lt;p&gt;이렇게 스크롤의 숫자를 차근차근히 지워나간 레미의 스크롤에는 이제 아무런 숫자가 남지 않았습니다.&lt;/p&gt;
&lt;p&gt;레미는 또다시 질문했죠.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[]의 첫번째 숫자가 홀수인가요?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;그러자 그림자 괴물은 엄청난 화를 내며 그 스크롤은 비어있지 않냐고 멍청이는 썩 꺼지라 말했습니다.&lt;/p&gt;
&lt;p&gt;하지만 이미 레미는 원하는 결과를 얻었죠! 스크롤에는 홀수가 하나도 없었습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;예시&quot; style=&quot;position:relative;&quot;&gt;예시&lt;a href=&quot;#%EC%98%88%EC%8B%9C&quot; aria-label=&quot;예시 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;앞선 비유가 이해되셨나요?&lt;br&gt;
똑같은 동작(함수)를 목적을 달성할 때까지(배열이 빌 때까지) &lt;strong&gt;반복&lt;/strong&gt;했죠?&lt;/p&gt;
&lt;p&gt;이렇게 특정 조건 하에 함수 자신을 계속해서 참조하는 것이 재귀입니다.&lt;/p&gt;
&lt;p&gt;코드를 한번 살펴볼까요?&lt;/p&gt;
&lt;p&gt;소스를 복사한 후 snippet 등에서 breakpoint를 걸고 참고해보세요.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;function findOdd(nums) {
  let result = []
  if (nums.length === 0) {
    return result
  }
  if (nums[0] % 2 === 1) {
    result.push(nums[0])
  }
  return result.concat(findOdd(nums.slice(1)))
}

findOdd([10, 54, 66, 38, 64, 2])&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;h4 id=&quot;참고---snippet-실행-영상&quot; style=&quot;position:relative;&quot;&gt;참고 - snippet 실행 영상&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0---snippet-%EC%8B%A4%ED%96%89-%EC%98%81%EC%83%81&quot; aria-label=&quot;참고   snippet 실행 영상 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;video width=&quot;100%&quot; controls=&quot;controls&quot;&gt;
    &lt;source src=&quot;https://user-images.githubusercontent.com/76241233/187861698-54e4534b-81e0-4217-8b64-7e287299189c.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;재귀를-사용하는-이유&quot; style=&quot;position:relative;&quot;&gt;재귀를 사용하는 이유&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;재귀를 사용하는 이유 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;꼭 재귀를 사용하지 않아도 되고, 어떤 경우에는 재귀를 사용하지 않는 것이 더욱 깔끔할 때가 있습니다.
재귀를 사용하는 이유는 여러가지가 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;재귀를-흔하게-사용하는-경우&quot; style=&quot;position:relative;&quot;&gt;재귀를 흔하게 사용하는 경우&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%EB%A5%BC-%ED%9D%94%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;재귀를 흔하게 사용하는 경우 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JSON.parse&lt;/li&gt;
&lt;li&gt;JSON.stringify&lt;/li&gt;
&lt;li&gt;document.getElementById&lt;/li&gt;
&lt;li&gt;DOM 순회 알고리즘&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;같은 걸 사용할 때는 보통 재귀적으로 작성됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DOM&lt;/code&gt;은 중첩된 tree 구조로 되어 있습니다. &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt;속에 &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt;가 들어있는 중첩 레이어가 100개, 1000개가 될 수도 있습니다. 그 속을 살펴볼 때 흔하게 사용하는 방법 중 하나가 재귀적으로 움직이는 코드를 작성하는 것입니다.&lt;/p&gt;
&lt;h3 id=&quot;재귀의-장점&quot; style=&quot;position:relative;&quot;&gt;재귀의 장점&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%EC%9D%98-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;재귀의 장점 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;재귀적 표현이 자연스러울 때 적합
&lt;ul&gt;
&lt;li&gt;팩토리얼이나 피보나치 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;변수사용을 줄임
&lt;ul&gt;
&lt;li&gt;함수의 단순화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;재귀를-쓰지-맙시다&quot; style=&quot;position:relative;&quot;&gt;재귀를 쓰지 맙시다&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%EB%A5%BC-%EC%93%B0%EC%A7%80-%EB%A7%99%EC%8B%9C%EB%8B%A4&quot; aria-label=&quot;재귀를 쓰지 맙시다 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;종료 조건으로 수렴하지 않을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for 구문을 사용할 때 &lt;strong&gt;무한 루프&lt;/strong&gt;에 빠지게 된다면 브라우저가 먹통이 되겠죠?&lt;/p&gt;
&lt;p&gt;재귀도 마찬가지입니다.&lt;/p&gt;
&lt;p&gt;함수에 입력되는 입력값이 변하지 않고 그대로거나, 종료조건이 없거나, 스택 메모리를 초과하여 호출하는 경우에는 재귀를 사용하지 않는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;위에 작성했던 함수의 일부 코드를 주석처리해보겠습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;function findOdd(nums) {
  let result = []
  // if (nums.length === 0) {
  //     return result;
  // }
  if (nums[0] % 2 === 1) {
    result.push(nums[0])
  }
  return result.concat(findOdd(nums.slice(1)))
}

findOdd([10, 54, 66, 38, 64, 2]) // Uncaught RangeError: Maximum call stack size exceeded&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;바로 &lt;code class=&quot;language-text&quot;&gt;Maximum call stack size exceeded&lt;/code&gt;에러가 발생했습니다.&lt;/p&gt;
&lt;p&gt;호출 스택의 메모리를 초과해버렸다는 것이죠.&lt;/p&gt;
&lt;deckgo-highlight-code  terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;if (nums.length === 0) {
    return result;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이 부분이 바로 재귀 함수의 종료 조건이었음을 알 수 있습니다.&lt;br&gt;
이미 &lt;code class=&quot;language-text&quot;&gt;result&lt;/code&gt; 배열은 길이가 0이지만 계속해서 slice 처리를 하고, 또 함수를 호출하게 된 것입니다.&lt;/p&gt;
&lt;h2 id=&quot;재귀함수-작성-시-tips&quot; style=&quot;position:relative;&quot;&gt;재귀함수 작성 시 Tips&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1-%EC%8B%9C-tips&quot; aria-label=&quot;재귀함수 작성 시 tips permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;종료조건을 먼저 생각하자&lt;/li&gt;
&lt;li&gt;array 가 input값인 경우에는 slice나 spread 연산자, concat 연산자 사용이 유용하다&lt;/li&gt;
&lt;li&gt;string 인 경우에는 slice, substr, substring이 string input값을 복사하기 유용하다&lt;/li&gt;
&lt;li&gt;object 인 경우는 Object.assign이나 spread 연산자가 유용하다&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Flus에 참가하게 되었다!]]></title><description><![CDATA[Flutter 스터디인 Flus에…]]></description><link>https://yeony99.github.io/log/join-flus-flutter-study</link><guid isPermaLink="false">https://yeony99.github.io/log/join-flus-flutter-study</guid><pubDate>Sun, 28 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Flutter 스터디인 &lt;strong&gt;Flus&lt;/strong&gt;에 0기로 참여하게 되었다. 되게 여러 분야의 분들이 많은 것 같다. 플랫폼은 여기로 해서 블로그 글 차근차근 작성해봐야지.&lt;br&gt;
개인적으로 좀더 심화반 스터디가 있어도 좋을 것 같다... 아니면 스터디 끝나고 토이프로젝트로 앱 하나 내볼 팀원을 찾는다든지?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (5) - 자바스크립트 자료형]]></title><description><![CDATA[자료형이란? 자바스크립트는 동적언어입니다. 이 말은 런타임 시에 타입이 정해진다는 의미입니다. 간단하게만 알아보겠습니다. 컴파일 타임 & 런 타임 컴파일타임(Compile time)이란? The compile time is the time from…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-js-data-type</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-js-data-type</guid><pubDate>Wed, 24 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;자료형이란&quot; style=&quot;position:relative;&quot;&gt;자료형이란?&lt;a href=&quot;#%EC%9E%90%EB%A3%8C%ED%98%95%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;자료형이란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;자바스크립트는 &lt;a href=&quot;https://yeonydevlog.tistory.com/40&quot;&gt;동적언어&lt;/a&gt;입니다. 이 말은 런타임 시에 타입이 정해진다는 의미입니다. 간단하게만 알아보겠습니다.&lt;/p&gt;
&lt;h3 id=&quot;컴파일-타임--런-타임&quot; style=&quot;position:relative;&quot;&gt;컴파일 타임 &amp;#x26; 런 타임&lt;a href=&quot;#%EC%BB%B4%ED%8C%8C%EC%9D%BC-%ED%83%80%EC%9E%84--%EB%9F%B0-%ED%83%80%EC%9E%84&quot; aria-label=&quot;컴파일 타임  런 타임 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;컴파일타임compile-time이란&quot; style=&quot;position:relative;&quot;&gt;컴파일타임(Compile time)이란?&lt;a href=&quot;#%EC%BB%B4%ED%8C%8C%EC%9D%BC%ED%83%80%EC%9E%84compile-time%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;컴파일타임compile time이란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;The compile time is the time from when the program is first loaded until the program is parsed. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Compile_time&quot;&gt;참고 : MDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Syntax Error (문법 에러), File Reference Error (파일 참조 에러), 타입 체크 에러 등&lt;/li&gt;
&lt;li&gt;컴파일러가 컴파일 타임 에러를 발생시키고, 보통 문제가 발생한 소스코드 라인을 알려줍니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;런타임run-time이란&quot; style=&quot;position:relative;&quot;&gt;런타임(Run time)이란?&lt;a href=&quot;#%EB%9F%B0%ED%83%80%EC%9E%84run-time%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;런타임run time이란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴파일 과정을 마친 프로그램이 &lt;strong&gt;실행되는 특정한 때&lt;/strong&gt;를 의미합니다.&lt;/li&gt;
&lt;li&gt;Null 참조 오류, 메모리 부족 오류, n/0 (0으로 나누는 연산) 오류 등&lt;/li&gt;
&lt;li&gt;런타임 에러는 프로그램이 실행 중이지만, 의도치 않게 발생하는 에러입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;자바스크립트는-동적-타입&quot; style=&quot;position:relative;&quot;&gt;자바스크립트는 동적 타입&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EB%8F%99%EC%A0%81-%ED%83%80%EC%9E%85&quot; aria-label=&quot;자바스크립트는 동적 타입 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/&quot;&gt;MDN&lt;/a&gt;의 설명을 참고하겠습니다. MDN은 웹 표준 등에 관련된 정보를 문서화한 사이트입니다. 앞으로 쫌만알자 시리즈에 많이 등장할 예정이니 꼭 참고해주세요. &lt;br/&gt;&lt;br&gt;
자바스크립트는 느슨한 타입(loosely typed)의 동적(dynamic) 언어입니다. &lt;strong&gt;자바스크립트의 변수는 어떤 특정 타입과 연결되지 않으며,&lt;/strong&gt; 모든 타입의 값으로 할당(및 재할당)이 가능합니다. 다시 말해 자료형의 구분은 있지만, 변수의 형(type)을 미리 정하지 않는다는 말입니다.&lt;/p&gt;
&lt;p&gt;다른 개발 언어의 경우는 자료형을 명시하고 코드를 작성합니다. Java를 예시로 들어볼까요?&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;java&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;int num = 0; // integer: 정수 타입
String str = &amp;quot;Hello World!&amp;quot;; // string: 문자열 타입&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이렇게 자료형을 먼저 명시합니다. 반면 자바스크립트의 경우에는 자료형을 적지 않습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var num = 10;
var str = &amp;#39;Hello World!&amp;#39;;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;변수 할당은 다음 글에서 알아보겠습니다.
여기서는 자바스크립트는 느슨하게 작동되는 동적 언어라는 것만 알고 넘어갑시다.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;javascript의-type&quot; style=&quot;position:relative;&quot;&gt;JavaScript의 Type!&lt;a href=&quot;#javascript%EC%9D%98-type&quot; aria-label=&quot;javascript의 type permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;본격적으로 자료형을 알아보죠.&lt;/p&gt;
&lt;p&gt;자바스크립트의 타입은 원시 타입&lt;span style=&quot;font-size: 0.7rem&quot;&gt;(primitive type)&lt;/span&gt;과 객체 타입&lt;span style=&quot;font-size: 0.7rem&quot;&gt;(object/reference type)&lt;/span&gt;으로 나뉩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원시 타입
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#number-%ED%83%80%EC%9E%85&quot;&gt;Number 타입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#string-%ED%83%80%EC%9E%85&quot;&gt;String 타입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#boolean-%ED%83%80%EC%9E%85&quot;&gt;Boolean 타입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#undefined-%ED%83%80%EC%9E%85&quot;&gt;Undefined 타입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#null-%ED%83%80%EC%9E%85&quot;&gt;Null 타입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#symbol-%ED%83%80%EC%9E%85&quot;&gt;Symbol 타입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bigint-%ED%83%80%EC%9E%85&quot;&gt;BigInt 타입&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85&quot;&gt;객체 타입&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자바스크립트는 타입을 명시하지 않는 동적언어인데 왜 자료형을 알아야 할까요?&lt;br&gt;
자료형에 따라 변수가 차지하는 메모리 공간의 크기도 다르고, 엔진이 해석하는 방식도 달라지기 때문입니다.&lt;/p&gt;
&lt;p&gt;각각의 자료형을 살펴봅시다.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id=&quot;number-타입&quot; style=&quot;position:relative;&quot;&gt;Number 타입&lt;a href=&quot;#number-%ED%83%80%EC%9E%85&quot; aria-label=&quot;number 타입 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;숫자는 Number와 BigInt 두 가지의 내장 숫자 타입이 있습니다. BigInt는 뒤에서 살펴보구요. Number타입부터 알아봅니다.&lt;/p&gt;
&lt;p&gt;다른 프로그래밍 언어(C, Java 등)은 정수(ex. -1, 0, 1)와 실수(ex. 3.14, 0.15)를 구분해 int, float, double 등 다양한 숫자 타입을 제공합니다.&lt;/p&gt;
&lt;p&gt;하지만 자바스크립트는 Number로 정수와 실수 모두를 취급합니다.&lt;/p&gt;
&lt;p&gt;Number타입은 정수이건 실수이건 &lt;strong&gt;모두 실수로 처리&lt;/strong&gt;합니다. 이것을 부동소수점 형식이라고 합니다. 정확한 이름을 굳이 외울 필요는 없습니다. 정수만을 따로 표현하기 위한 자료형이 없고 모두 실수로 처리한다는 것만 기억하면 됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;// 모두 숫자 타입
var integer = 10;
var double = 10.123456;
var float = -10.3;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;console.log(1 === 1.0) // true&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;만약 정수와 실수를 구별해 관리했다면 false가 return 됐을겁니다.&lt;/p&gt;
&lt;p&gt;실수와 정수 외에도 숫자 타입은 3가지의 특별한 값도 취급합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Infinity : 양의 무한대&lt;/li&gt;
&lt;li&gt;-Infinity : 음의 무한대&lt;/li&gt;
&lt;li&gt;NaN : Not a Number, 산술 연산 불가능&lt;/li&gt;
&lt;/ul&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;console.log(Number.POSITIVE_INFINITY); // Infinity
console.log(Number.NEGATIVE_INFINITY); // -Infinity
console.log(10 * &amp;#39;abcd&amp;#39;); // NaN &lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;자바스크립트는 대소문자를 구별하므로 &lt;strong&gt;NaN&lt;/strong&gt;을 작성할 때에는 꼭 주의하도록 합시다.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id=&quot;string-타입&quot; style=&quot;position:relative;&quot;&gt;String 타입&lt;a href=&quot;#string-%ED%83%80%EC%9E%85&quot; aria-label=&quot;string 타입 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;문자열 타입입니다. String 타입은 말 그대로 텍스트 데이터를 나타낼 때 사용합니다. 16비트 유니코드 문자(UTF-16)으로 구성된 집합으로, 대부분의 언어를 표현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;자바스크립트에서 문자열을 표현하는 3가지 방법이 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var string;

string = &amp;#39;작은 따옴표 문자열&amp;#39;;
string = &amp;quot;큰 따옴표 문자열&amp;quot;;
string = `백틱 문자열`;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;가장 보편적으로 사용하는 방식은 &lt;strong&gt;작은 따옴표(&apos; &apos;)&lt;/strong&gt; 방식입니다.&lt;/p&gt;
&lt;p&gt;만약 작은 따옴표나 큰 따옴표를 문자열 내에서 직접 보이게 하고 싶으면 이렇게 작성합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;string = &amp;quot;큰 따옴표 속 &amp;#39;작은 따옴표&amp;#39;&amp;quot;;
string = &amp;#39;작은 따옴표 속 &amp;quot;큰 따옴표&amp;quot;&amp;#39;;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;가장 바깥의 따옴표 속 즉, 문자열 속에 있는 따옴표는 문자로 취급됩니다.&lt;/p&gt;
&lt;p&gt;조금 낯설 수 있는 것이 &lt;strong&gt;백틱(`)&lt;/strong&gt; 일텐데요. 백틱은 &lt;strong&gt;템플릿 리터럴&lt;/strong&gt;이라고 하는 문자열 표기법에 이용됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var name = &amp;#39;Yeony&amp;#39;;

var template = `Hi, I&amp;#39;m ${name}!` // Hi, I&amp;#39;m Yeony!&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이렇게 문자열 안에 변수를 집어넣는 템플릿을 만들 수 있습니다. 유용하죠?&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id=&quot;boolean-타입&quot; style=&quot;position:relative;&quot;&gt;Boolean 타입&lt;a href=&quot;#boolean-%ED%83%80%EC%9E%85&quot; aria-label=&quot;boolean 타입 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Boolean 타입은 논리적 참/거짓을 나타내며, &lt;strong&gt;true&lt;/strong&gt; 혹은 &lt;strong&gt;false&lt;/strong&gt;로 두 가지의 값만 가질 수 있습니다.&lt;br&gt;
Boolean 타입은 이후 조건문을 배우며 자세히 알아봅시다.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id=&quot;undefined-타입&quot; style=&quot;position:relative;&quot;&gt;Undefined 타입&lt;a href=&quot;#undefined-%ED%83%80%EC%9E%85&quot; aria-label=&quot;undefined 타입 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;undefined 타입은 undefined가 유일합니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var variable;
console.log(variable) // undefined&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;이렇게 variable에 아무것도 값을 주지 않으면 variable은 어떤 타입과 값을 가질까요?&lt;br&gt;
정답은 undefined 타입의 undefined 값을 가진다! 입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;var 키워드&lt;/strong&gt;로 변수를 선언만 한 경우 자바스크립트 엔진이 암묵적으로 undefined를 할당해버립니다. undefined의 의미를 생각해보면 &quot;개발자가 변수에 값을 할당해주지 않았다!&quot; 라는 것입니다&lt;/p&gt;
&lt;p&gt;다시 말해 undefined가 반환된다면 개발자가 &lt;u&gt;초기화하지 않은 변수&lt;/u&gt;라고 바라볼 수 있습니다.&lt;br&gt;
만약 변수에 값이 없다는 것을 명시하고 싶다면 &lt;strong&gt;null&lt;/strong&gt;을 할당하도록 합시다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var variable = null;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h4 id=&quot;null-타입&quot; style=&quot;position:relative;&quot;&gt;Null 타입&lt;a href=&quot;#null-%ED%83%80%EC%9E%85&quot; aria-label=&quot;null 타입 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;null 타입의 값 또한 null이 유일합니다.&lt;/p&gt;
&lt;p&gt;앞서 말했다시피 null은 어떤 값이 의도적으로 비어있다는 것을 보여줍니다.&lt;/p&gt;
&lt;h4 id=&quot;symbol-타입&quot; style=&quot;position:relative;&quot;&gt;Symbol 타입&lt;a href=&quot;#symbol-%ED%83%80%EC%9E%85&quot; aria-label=&quot;symbol 타입 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Symbol 타입은 ES6&lt;span style=&quot;font-size: 0.7rem;&quot;&gt;(ECMA2015, 15년도에 개정된 JS)&lt;/span&gt;에 추가된 타입입니다.&lt;/p&gt;
&lt;p&gt;Symbol은 다른 값과 중복되지 않는 유일무이한 값입니다. 꼭 겹치지 않아야 하는 유일한 Key를 만들어야 할 때 유용하게 사용할 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;var key = Symbol(&amp;#39;key&amp;#39;); // Symbol 함수를 호출해 할당

var obj = {}; // 객체 생성

// 객체에 접근할 수 있는 유일무이한 key값을 생성
obj[key] = &amp;#39;value&amp;#39;;

console.log(obj[key]); // value
console.log(obj) // { Symbol(key): &amp;quot;value&amp;quot; }&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h4 id=&quot;bigint-타입&quot; style=&quot;position:relative;&quot;&gt;BigInt 타입&lt;a href=&quot;#bigint-%ED%83%80%EC%9E%85&quot; aria-label=&quot;bigint 타입 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;앞서 Number 타입을 봤는데요. BigInt는 Number와는 다르게 조금 특별한 숫자를 취급합니다.&lt;br&gt;
Number가 정수, 실수를 표현할 수 있다면 BigInt는 이름대로 아주 큰 숫자를 다루는 타입입니다.&lt;/p&gt;
&lt;p&gt;여기서 &lt;u&gt;아주 큰 숫자 &lt;/u&gt;는 얼마일까요?&lt;br&gt;
당연하겠지만 Number 타입으로 다루지 못하는 범위의 숫자입니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;console.log(Number.MAX_SAFE_INTEGER) // 9007199254740991&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;Number 타입으로 나타낼 수 있는 가장 큰 숫자(안전 한계)를 log로 출력해보았습니다.&lt;/p&gt;
&lt;p&gt;BigInt는 숫자 뒤에 &lt;strong&gt;n&lt;/strong&gt;을 붙이면 BigInt로 치환됩니다.&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;javascript&quot; terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;let num = Number.MAX_SAFE_INTEGER; //  9007199254740991
num = BigInt(num);

console.log(num); // 9007199254740991n


const x = 2n ** 53n; // 9007199254740992n
const y = x + 1n; // 9007199254740993n&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;hr/&gt;
&lt;h4 id=&quot;객체-타입&quot; style=&quot;position:relative;&quot;&gt;객체 타입&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85&quot; aria-label=&quot;객체 타입 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;객체 타입은 여기서 함께 적기에는 굉장히 분량이 길어집니다.&lt;br&gt;
자바스크립트는 기본적으로 객체 기반의 언어이기 때문에 &lt;strong&gt;자바스크립트의 대부분이 객체&lt;/strong&gt;라 말해도 과언이 아닙니다. 앞서 살펴본 자료형 7가지 타입이 아닌 값은 &lt;strong&gt;모두 객체&lt;/strong&gt;입니다.&lt;br&gt;
이후 객체를 좀더 자세히 알아보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 변수에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-node-and-npm&quot;&gt;Node.js와 npm&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-variable&quot;&gt;변수 사용하기&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (4) - Node.js와 npm]]></title><description><![CDATA[Node.js 란? 앞서 자바스크립트 개발 환경 에서 언급했다시피, 자바스크립트 실행환경인 Node.js가 있습니다. Node.js와 npm을 통해 React, Vue, Angular, Lodash…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-js-node-and-npm</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-js-node-and-npm</guid><pubDate>Wed, 17 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;nodejs-란&quot; style=&quot;position:relative;&quot;&gt;Node.js 란?&lt;a href=&quot;#nodejs-%EB%9E%80&quot; aria-label=&quot;nodejs 란 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;앞서 &lt;a href=&quot;/tech/let-me-know-js-a-bit-setting-devtool/&quot; target=&quot;_blank&quot;&gt;자바스크립트 개발 환경&lt;/a&gt; 에서 언급했다시피, 자바스크립트 실행환경인 Node.js가 있습니다.&lt;br&gt;
Node.js와 npm을 통해 React, Vue, Angular, Lodash 같은 프레임워크(혹은 라이브러리)를 사용할 수 있게끔 하거나, Babel, Webpack 등의 도구를 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;npm은 조금 생소하죠?&lt;br&gt;
npm(node package manager)은 자바스크립트 패지키 매니저입니다. Node.js에서 사용할 수 있는 모듈을 패키지화해, 패키지를 설치, 관리, 저장할 수 있는 CLI(command line interface)를 제공합니다.&lt;/p&gt;
&lt;p&gt;npm을 이용해 각종 오픈 소스 라이브러리 등을 설치하고 사용할 수 있습니다. 물론 직접 만들어 배포도 가능하구요.&lt;/p&gt;
&lt;h3 id=&quot;nodejs-설치&quot; style=&quot;position:relative;&quot;&gt;Node.js 설치&lt;a href=&quot;#nodejs-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;nodejs 설치 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/ko/&quot;&gt;Node.js&lt;/a&gt;에 접속해 봅시다.&lt;/p&gt;
&lt;p&gt;Node.js 웹사이트에 접속하면 다운로드 버튼이 2가지가 있습니다.&lt;br&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/183798223-3e53dacc-68ae-4428-893e-4d20bcdfcea8.png&quot; alt=&quot;Node.js 다운로드&quot;&gt;
좌측은 LTS 버전으로 안정된 지원을 보장하는 Long Term Support 버전의 Node.js 입니다. 반면 우측은 Current 버전으로 가장 최신 버전이지만, 지속적인 업데이트가 이뤄지는 버전인 만큼 안정적이지 않을 수도 있습니다.&lt;/p&gt;
&lt;p&gt;LTS 버전으로 설치해보겠습니다.&lt;/p&gt;
&lt;p&gt;좌측 LTS 다운로드 버튼을 클릭하면, 운영체제에 적합한 파일이 다운로드됩니다.&lt;br&gt;
Node.js를 설치하면 앞서 말한 &lt;strong&gt;npm&lt;/strong&gt;도 함께 설치됩니다.&lt;br&gt;
다운로드된 파일을 눌러 설치해줍시다.&lt;/p&gt;
&lt;h4 id=&quot;nodejs-설치-위치&quot; style=&quot;position:relative;&quot;&gt;Node.js 설치 위치&lt;a href=&quot;#nodejs-%EC%84%A4%EC%B9%98-%EC%9C%84%EC%B9%98&quot; aria-label=&quot;nodejs 설치 위치 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;windows : C:\Program Files\nodejs\node.exe&lt;/li&gt;
&lt;li&gt;macOS : /usr/local/bin/node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Node.js는 위 디렉토리에 설치됩니다. (버전에 따라 달라질 수 있습니다.)&lt;/p&gt;
&lt;h4 id=&quot;설치-완료-확인&quot; style=&quot;position:relative;&quot;&gt;설치 완료 확인&lt;a href=&quot;#%EC%84%A4%EC%B9%98-%EC%99%84%EB%A3%8C-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;설치 완료 확인 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;windows 사용자는 &lt;code class=&quot;language-text&quot;&gt;Windows + R&lt;/code&gt; 키를 누른 후 입력란에 cmd를 입력해 명령 프롬프트를 엽니다.
MacOS 사용자는 &lt;code class=&quot;language-text&quot;&gt;Shift + Command ⌘ + U&lt;/code&gt; 키를 눌러  터미널 창을 열어줍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js 버전 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;deckgo-highlight-code  terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ node -v&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;ul&gt;
&lt;li&gt;npm 버전 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;deckgo-highlight-code  terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ npm -v&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;br/&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;nodejs-repl-read-eval-print-loop&quot; style=&quot;position:relative;&quot;&gt;Node.js REPL (Read Eval Print Loop)&lt;a href=&quot;#nodejs-repl-read-eval-print-loop&quot; aria-label=&quot;nodejs repl read eval print loop permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;크롬 개발자 도구에서 자바스크립트 코드를 실행할 수 있었듯이, Node.js 도 터미널을 통해 간단한 자바스크립트 코드를 실행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;터미널(cmd)에 아래와 같이 명령어를 입력하면 REPL로 진입할 수 있습니다.&lt;/p&gt;
&lt;deckgo-highlight-code  terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;$ node

Welcome to Node.js v[버전]
Type &amp;quot;.help&amp;quot; for more information.

&amp;gt; 1 + 1
2
&amp;gt; Math.max(10, 20, 30)
30&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;REPL로 자바스크립트 파일을 실행할 수도 있습니다. (js 확장자 생략 가능)&lt;/p&gt;
&lt;deckgo-highlight-code  terminal=&quot;carbon&quot; theme=&quot;blackboard&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;gt; test.js&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;REPL을 종료할 때는 &lt;code class=&quot;language-text&quot;&gt;ctrl + C&lt;/code&gt;를 두 번 눌러주면 됩니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 본격적으로 자바스크립트 문법을 알아보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-setting-vscode/&quot;&gt;VSCode로 간단하게 구축하는 JavaScript 개발환경&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-data-type&quot;&gt;자바스크립트 자료형&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (3) - VSCode로 간단하게 구축하는 JavaScript 개발환경]]></title><description><![CDATA[VSCode 설치 앞서 개발자 도구에서 자바스크립트를 사용해봤는데요. 코딩은 메모장으로도 가능하지만, 에디터가 있으면 보다 수월하게 사용할 수 있습니다. 각종 IDE 등 개발 툴이 많이 있지만, 여기서는 마이크로소프트가 만든 Visual Studio…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-setting-vscode/</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-setting-vscode/</guid><pubDate>Wed, 10 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;vscode-설치&quot; style=&quot;position:relative;&quot;&gt;VSCode 설치&lt;a href=&quot;#vscode-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;vscode 설치 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;앞서 개발자 도구에서 자바스크립트를 사용해봤는데요.&lt;/p&gt;
&lt;p&gt;코딩은 메모장으로도 가능하지만, 에디터가 있으면 보다 수월하게 사용할 수 있습니다. 각종 IDE 등 개발 툴이 많이 있지만, 여기서는 마이크로소프트가 만든 Visual Studio Code라는 소스 편집기를 사용하도록 하겠습니다.&lt;/p&gt;
&lt;h3 id=&quot;windows&quot; style=&quot;position:relative;&quot;&gt;Windows&lt;a href=&quot;#windows&quot; aria-label=&quot;windows permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com&quot;&gt;Visual Studio Code&lt;/a&gt; 에 접속한 후 &lt;strong&gt;Download for Windows&lt;/strong&gt; 버튼을 누르면 자동으로 다운로드가 실행됩니다.&lt;/li&gt;
&lt;li&gt;다운로드 완료 후 설치 파일을 실행합니다. 계약 동의를 눌러주세요.&lt;/li&gt;
&lt;li&gt;추가 작업 선택 전까지 다음을 누르세요&lt;/li&gt;
&lt;li&gt;추가 작업 선택에 모두 체크해주세요.&lt;/li&gt;
&lt;li&gt;설치 버튼을 눌러 설치를 시작합니다.&lt;/li&gt;
&lt;li&gt;VScode가 정상적으로 실행되면 설치가 완료된 것입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;macos&quot; style=&quot;position:relative;&quot;&gt;MacOS&lt;a href=&quot;#macos&quot; aria-label=&quot;macos permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com&quot;&gt;Visual Studio Code&lt;/a&gt; 에 접속한 후 &lt;strong&gt;Download for Mac&lt;/strong&gt; 버튼을 누르면 자동으로 다운로드가 실행됩니다.&lt;/li&gt;
&lt;li&gt;다운로드 완료 후 압축을 해제합니다. 그리고 압축해제한 파일을 실행합니다.&lt;/li&gt;
&lt;li&gt;경고창이 뜨면 열기 버튼을 누릅니다.&lt;/li&gt;
&lt;li&gt;VSCode가 정상적으로 실행되면 설치가 완료된 것입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;vscode-사용하기&quot; style=&quot;position:relative;&quot;&gt;VScode 사용하기&lt;a href=&quot;#vscode-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;vscode 사용하기 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;기본적으로 vscode는 영문으로 설정되어 있습니다.&lt;br&gt;
한글 설정이 편하신 분들은 확장 프로그램을 설치해봅시다.&lt;/p&gt;
&lt;p&gt;확장 프로그램은 &lt;code class=&quot;language-text&quot;&gt;ctrl + shift + x&lt;/code&gt; 단축키 또는 아래 이미지의 ✅ 표시된 곳을 클릭하면 볼 수 있습니다.&lt;br&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/183789539-09056dd3-549f-4de3-94fa-f97114cfd8ca.png&quot; alt=&quot;vscode 마켓플레이스&quot;&gt;&lt;/p&gt;
&lt;p&gt;저는 이미 한글 확장 프로그램을 깔았는데요. &lt;code class=&quot;language-text&quot;&gt;korean&lt;/code&gt;을 검색한 후 가장 상위에 있는 마이크로소프트에서 만든 extension을 설치해봅시다.&lt;br&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/183789316-5bb3edc1-4788-4659-a345-ac954b4ca339.png&quot; alt=&quot;한글 확장 프로그램&quot;&gt;&lt;/p&gt;
&lt;p&gt;다음 글에서는 Node.js와 npm을 알아보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-setting-devtool/&quot;&gt;브라우저 JavaScript 개발환경&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-js-node-and-npm&quot;&gt;Node.js와 npm&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (2) - 브라우저 JavaScript 개발환경]]></title><description><![CDATA[자바스크립트 개발 환경 자바스크립트는 브라우저 Node.js 이렇게 두 환경에서 실행할 수 있습니다. 모든 브라우저(크롬, edge, firefox 등)은 자바스크립트를 해석하고 실행할 수 있는 Javascript…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-setting-devtool/</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-setting-devtool/</guid><pubDate>Wed, 03 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;자바스크립트-개발-환경&quot; style=&quot;position:relative;&quot;&gt;자바스크립트 개발 환경&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD&quot; aria-label=&quot;자바스크립트 개발 환경 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;자바스크립트는&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;브라우저&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 두 환경에서 실행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;모든 브라우저(크롬, edge, firefox 등)은 자바스크립트를 해석하고 실행할 수 있는 Javascript 엔진을 내장하고 있습니다. 브라우저 뿐 아니라 Node.js라는 환경에서도 Javascript를 실행할 수 있습니다. Node.js는 이름부터 js가 들어가있죠?&lt;/p&gt;
&lt;h3 id=&quot;브라우저-vs-nodejs-환경-비교&quot; style=&quot;position:relative;&quot;&gt;브라우저 vs Node.js 환경 비교&lt;a href=&quot;#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-vs-nodejs-%ED%99%98%EA%B2%BD-%EB%B9%84%EA%B5%90&quot; aria-label=&quot;브라우저 vs nodejs 환경 비교 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;다만 브라우저에선 HTML과 CSS 그리고 자바스크립트를 렌더링해서 웹페이지를 보여주는 것에 초점이 있다면, Node.js 환경에선 브라우저가 아닌 외부에서 자바스크립트를 실행할 수 있도록 실행 배경을 만들어주는 것이 목적입니다.&lt;br&gt;
같은 자바스크립트 코드를 작성할 수 있지만 Node.js는 브라우저에 렌더링하는 용도가 아니기 때문에, DOM 조작은 불가능합니다.&lt;/p&gt;
&lt;p&gt;DOM은 이후 자세히 알아보겠지만, 간략히 말하자면 춤추는 빨간색 토마토를 자바스크립트가 춤추는 초록색 토마토로 만들 수 있게 접근하게 하는 Document Object Model입니다.&lt;/p&gt;
&lt;p&gt;DOM은 Document Object Model이기 때문에 Document인 HTML에서만 사용이 가능하니, Node.js 환경에선 DOM API는 제공하지 않는 것이죠.&lt;/p&gt;
&lt;p&gt;반면 Node.js 에서는 파일 생성과 수정이 가능한 파일 시스템을 제공합니다. 파일 시스템은 브라우저는 지원하지 않습니다. 왜냐구요? 브라우저를 통해 naver에 접근했다고 가정합시다. naver 홈페이지에 이미지 파일을 싹 토마토로 바꿔버리는 자바스크립트 코드를 입력하고 보냈습니다. 그러면 naver가 운영되는 서버 속 이미지 파일이 싹 다 토마토가 되어버릴 것입니다. 따라서 브라우저에서는 보안상의 이유로 파일시스템을 제공하지 않습니다.&lt;/p&gt;
&lt;p&gt;대략적으로 이런 차이가 있다 정도만 알아두고 자바스크립트를 알아봅시다.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;웹-브라우저-실행환경&quot; style=&quot;position:relative;&quot;&gt;웹 브라우저 실행환경&lt;a href=&quot;#%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%8B%A4%ED%96%89%ED%99%98%EA%B2%BD&quot; aria-label=&quot;웹 브라우저 실행환경 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;우선 브라우저 환경에서 자바스크립트를 활용해봅시다.&lt;br&gt;
여러가지 브라우저가 있지만 여기서는 구글 chrome 브라우저를 사용하겠습니다. 크롬을 선택한 이유는 ECMAScript(표준화된 자바스크립트)를 준수하고, 시장 점유율이 가장 높기 때문입니다.&lt;/p&gt;
&lt;p&gt;만약 크롬 브라우저가 설치되어 있지 않다면 다음 웹사이트에서 설치 해주세요.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com/intl/ko_kr/chrome/&quot;&gt;크롬 웹 브라우저 다운로드&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;개발자-도구&quot; style=&quot;position:relative;&quot;&gt;개발자 도구&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%8F%84%EA%B5%AC&quot; aria-label=&quot;개발자 도구 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;크롬이 제공하는 개발자 도구(DevTool)은 웹 개발에 있어 필수적입니다. 크롬을 설치했다면 기본으로 내장되어 있으니 별도의 설치나 확장 프로그램은 필요 없습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com/&quot;&gt;구글 홈페이지&lt;/a&gt;에 들어가 개발자 도구를 열어보겠습니다.&lt;/p&gt;
&lt;p&gt;윈도우 사용자는  &lt;strong&gt;F12&lt;/strong&gt; 또는 &lt;strong&gt;Ctrl + Shift + i&lt;/strong&gt;를 눌러주세요.&lt;br&gt;
맥OS 사용자는 &lt;strong&gt;Command ⌘ + option ⌥ + i&lt;/strong&gt;를 눌러주세요.&lt;/p&gt;
&lt;p&gt;우측 상단 &lt;strong&gt;⋮&lt;/strong&gt; 아이콘을 클릭하면 콘솔창을 원하는 곳에 위치하게 할 수 있습니다. Dock side에서 편하게 사용할 수 있는 레이아웃을 선택하면 됩니다.&lt;/p&gt;
&lt;p&gt;편한 레이아웃을 선택했다면 개발자 도구의 기능을 알아봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elements : 렌더링된 웹페이지의 DOM, CSS를 확인, 임시 편집할 수 있습니다. 편집한 내용은 저장되지 않습니다.&lt;/li&gt;
&lt;li&gt;Console : 웹페이지의 에러를 확인하거나 자바스크립트에서 작성한 &lt;strong&gt;console.log&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sources : 로딩된 웹페이지의 자바스크립트 코드를 디버깅할 수 있습니다.&lt;/li&gt;
&lt;li&gt;Network : 로딩된 웹페이지와 연관된 네트워크 request 정보 및 성능을 확인할 수 있습니다.&lt;/li&gt;
&lt;li&gt;Application : 웹 스토리지, 세션, 쿠키를 확인 및 관리할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Console 탭에 들어가봅시다.&lt;/p&gt;
&lt;p&gt;자바스크립트로 개발 시, 보통 받아오는 데이터 값 등을 &lt;strong&gt;console.log&lt;/strong&gt;로 출력해 확인합니다.&lt;/p&gt;
&lt;p&gt;한번 출력해볼까요?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;console.log(&apos;Hello World!&apos;)&lt;/strong&gt; 를 작성 후 엔터 키를 누르면 이렇게 &lt;code class=&quot;language-text&quot;&gt;Hello World!&lt;/code&gt;가 출력됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/183029749-003920ed-e9fe-4490-a7dc-00fc1ad34d13.png&quot; alt=&quot;개발자 도구 console.log 출력&quot;&gt;&lt;/p&gt;
&lt;p&gt;여러 줄을 입력하고 싶을 때에는 &lt;strong&gt;shift&lt;/strong&gt;키를 누른 상태에서 &lt;strong&gt;Enter&lt;/strong&gt;키를 누르면 줄 바꿈이 됩니다.&lt;/p&gt;
&lt;p&gt;이렇게 개발자 도구를 활용해 자바스크립트 코드를 작성해볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 자바스크립트 코드 작성을 수월하게 도와주는 VSCode 설치법을 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-about-what-js-can-do/&quot;&gt;JavaScript에 대해!&lt;/a&gt; 👈 이전 글 보기&lt;br&gt;
◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-setting-vscode/&quot;&gt;VSCode로 간단하게 구축하는 JavaScript 개발환경&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쫌만알자! (1) - JavaScript에 대해!]]></title><description><![CDATA[쫌쫌따리 만만하게 알아보는 자바스크립트 시리즈 JavaScript…]]></description><link>https://yeony99.github.io/tech/let-me-know-js-a-bit-about-what-js-can-do/</link><guid isPermaLink="false">https://yeony99.github.io/tech/let-me-know-js-a-bit-about-what-js-can-do/</guid><pubDate>Wed, 27 Jul 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;쫌&lt;/strong&gt;쫌따리 &lt;strong&gt;만&lt;/strong&gt;만하게 &lt;strong&gt;알&lt;/strong&gt;아보는 &lt;strong&gt;자바스크립트&lt;/strong&gt; 시리즈&lt;/p&gt;
&lt;h2 id=&quot;javascript로-뭘-할-수-있나요&quot; style=&quot;position:relative;&quot;&gt;JavaScript로 뭘 할 수 있나요?&lt;a href=&quot;#javascript%EB%A1%9C-%EB%AD%98-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%82%98%EC%9A%94&quot; aria-label=&quot;javascript로 뭘 할 수 있나요 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;자바스크립트는 할 수 있는게 정말 많습니다.&lt;/p&gt;
&lt;p&gt;간단하게 말해보죠. 여기 춤을 추고 있는 빨간색 토마토가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/76241233/178200443-8230885e-43f3-4c3c-9b82-7bcd4f108ed1.gif&quot; alt=&quot;토마토&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;빨간색&lt;/strong&gt;이고, &lt;strong&gt;춤을 추는&lt;/strong&gt;, &lt;strong&gt;토마토&lt;/strong&gt;입니다.
토마토를 웹에 비유한다면, HTML은 토마토라는 태그이고, CSS는 빨간색이라는 스타일링을, Javascript는 춤을 추는 &lt;strong&gt;동작을 컨트롤&lt;/strong&gt;합니다.&lt;br&gt;
사실 자바스크립트는 동작뿐 아니라 HTML도 수정할 수 있고, 스타일링을 변경할 수도 있습니다. 이런 방법은 차차 알아가보도록 해요.&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&quot;자바스크립트로는-이런-걸-할-수-있습니다&quot; style=&quot;position:relative;&quot;&gt;자바스크립트로는 이런 걸 할 수 있습니다!&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C%EB%8A%94-%EC%9D%B4%EB%9F%B0-%EA%B1%B8-%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;자바스크립트로는 이런 걸 할 수 있습니다 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;자바스크립트를 활용하면 이런 인터랙티브한 동작을 만들 수도 있구요&lt;/p&gt;
&lt;iframe height=&quot;300&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;Airplanes.&quot; src=&quot;https://codepen.io/ste-vg/embed/GRooLza?default-tab=&amp;theme-id=dark&quot; frameborder=&quot;no&quot; loading=&quot;lazy&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&quot;https://codepen.io/ste-vg/pen/GRooLza&quot;&gt;
  Airplanes.&lt;/a&gt; by Steve Gardner (&lt;a href=&quot;https://codepen.io/ste-vg&quot;&gt;@ste-vg&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;뿅뿅 재밌는 게임도 만들 수 있구요&lt;/p&gt;
&lt;iframe height=&quot;500&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;Vanilla JS Snake&quot; src=&quot;https://codepen.io/fariati/embed/mdRpEYP?default-tab=&amp;theme-id=dark&quot; frameborder=&quot;no&quot; loading=&quot;lazy&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&quot;https://codepen.io/fariati/pen/mdRpEYP&quot;&gt;
  Vanilla JS Snake&lt;/a&gt; by F A R I A T (&lt;a href=&quot;https://codepen.io/fariati&quot;&gt;@fariati&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;데이터를 처리해 서버로 보낼 수도 있습니다.&lt;/p&gt;
&lt;iframe height=&quot;300&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;JavaScript Form Submit&quot; src=&quot;https://codepen.io/juno_okyo/embed/yOjaEZ?default-tab=&amp;theme-id=dark&quot; frameborder=&quot;no&quot; loading=&quot;lazy&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&quot;https://codepen.io/juno_okyo/pen/yOjaEZ&quot;&gt;
  JavaScript Form Submit&lt;/a&gt; by JUNO_OKYO (&lt;a href=&quot;https://codepen.io/juno_okyo&quot;&gt;@juno_okyo&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;자바스크립트로 할 수 있는 건 정말 많습니다.&lt;br&gt;
다음 글에선 자바스크립트 개발 환경을 세팅해보겠습니다.&lt;/p&gt;
&lt;p&gt;◾ &lt;a href=&quot;/tech/let-me-know-js-a-bit-setting-devtool/&quot;&gt;브라우저 JavaScript 개발환경&lt;/a&gt; 👈 다음 글 보기&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Next.js를 배워보는 중]]></title><description><![CDATA[리액트를 다시 공부하면서, 리액트 기반 프레임워크도 살짝 배워보자는 마음으로 공식문서를 찬찬히 읽어보고 있다. CSR이 아니라 SSR이 기반인 게 특징이네. 프로젝트 세팅을 한 번 해봤는데 페이지 추가나 라우팅이 정말 편리하다. 회사에서 주로 Vue…]]></description><link>https://yeony99.github.io/log/start-nextjs</link><guid isPermaLink="false">https://yeony99.github.io/log/start-nextjs</guid><pubDate>Fri, 15 Jul 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;리액트를 다시 공부하면서, 리액트 기반 프레임워크도 살짝 배워보자는 마음으로 공식문서를 찬찬히 읽어보고 있다. CSR이 아니라 SSR이 기반인 게 특징이네. 프로젝트 세팅을 한 번 해봤는데 페이지 추가나 라우팅이 정말 편리하다. 회사에서 주로 Vue를 써온 나로서는 Vue가 React보다 훨씬 간편하다고 느꼈는데, Next.js는 너무 간단한 거 아니야? 아무튼 빠르게 하나 뭔가 만들어봐야겠다. 너무 쉽고 재밌다 Next 너...&lt;/p&gt;</content:encoded></item><item><title><![CDATA[햇수로는 2년차, 만 1년차 개발자]]></title><description><![CDATA[만 1년을 채우고 나서야 쓰는 지난 날의 회고. 나에게 묻고 답하기. 2021년 Q. 왜 개발이었나? A. 6개월만 공부하면 취업할 수 있다는 과장 광고에 속았습니다... 농담이다. 아니 사실 진담이다. 주위 선배들은 대부분 2~…]]></description><link>https://yeony99.github.io/retrospective/1st-year-as-a-FEDev/</link><guid isPermaLink="false">https://yeony99.github.io/retrospective/1st-year-as-a-FEDev/</guid><pubDate>Thu, 07 Jul 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;만 1년을 채우고 나서야 쓰는 지난 날의 회고.&lt;br&gt;
나에게 묻고 답하기.&lt;/p&gt;
&lt;h2 id=&quot;2021년&quot; style=&quot;position:relative;&quot;&gt;2021년&lt;a href=&quot;#2021%EB%85%84&quot; aria-label=&quot;2021년 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;q-왜-개발이었나&quot; style=&quot;position:relative;&quot;&gt;Q. 왜 개발이었나?&lt;a href=&quot;#q-%EC%99%9C-%EA%B0%9C%EB%B0%9C%EC%9D%B4%EC%97%88%EB%82%98&quot; aria-label=&quot;q 왜 개발이었나 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A. 6개월만 공부하면 취업할 수 있다는 과장 광고에 속았습니다...&lt;/p&gt;
&lt;p&gt;농담이다. 아니 사실 진담이다. 주위 선배들은 대부분 2~3년 정도 취업준비를 하는 것 같았으니까 말이다. 나는 18살에 대학에 입학했다. 빠르게 대학에 입학한 만큼 여유를 즐기기보다는 빠르게 돈을 벌고 싶었다. 돈을 벌 수 있는 방법이야 많았지만, 되도록 취업을 하는 방향으로 소득이 있길 바랐다. 하지만 뭐... 취업준비는 도대체 무엇을 해야하는지 몰랐었다. 다들 하는 대외활동, 동아리 임원, 조장, 공모전, 어학 등의 이른바 &lt;strong&gt;스펙&lt;/strong&gt;을 내 자기소개 꼬리표로 달아놓았지만 뭐, 보란듯이 4-1학기 첫 취준에서 서류탈락의 씁쓸함을 맛봤다.&lt;br&gt;
서류 결과를 기다릴 때 내가 뭐라고 했냐면 &quot;이거 하나도 안 붙고 다 떨어지면 나 정말로 개발배울거야&quot; 라고 했다. 그렇게 개발 공부를 시작했다. 왜 하필 개발이었냐 하면, 그저 퍼포먼스 마케터를 준비하다가 전향한 사람이었기 때문이라고 말해두겠다. (난 20년도에 R을 배운 적이 있다. 당시에는 나름 코드를 쳤다고 생각했다.)&lt;br&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;q-성급한-결정이라고-생각한-적은&quot; style=&quot;position:relative;&quot;&gt;Q. 성급한 결정이라고 생각한 적은?&lt;a href=&quot;#q-%EC%84%B1%EA%B8%89%ED%95%9C-%EA%B2%B0%EC%A0%95%EC%9D%B4%EB%9D%BC%EA%B3%A0-%EC%83%9D%EA%B0%81%ED%95%9C-%EC%A0%81%EC%9D%80&quot; aria-label=&quot;q 성급한 결정이라고 생각한 적은 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A. 있다.&lt;/p&gt;
&lt;p&gt;대부분이 성급한 결정이라고 했다. 더군다나 나는 문과 중의 문과인 국문학도였다. 나조차도 사실 엄청난 확신은 없었지만, 앞서 말했듯 일단 배우고 나면 IT는 인력난이니 일할 수 있다는 말에 혹한 게 컸다. 그리고 뭐... 수험생활 한 번 더 한다고 생각하니 마음은 편안했다.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;q-무엇을-배웠나&quot; style=&quot;position:relative;&quot;&gt;Q. 무엇을 배웠나?&lt;a href=&quot;#q-%EB%AC%B4%EC%97%87%EC%9D%84-%EB%B0%B0%EC%9B%A0%EB%82%98&quot; aria-label=&quot;q 무엇을 배웠나 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A. 국비학원에서 Java와 Spring 등 백엔드 기술을 배웠다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;풀스택 개발자 양성과정&lt;/strong&gt; 이란 과정명에 속은 게 맞다!&lt;br&gt;
나는 풀스택 개발자 양성과정이라 하길래 이걸 배우면 마치 세부전공마냥 &lt;span style=&quot;font-size: 0.8rem&quot;&gt;(국문과에서는 문학전공 / 어학전공 등으로 루트를 나눌 수 있다)&lt;/span&gt; 선택할 수 있는 줄 알았다. 아니었다. 그냥 나는 백엔드 기술만 주구장창 배웠다.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;q-어떻게-프론트엔드-개발자가-되었나&quot; style=&quot;position:relative;&quot;&gt;Q. 어떻게 프론트엔드 개발자가 되었나?&lt;a href=&quot;#q-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EC%97%88%EB%82%98&quot; aria-label=&quot;q 어떻게 프론트엔드 개발자가 되었나 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A. 학원 수업과 별개로 배웠다.&lt;/p&gt;
&lt;p&gt;자바를 싫어한 건 아니었지만, 내가 css를 팀 중에서 가장 잘했다. 처음엔 의외로 좀 못하던 편이었는데, 집에서 간단한 퀴즈 풀듯이 &lt;a href=&quot;https://www.freecodecamp.org/&quot;&gt;FreeCodeCamp&lt;/a&gt;의 반응형 웹 파트를 꾸준히 연습했다. 그 이후 중간 세미 프로젝트에서는 전체 레이아웃 퍼블리싱을 내가 맡았고, 마지막 프로젝트에서는 모든 팀원이 나한테 퍼블리싱을 물어봤다.&lt;br&gt;
내게 강점이 되는 부분을 발전시키면 좋을 것이라 생각하고, 프론트엔드를 공부하고 싶어졌다. 학원에서 &lt;code class=&quot;language-text&quot;&gt;JSP&lt;/code&gt;를 사용하면서 개인적으로 &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Vue&lt;/code&gt;를 배우기 시작했다. 아직까지도 가장 기억에 남는 건 &lt;a href=&quot;https://youthful-borg-c1eaa4.netlify.app/&quot;&gt;Notedly&lt;/a&gt; 프로젝트이다. 기술 스택은 React, Styled-component, Node.js, ApolloGraphQL, MongoDB를 사용했다. Netlify에 호스팅까지 해봤다. 이 프로젝트는 실제로 책 한 권의 과정을 그대로 따라간 것이긴 하지만, 직접 개발환경을 세팅하고 학원에서 배워보지 못했던 새로운 기술을 사용했다는 점에 있어 큰 뿌듯함이 되었다. 특히 (무료 호스팅이긴 하지만) 사람들에게 내가 만들었다며 링크를 보내줄 수 있다는 점이 너무나도 맘에 들었다.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;취업&quot; style=&quot;position:relative;&quot;&gt;취업&lt;a href=&quot;#%EC%B7%A8%EC%97%85&quot; aria-label=&quot;취업 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;21년-7월-프론트엔드-개발자로-취업했다&quot; style=&quot;position:relative;&quot;&gt;21년 7월, 프론트엔드 개발자로 취업했다.&lt;a href=&quot;#21%EB%85%84-7%EC%9B%94-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%96%88%EB%8B%A4&quot; aria-label=&quot;21년 7월 프론트엔드 개발자로 취업했다 permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;학원을 수료하는 날, 면접 제의가 왔다. 프론트엔드 3년차를 뽑고 있는 회사였는데 신입인 나를 면접에 부른 것이다. 수료식이 끝나고 바로 다음날 면접을 보러 갔고, 나는 일주일만에 바로 취업하게 되었다.&lt;br&gt;
지금 생각하면 조금 다른 회사도 면접을 가봤어야 하는 것이 아닌가 싶긴 하다. 특히 나는 마케팅이나 기획 분야에도 관심이 많은 사람이었기 때문에 스타트업을 갔어도 좋았을 것 같았다. 하지만 당시 날 사로잡은 건 당시 면접관으로 계셨던 개발이사님의 한 마디였다. &quot;입사하면 빡세게 가르쳐드릴게요.&quot; 그 한 마디에 입사를 결정했다.&lt;/p&gt;
&lt;br/&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;2022년-1년차의-회고-5f&quot; style=&quot;position:relative;&quot;&gt;2022년, 1년차의 회고 5F&lt;a href=&quot;#2022%EB%85%84-1%EB%85%84%EC%B0%A8%EC%9D%98-%ED%9A%8C%EA%B3%A0-5f&quot; aria-label=&quot;2022년 1년차의 회고 5f permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1년 동안의 배움을 정리해보고자 하는 마음으로 5F 회고를 작성해본다.&lt;/p&gt;
&lt;h3 id=&quot;fact&quot; style=&quot;position:relative;&quot;&gt;Fact&lt;a href=&quot;#fact&quot; aria-label=&quot;fact permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;at-work&quot; style=&quot;position:relative;&quot;&gt;At Work&lt;a href=&quot;#at-work&quot; aria-label=&quot;at work permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vue.js와 JPA로 개발했다.&lt;/li&gt;
&lt;li&gt;사용자 권한을 전역변수로 관리하였다.&lt;/li&gt;
&lt;li&gt;node-sass를 사용해 반응형 웹을 제작했다.&lt;/li&gt;
&lt;li&gt;팀내 공용 개발 템플릿 작업 중 Vue 컴포넌트 제작에 주도적으로 참여했다.
&lt;ul&gt;
&lt;li&gt;유지보수, 추가 기능 개발 중.&lt;/li&gt;
&lt;li&gt;컴포넌트로 만든 기능은 Table, Input, SelectBox, Form, Chart 등 자주 반복되는 프론트엔드 요소.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vue 프로젝트 생성과 프로젝트 구조 정리에 참여했다.&lt;/li&gt;
&lt;li&gt;개발이사님과 페어 프로그래밍을 했다.&lt;/li&gt;
&lt;li&gt;도서 [모던 웹 애플리케이션 개발] 세미나를 진행했다. (맡은 파트는 ES6 + Vue.js + 전역 데이터 관리 + DB)&lt;/li&gt;
&lt;li&gt;사내 Typescript 스터디에 참여했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h4 id=&quot;on-my-own&quot; style=&quot;position:relative;&quot;&gt;On My Own&lt;a href=&quot;#on-my-own&quot; aria-label=&quot;on my own permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발 블로그를 시작했다. (포폴 사이트를 리뉴얼했다.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xaksis/vue-good-table&quot;&gt;VueGoodTable&lt;/a&gt; 오픈소스에 기여했다.&lt;/li&gt;
&lt;li&gt;Figma와 UI/UX 공부를 시작했다.&lt;/li&gt;
&lt;li&gt;토이 프로젝트를 시작했다.
&lt;ul&gt;
&lt;li&gt;Figma로 로고제작을 마쳤고, 와이어프레임 제작 중이다.&lt;/li&gt;
&lt;li&gt;Vue3와 Typescript를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeCodeCamp 한국어 번역 감수에 참여 중이다.&lt;/li&gt;
&lt;li&gt;취미로 Flutter를 배우고 있다.
&lt;ul&gt;
&lt;li&gt;Flutter Extended I/O 2022에 온라인으로 참가했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;feeling&quot; style=&quot;position:relative;&quot;&gt;Feeling&lt;a href=&quot;#feeling&quot; aria-label=&quot;feeling permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;공부는 어려운 것, 하지만 재미있는 것.&lt;br&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;finding&quot; style=&quot;position:relative;&quot;&gt;Finding&lt;a href=&quot;#finding&quot; aria-label=&quot;finding permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;특히 공용 컴포넌트를 제작하며 어려움이 많았다. 팀원들이 기존에 사용하고 있던 방식을 해치지 않으면서, 확장이 가능해야 하고, 이전보다 성능이 좋아야 했다.&lt;br&gt;
기존 프로젝트는 &lt;strong&gt;산재되어있다&lt;/strong&gt; 라고 말할 수 있을 정도로 형식이 제각각인 경우가 많았는데, 이를 일정한 패턴을 가지도록 규칙을 정립하는 일인지라 쉽지 않았다.
신경써서 개발한 부분은 이러하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stylesheet를 변경하면 한대로 스타일 적용되게 하기&lt;/li&gt;
&lt;li&gt;props를 EventBus처리하지 말고 흐름을 찾을 수 있도록 하기.&lt;/li&gt;
&lt;li&gt;소스가 3번 이상 반복되면 분리해내기. &lt;strong&gt;반복을 최소화&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;지속적인 유지보수가 용이하도록 함수명, 변수명 컨벤션을 지키기&lt;/li&gt;
&lt;li&gt;백엔드와 프론트엔드가 소통할 수 있도록 하기
&lt;ol&gt;
&lt;li&gt;하드코딩을 하지 않는다.&lt;/li&gt;
&lt;li&gt;api가 만들어지지 않은 경우 api 호출부에 return 되는 데이터 구조를 백엔드가 확인할 수 있도록 더미 데이터를 만든다.&lt;/li&gt;
&lt;li&gt;api를 호출한 것처럼 vue파일에는 작성한다.&lt;/li&gt;
&lt;li&gt;api가 만들어지면 더미 데이터를 없애고 api를 호출한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하드코딩을 하고 api가 만들어지면 다시 지우는 방식을 전면 수정하니 빠르고 원활하게 소통이 가능했다.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;future-action&quot; style=&quot;position:relative;&quot;&gt;Future action&lt;a href=&quot;#future-action&quot; aria-label=&quot;future action permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Vue3와 타입 에러 방지를 위한 Typescript 공부&lt;/li&gt;
&lt;li&gt;자바스크립트에 관한 깊은 이해를 위해 블로그 작성, 같이 발전하기&lt;/li&gt;
&lt;li&gt;코드컨벤션 규칙 지키기&lt;/li&gt;
&lt;li&gt;UI/UX 공부&lt;/li&gt;
&lt;li&gt;꾸준한 책 읽기.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;feedback&quot; style=&quot;position:relative;&quot;&gt;Feedback&lt;a href=&quot;#feedback&quot; aria-label=&quot;feedback permalink&quot; class=&quot;custom-class after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;20&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;20&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;피드백은 어쩌면 올해 말 회고가 될 수도 있겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[읽기: 개발자의 글쓰기]]></title><description><![CDATA[Rules for naming a variable…]]></description><link>https://yeony99.github.io/log/book-developers-writing</link><guid isPermaLink="false">https://yeony99.github.io/log/book-developers-writing</guid><pubDate>Thu, 30 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Rules for naming a variable를 한국어로 읽을 수 있다!&lt;br&gt;
&amp;#x3C;개발자의 글쓰기&gt;를 완독했다. 신입 개발자가 무슨 거창하게 개발 글쓰기? 라는 생각을 가진 사람이라도 반드시 읽어봤으면 하는 책이었다. 오히려 신입 때부터 이런 사항들을 알고 간다면 앞으로의 개발 라이프가 수월할 건 자명한 사실...&lt;br&gt;
인상 깊었던 지점을 꼽아본다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수명, 함수명 짓기 방법&lt;/li&gt;
&lt;li&gt;주석쓰기 방법&lt;/li&gt;
&lt;li&gt;기술 블로그 작성법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;변수명과 함수명 짓기는 나의 1년 개발기에 있어서도 하나의 챌린지였다. 어떤 네이밍이여야 이 함수의 작동을 잘 드러낼 수 있을까? 고민의 나날이었다. 사실 이런 부분들은 코딩을 하며 경험적으로 얻어지는 것이라 생각하긴 하지만, 일종의 참고서가 될 만 했다.&lt;br&gt;
또 기술블로그는 요새 어떻게 써야 잘 전달이 될까 하는 고민을 하고 사는지라 무척 집중해서 읽은 대목이었다. 전반적인 글 작성은 이렇게 하기.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;주제가 아닌 소재의식으로 쓰기&lt;/li&gt;
&lt;li&gt;독자 수준이 아닌 작성자 수준으로 쓰기&lt;/li&gt;
&lt;li&gt;재미있게 쓰기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;글의 테마는 저, 술, 편, 집으로 카테고리화할 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저: 직접 경험하고 실험한 과정이나 결과 -- 개발기, 도입기, 적용기&lt;/li&gt;
&lt;li&gt;술: 어떤 것을 분석하여 의미를 풀이하고 해석한 것 -- 기술소개, 용어분석, 에러 해결법&lt;/li&gt;
&lt;li&gt;편: 산만하고 복잡한 자료를 편집해 질서 부여 -- 프로그램 설치/설정법, 튜토리얼, 세미나 후기, 책 리뷰&lt;/li&gt;
&lt;li&gt;집: 여러 사람의 견해나 흩어진 자료를 한데모아 정리 -- 명령어 모음, 팁, 00가지 규칙&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;나도 이와 같은 일련의 규칙을 가지고 글 작성을 해봐야겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[RE:제로부터 시작하는 REact]]></title><description><![CDATA[React를 다시 보는 중. 일은 Vue를 주로 쓰다보니 리액트는 개인 프로젝트에서만 쓰게 된다. 이 지점이 못내 아쉬워. 규모가 있는 리액트 프로젝트에 참여하고 싶다.]]></description><link>https://yeony99.github.io/log/learning-react</link><guid isPermaLink="false">https://yeony99.github.io/log/learning-react</guid><pubDate>Tue, 28 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;React를 다시 보는 중. 일은 Vue를 주로 쓰다보니 리액트는 개인 프로젝트에서만 쓰게 된다. 이 지점이 못내 아쉬워. 규모가 있는 리액트 프로젝트에 참여하고 싶다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[토이 프로젝트 순항중]]></title><description><![CDATA[토이 프로젝트에 써볼 수 있는 건 다 해보기로 했다. 대표적인 게 깃허브! 내가 써보고 싶었던 건 이슈 관리 등의 기능이었는데, 이번에 써볼 수 있어서 조금 행복하다. 그리고 잘 해보고 싶었던 것들... issue…]]></description><link>https://yeony99.github.io/log/join-freecodecamp-translation</link><guid isPermaLink="false">https://yeony99.github.io/log/join-freecodecamp-translation</guid><pubDate>Mon, 27 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;토이 프로젝트에 써볼 수 있는 건 다 해보기로 했다. 대표적인 게 깃허브! 내가 써보고 싶었던 건 이슈 관리 등의 기능이었는데, 이번에 써볼 수 있어서 조금 행복하다.&lt;br&gt;
그리고 잘 해보고 싶었던 것들...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;issue 발행 후 코멘트 남기기&lt;/li&gt;
&lt;li&gt;milestone 설정&lt;/li&gt;
&lt;li&gt;칸반 생성&lt;/li&gt;
&lt;li&gt;브랜치 관리, 커밋 메시지 작성 규칙 지키기&lt;/li&gt;
&lt;li&gt;컴포넌트 관리&lt;/li&gt;
&lt;li&gt;README 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사소한 것들이지만 잘 해보려고 한다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Flutter I/O Extended]]></title><description><![CDATA[Flutter를 배우기 시작하며 이것저것 정보를 찾아듣고 있다. 그러던 와중 festa에서 Flutter I/O Extended가 진행된다는 거...!!! 오프라인 참가를 하고 싶었는데, 일정이 여의치 않아서 온라인으로 참가했다. Flutter…]]></description><link>https://yeony99.github.io/log/flutter-io</link><guid isPermaLink="false">https://yeony99.github.io/log/flutter-io</guid><pubDate>Sun, 26 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Flutter를 배우기 시작하며 이것저것 정보를 찾아듣고 있다. 그러던 와중 festa에서 Flutter I/O Extended가 진행된다는 거...!!! 오프라인 참가를 하고 싶었는데, 일정이 여의치 않아서 온라인으로 참가했다.&lt;br&gt;
Flutter Desktop도 신기했고, Flutter 프로젝트를 클린 아키텍처로 구성하는 방법도 들을 수 있어서 좋았다.&lt;br&gt;
확실히 Multi Platform을 지원하는 언어의 이점이 여실히 느껴졌던 행사.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[FreeCodeCamp 번역 감수에 참여했다.]]></title><description><![CDATA[개발을 처음 배우기 시작했을 때, 무척이나 잘 이용했던 FreeCodeCamp 의 한국어 번역이 진행된다고 한다.
내 초창기의 추억(?)이 서려있는 사이트라 비록 번역 활동에 참가하진 못하더라도 변역본 감수자로 들어가게 되었다!
Trello…]]></description><link>https://yeony99.github.io/log/join-freecodecamp-translation</link><guid isPermaLink="false">https://yeony99.github.io/log/join-freecodecamp-translation</guid><pubDate>Sat, 25 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;개발을 처음 배우기 시작했을 때, 무척이나 잘 이용했던 &lt;a href=&quot;https://www.freecodecamp.org/learn&quot;&gt;FreeCodeCamp&lt;/a&gt; 의 한국어 번역이 진행된다고 한다.
내 초창기의 추억(?)이 서려있는 사이트라 비록 번역 활동에 참가하진 못하더라도 변역본 감수자로 들어가게 되었다!
Trello와 Github을 사용해 번역-검수 작업을 하고 있다. 트렐로는 처음 써보는데, 노션이랑 비슷해서 엄청 새로운 느낌은 없는 듯 하다. 내 활동이 코딩을 갓 배우는 사람들에게 도움이 조금이마나 되면 좋겠다. 🙄&lt;/p&gt;</content:encoded></item><item><title><![CDATA[매일매일 책 읽기]]></title><description><![CDATA[책 읽기는 얼마나 도움이 될까? 학부생활을 순수 문과대 학생으로 하며 수없이 많은 책을 읽었고, 졸업한 지금은 장르를 불문하고 책을 읽고 있다. 학부 때와의 차이점이라면 그때는 9…]]></description><link>https://yeony99.github.io/log/reading-everyday</link><guid isPermaLink="false">https://yeony99.github.io/log/reading-everyday</guid><pubDate>Thu, 23 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;책 읽기는 얼마나 도움이 될까? 학부생활을 순수 문과대 학생으로 하며 수없이 많은 책을 읽었고, 졸업한 지금은 장르를 불문하고 책을 읽고 있다. 학부 때와의 차이점이라면 그때는 90% 이상이 문학이었다는 것이고, 지금은 경제, 문학, 개발, 디자인 위주다.&lt;br&gt;
책 읽기는 나름 건강한 취미라고 생각한다. 진부한 상황 있잖아. 취미가 뭐에요? 라는 질문에 독서요 라고 대답하는 그런 장면. 꽤나 건전하고 고상한 취미라는 인식이 있는 거겠지? 어찌 됐든 간에 책 읽는 사람을 바라보는 시선은 훌륭하다.&lt;br&gt;
그렇다면 나는 어떤가? 새해 목표를 한 해 50권 이상 읽기로 잡고 반년이 지난 지금은 30권 이상을 읽어 왔는데, 과연 이런 양치기가 좋은 것일까... 나에게 남은 것이 얼마나 있을까 싶다. (훌륭하고 기억에 남는 책은 정말 많았다. 그런 책들로 내가 어떤 함양을 했는가를 모르겠다는 것.) 나는 양질의 책을 제목만 보고 알아차리는 재주는 없기 때문에 일단은 많이 읽어보려한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[친절한 사람되기]]></title><description><![CDATA[코딩을 처음 배운 사람(특히 비전공자)에게 필요한 정보를 주고싶다. 내가 처음 겪었던 문화(?)는 조금 불친절했기 때문에... 예를 들면 "A랑 B…]]></description><link>https://yeony99.github.io/log/what-would-be-good-for-starter</link><guid isPermaLink="false">https://yeony99.github.io/log/what-would-be-good-for-starter</guid><pubDate>Sat, 18 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;코딩을 처음 배운 사람(특히 비전공자)에게 필요한 정보를 주고싶다. 내가 처음 겪었던 문화(?)는 조금 불친절했기 때문에... 예를 들면 &quot;A랑 B랑 무슨 차이인가요?&quot; 라는 질문에 &quot;구글링이라도 하고 오세요&quot; 라는 반응과 같은?&lt;br&gt;
사실 구글링을 해서 A vs B 라는 글을 읽어봐도, A와 B가 무슨 차이인지를 알려면 전반적인 것들을 조금씩 들어보기라도 했어야 이해할 수 있는 것이라고 생각한다. 그러니까 아예 모르는 사람이라면 그런 부수적인 정보들을 이미 알고 있을 것 같은 사람들에게 물어보는 게 맞다고 생각할수도 있다.&lt;br&gt;
물론 꼭 가르쳐줘야한다는 의미가 아니다... 워낙 스스로 찾아보고 에러는 구글링으로 해결 가능하다!라 생각하는 분위기라 이해는 되지만, 나는 그래도 좀 더 친절하게 정보를 주고 싶다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Toy Project]]></title><description><![CDATA[포트폴리오 겸 블로그를 재구성 중이다. 약 1년 전 만들었고 그 다음에 업데이트를 안했으니 이제 슬슬 해봐야지... 사실 블로그는 heroku로 배포해놓은 사이트가 있긴 한데, 굳이 나눠져 있을 이유가 없어서 github.io…]]></description><link>https://yeony99.github.io/log/arrange-portfolio</link><guid isPermaLink="false">https://yeony99.github.io/log/arrange-portfolio</guid><pubDate>Fri, 17 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;포트폴리오 겸 블로그를 재구성 중이다. 약 1년 전 만들었고 그 다음에 업데이트를 안했으니 이제 슬슬 해봐야지... 사실 블로그는 heroku로 배포해놓은 사이트가 있긴 한데, 굳이 나눠져 있을 이유가 없어서 github.io에 합쳐서 관리하려고. 써둔 글도 여기에 다 옮길 것.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[토이 프로젝트에 Typescript를 사용하기로 했다.]]></title><description><![CDATA[토이 프로젝트에 사용할 Tech Skills를 고민했다. 일단 백엔드는 둘 모두에게 (아마도) 친숙한 Spring JPA와 PostgreSQL를 사용해 만들기로 했다. 배포는 아직 이르지만 도커 이미지 띄워서 AWS…]]></description><link>https://yeony99.github.io/log/typescript-project</link><guid isPermaLink="false">https://yeony99.github.io/log/typescript-project</guid><pubDate>Fri, 17 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;토이 프로젝트에 사용할 Tech Skills를 고민했다. 일단 백엔드는 둘 모두에게 (아마도) 친숙한 Spring JPA와 PostgreSQL를 사용해 만들기로 했다. 배포는 아직 이르지만 도커 이미지 띄워서 AWS 인스턴스로 올리지 않을까 싶다. 이건 프로젝트 진행 중에 정해도 되니까 뭐...&lt;br&gt;
오히려 프론트엔드 쪽이 고민이었는데, 나는 리액트 Vue도 뭐든 괜찮았지만 역시 둘 모두에게 익숙한 게 좋을 것 같아 Vue로 선택했다. Nuxt.js를 도입할까 고민했는데... 그냥 Vue-cli에 Typescript를 얹어서 가보려고 한다. 재밌겠다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Toy Project]]></title><description><![CDATA[새로운 토이 프로젝트를 시작했다. UI/UX 공부를 하고 싶은 겸 해서 UI와 관련된 프로젝트다. 프론트엔드와 화면 설계, 디자인(Figma를 한번 써보기로 했다.) 등은 내가, 백엔드와 DB…]]></description><link>https://yeony99.github.io/log/start-new-project</link><guid isPermaLink="false">https://yeony99.github.io/log/start-new-project</guid><pubDate>Tue, 07 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;새로운 토이 프로젝트를 시작했다. UI/UX 공부를 하고 싶은 겸 해서 UI와 관련된 프로젝트다. 프론트엔드와 화면 설계, 디자인(Figma를 한번 써보기로 했다.) 등은 내가, 백엔드와 DB, 배포는 백엔드 개발자 동료 한 분이 맡아주시기로 했다. 개발 배울 때와 회사를 제외하면 팀프로젝트는 처음이다! 설렌다!!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[전자책이 정말 편리하다]]></title><description><![CDATA[…]]></description><link>https://yeony99.github.io/log/ebook</link><guid isPermaLink="false">https://yeony99.github.io/log/ebook</guid><pubDate>Sun, 15 May 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;전자책 도서관을 작년부터 아주 잘 이용하고 있다. 생각보다 많은 콘텐츠에, 아이패드 하나만 들고 가면 되니 출근길이 가볍다. 원래는 집 근처 공공도서관에 책을 신청해서 빌려서 다녔는데, 이게 여간 힘든일이 아니더라고... 주위 사람들한테 다 추천하고 다니는 중이다. 모두 전자책 도서관 하세요&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Figma 배우는 중!]]></title><description><![CDATA[사외교육으로 Figma 강의 수강 중이다. 나름대로 그림쟁이 인생을 살아와서 photoshop이나 clipstudio…]]></description><link>https://yeony99.github.io/log/learning-figma</link><guid isPermaLink="false">https://yeony99.github.io/log/learning-figma</guid><pubDate>Sun, 01 May 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;사외교육으로 Figma 강의 수강 중이다. 나름대로 그림쟁이 인생을 살아와서 photoshop이나 clipstudio 등의 디자인 툴에는 제법 익숙했는데, 피그마는 비슷한 듯 다른 듯... 조금은 어렵다.&lt;br&gt;
웹디자인 영역과는 아직 안 친숙해서 그런 것 같다. 배우다보니 UI/UX를 잘 아는 개발자가 되고싶어졌다.&lt;/p&gt;</content:encoded></item></channel></rss>